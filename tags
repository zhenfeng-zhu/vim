!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$GOPATH	plugged/vim-go/scripts/runtest.vim	/^  let $GOPATH = s:gopath$/;"	v
$RUNBENCH_SETTINGS	plugged/vim-go/scripts/runbench.vim	/^  let $RUNBENCH_SETTINGS = join(['array_whitespace_error', 'build_constraints',$/;"	v
-follow-imports	plugged/deoplete.nvim/Makefile	/^	mypy --ignore-missing-imports --follow-imports=skip --strict rplugin\/python3\/deoplete$/;"	m
<C-LeftMouse>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse>:GoDef<cr>$/;"	m
<C-]>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-]> :GoDef<cr>$/;"	m
<C-t>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-t> :<C-U>call go#def#StackPop(v:count1)<cr>$/;"	m
<C-w><C-]>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-w><C-]> :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<C-w>]	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-w>] :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<Leader>Q	init.vim	/^nmap <Leader>Q :qa!<CR>$/;"	m
<Leader>q	init.vim	/^nmap <Leader>q :q<CR>$/;"	m
<Leader>w	init.vim	/^nmap <Leader>w :w<CR>$/;"	m
<Plug>(go-alternate-edit)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-edit) :<C-u>call go#alternate#Switch(0, "edit")<CR>$/;"	m
<Plug>(go-alternate-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-split) :<C-u>call go#alternate#Switch(0, "split")<CR>$/;"	m
<Plug>(go-alternate-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-vertical) :<C-u>call go#alternate#Switch(0, "vsplit")<CR>$/;"	m
<Plug>(go-build)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-build) :<C-u>call go#cmd#Build(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-callees)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callees) :<C-u>call go#guru#Callees(-1)<CR>$/;"	m
<Plug>(go-callers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callers) :<C-u>call go#calls#Callers()<CR>$/;"	m
<Plug>(go-callstack)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callstack) :<C-u>call go#guru#Callstack(-1)<CR>$/;"	m
<Plug>(go-channelpeers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-channelpeers) :<C-u>call go#guru#ChannelPeers(-1)<CR>$/;"	m
<Plug>(go-coverage)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage) :<C-u>call go#coverage#Buffer(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-coverage-browser)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-browser) :<C-u>call go#coverage#Browser(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-coverage-clear)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-clear) :<C-u>call go#coverage#Clear()<CR>$/;"	m
<Plug>(go-coverage-toggle)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-toggle) :<C-u>call go#coverage#BufferToggle(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-decls)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-decls) :<C-u>call go#decls#Decls(0, '')<CR>$/;"	m
<Plug>(go-decls-dir)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-decls-dir) :<C-u>call go#decls#Decls(1, '')<CR>$/;"	m
<Plug>(go-def)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def) :<C-u>call go#def#Jump('', 0)<CR>$/;"	m
<Plug>(go-def-pop)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-pop) :<C-u>call go#def#StackPop()<CR>$/;"	m
<Plug>(go-def-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-split) :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<Plug>(go-def-stack)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-stack) :<C-u>call go#def#Stack()<CR>$/;"	m
<Plug>(go-def-stack-clear)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-stack-clear) :<C-u>call go#def#StackClear()<CR>$/;"	m
<Plug>(go-def-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-tab) :<C-u>call go#def#Jump("tab", 0)<CR>$/;"	m
<Plug>(go-def-type)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type) :<C-u>call go#def#Jump('', 1)<CR>$/;"	m
<Plug>(go-def-type-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-split) :<C-u>call go#def#Jump("split", 1)<CR>$/;"	m
<Plug>(go-def-type-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-tab) :<C-u>call go#def#Jump("tab", 1)<CR>$/;"	m
<Plug>(go-def-type-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-vertical) :<C-u>call go#def#Jump("vsplit", 1)<CR>$/;"	m
<Plug>(go-def-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-vertical) :<C-u>call go#def#Jump("vsplit", 0)<CR>$/;"	m
<Plug>(go-deps)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-deps) :<C-u>call go#tool#Deps()<CR>$/;"	m
<Plug>(go-describe)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-describe) :<C-u>call go#guru#Describe(-1)<CR>$/;"	m
<Plug>(go-diagnostics)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-diagnostics) :<C-u>call go#lint#Diagnostics(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-doc)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc) :<C-u>call go#doc#Open("new", "split")<CR>$/;"	m
<Plug>(go-doc-browser)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-browser) :<C-u>call go#doc#OpenBrowser()<CR>$/;"	m
<Plug>(go-doc-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-split) :<C-u>call go#doc#Open("new", "split")<CR>$/;"	m
<Plug>(go-doc-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-tab) :<C-u>call go#doc#Open("tabnew", "tabe")<CR>$/;"	m
<Plug>(go-doc-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-vertical) :<C-u>call go#doc#Open("vnew", "vsplit")<CR>$/;"	m
<Plug>(go-files)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-files) :<C-u>call go#tool#Files()<CR>$/;"	m
<Plug>(go-fmt)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-fmt) :<C-u>call go#fmt#Format(0)<CR>$/;"	m
<Plug>(go-generate)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-generate) :<C-u>call go#cmd#Generate(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-iferr)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-iferr) :<C-u>call go#iferr#Generate()<CR>$/;"	m
<Plug>(go-implements)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-implements) :<C-u>call go#implements#Implements(-1)<CR>$/;"	m
<Plug>(go-import)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-import) :<C-u>call go#import#SwitchImport(1, '', expand('<cword>'), '')<CR>$/;"	m
<Plug>(go-imports)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-imports) :<C-u>call go#fmt#Format(1)<CR>$/;"	m
<Plug>(go-info)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-info) :<C-u>call go#tool#Info(1)<CR>$/;"	m
<Plug>(go-install)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-install) :<C-u>call go#cmd#Install(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-lint)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-lint) :<C-u>call go#lint#Golint(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-metalinter)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-metalinter) :<C-u>call go#lint#Gometa(!g:go_jump_to_error, 0)<CR>$/;"	m
<Plug>(go-mod-fmt)	plugged/vim-go/ftplugin/gomod/mappings.vim	/^nnoremap <silent> <Plug>(go-mod-fmt) :<C-u>call go#mod#Format()<CR>$/;"	m
<Plug>(go-pointsto)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-pointsto) :<C-u>call go#guru#PointsTo(-1)<CR>$/;"	m
<Plug>(go-referrers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-referrers) :<C-u>call go#referrers#Referrers(-1)<CR>$/;"	m
<Plug>(go-rename)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-rename) :<C-u>call go#rename#Rename(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-run)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-run) :<C-u>call go#cmd#Run(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-run-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-split) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'split', [])<CR>$/;"	m
<Plug>(go-run-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-tab) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'tabe', [])<CR>$/;"	m
<Plug>(go-run-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-vertical) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'vsplit', [])<CR>$/;"	m
<Plug>(go-sameids)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-sameids) :<C-u>call go#guru#SameIds(1)<CR>$/;"	m
<Plug>(go-sameids-toggle)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-sameids-toggle) :<C-u>call go#guru#ToggleSameIds()<CR>$/;"	m
<Plug>(go-test)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test) :<C-u>call go#test#Test(!g:go_jump_to_error, 0)<CR>$/;"	m
<Plug>(go-test-compile)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test-compile) :<C-u>call go#test#Test(!g:go_jump_to_error, 1)<CR>$/;"	m
<Plug>(go-test-func)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test-func) :<C-u>call go#test#Func(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-vet)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-vet) :<C-u>call go#lint#Vet(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-whicherrs)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-whicherrs) :<C-u>call go#guru#Whicherrs(-1)<CR>$/;"	m
<Plug>AutoPairsReturn	plugged/auto-pairs/plugin/auto-pairs.vim	/^imap <script> <Plug>AutoPairsReturn <SID>AutoPairsReturn$/;"	m
<Plug>Fireplace1MacroExpand	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>Fireplace1MacroExpand :<C-U>set opfunc=<SID>macroexpand1op<CR>g@$/;"	m
<Plug>FireplaceCount1MacroExpand	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCount1MacroExpand :<C-U>call <SID>macroexpand1op(v:count)<CR>$/;"	m
<Plug>FireplaceCountEdit	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountEdit :<C-U>call <SID>editop(v:count)<CR>$/;"	m
<Plug>FireplaceCountFilter	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountFilter :<C-U>call <SID>filterop(v:count)<CR>$/;"	m
<Plug>FireplaceCountMacroExpand	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountMacroExpand  :<C-U>call <SID>macroexpandop(v:count)<CR>$/;"	m
<Plug>FireplaceCountPrint	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountPrint  :<C-U>call <SID>printop(v:count)<CR>$/;"	m
<Plug>FireplaceDjump	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceDjump :<C-U>exe <SID>Edit('edit', <SID>cword())<CR>$/;"	m
<Plug>FireplaceDsplit	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceDsplit :<C-U>exe <SID>Edit('split', <SID>cword())<CR>$/;"	m
<Plug>FireplaceDtabjump	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceDtabjump :<C-U>exe <SID>Edit('tabedit', <SID>cword())<CR>$/;"	m
<Plug>FireplaceEdit	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceEdit   :<C-U>set opfunc=<SID>editop<CR>g@$/;"	m
<Plug>FireplaceEditFile	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceEditFile    :<C-U>exe <SID>Find('find','edit')<CR>$/;"	m
<Plug>FireplaceFilter	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceFilter :<C-U>set opfunc=<SID>filterop<CR>g@$/;"	m
<Plug>FireplaceK	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <Plug>FireplaceK :<C-R>=<SID>K()<CR><CR>$/;"	m
<Plug>FireplaceMacroExpand	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceMacroExpand  :<C-U>set opfunc=<SID>macroexpandop<CR>g@$/;"	m
<Plug>FireplacePrint	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplacePrint  :<C-U>set opfunc=<SID>printop<CR>g@$/;"	m
<Plug>FireplacePrintLast	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplacePrintLast :exe <SID>print_last()<CR>$/;"	m
<Plug>FireplacePrompt	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap          <Plug>FireplacePrompt :exe <SID>inputeval()<CR>$/;"	m
<Plug>FireplaceRecall	plugged/vim-fireplace/autoload/fireplace.vim	/^noremap!          <Plug>FireplaceRecall <C-R>=<SID>recall()<CR>$/;"	m
<Plug>FireplaceSource	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <Plug>FireplaceSource :Source <C-R>=<SID>cword()<CR><CR>$/;"	m
<Plug>FireplaceSplitFile	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceSplitFile   :<C-U>exe <SID>Find('sfind','split')<CR>$/;"	m
<Plug>FireplaceStag	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceStag :<C-U>exe <SID>Tag('stag', <SID>cword())<CR>$/;"	m
<Plug>FireplaceStjump	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceStjump :<C-U>exe <SID>Tag('stjump', <SID>cword())<CR>$/;"	m
<Plug>FireplaceStselect	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceStselect :<C-U>exe <SID>Tag('stselect', <SID>cword())<CR>$/;"	m
<Plug>FireplaceTabeditFile	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceTabeditFile :<C-U>exe <SID>Find('tabfind','tabedit')<CR>$/;"	m
<Plug>FireplaceTag	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceTag :<C-U>exe <SID>Tag('tag', <SID>cword())<CR>$/;"	m
<Plug>FireplaceTjump	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceTjump :<C-U>exe <SID>Tag('tjump', <SID>cword())<CR>$/;"	m
<Plug>FireplaceTselect	plugged/vim-fireplace/autoload/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceTselect :<C-U>exe <SID>Tag('tselect', <SID>cword())<CR>$/;"	m
<Plug>Markdown_EditUrlUnderCursor	plugged/vim-markdown/ftplugin/markdown.vim	/^nnoremap <Plug>Markdown_EditUrlUnderCursor :call <sid>EditUrlUnderCursor()<cr>$/;"	m
<Plug>Markdown_OpenUrlUnderCursor	plugged/vim-markdown/ftplugin/markdown.vim	/^nnoremap <Plug>Markdown_OpenUrlUnderCursor :call <sid>OpenUrlUnderCursor()<cr>$/;"	m
<SID>:	plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>AutoPairsReturn	plugged/auto-pairs/plugin/auto-pairs.vim	/^inoremap <silent> <SID>AutoPairsReturn <C-R>=AutoPairsReturn()<CR>$/;"	m
<leader>c	init.vim	/^nnoremap <silent> <leader>c :call lv#Term()<cr>$/;"	m
<leader>e	init.vim	/^nnoremap <silent> <leader>e :NERDTreeToggle<cr>$/;"	m
<leader>f	init.vim	/^nnoremap <silent> <leader>f :NERDTreeFind<cr>$/;"	m
<leader>syn	plugged/vim-elixir/test.init.vim	/^map <leader>syn :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'$/;"	m
<leader>t	init.vim	/^nnoremap <silent> <leader>t :TagbarToggle<cr>$/;"	m
<plug>NERDCommenterAltDelims	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterInsert	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInsert <SPACE><BS><ESC>:call NERDComment('i', 'insert')<CR>$/;"	m
ADDONS	plugged/vim-markdown/Makefile	/^ADDONS=${VIMDIR}\/addons$/;"	m
API_INFO	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server_api_info.py	/^API_INFO = {$/;"	v
ARRAY_AGG	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function ARRAY_AGG(val, post_proc=null) {$/;"	f
ARRAY_AGG	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def ARRAY_AGG(val, post_proc=None):$/;"	f
AVG	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function AVG(val) {$/;"	f
AVG	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def AVG(val):$/;"	f
AddHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
AddLeftDelim	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddRightDelim	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AddSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
AddTabularPattern	plugged/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPattern$/;"	c
AddTabularPattern	plugged/tabular/plugin/Tabular.vim	/^function! AddTabularPattern(command, force)$/;"	f
AddTabularPipeline	plugged/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPipeline$/;"	c
AddTabularPipeline	plugged/tabular/plugin/Tabular.vim	/^function! AddTabularPipeline(command, force)$/;"	f
AggregateWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class AggregateWriter(object):$/;"	c
AirlineWebDevIcons	plugged/vim-devicons/plugin/webdevicons.vim	/^function! AirlineWebDevIcons(...)$/;"	f
AltMultipart	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
AltNested	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AltNested()$/;"	f
AppendCommentToLine	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
ArgSplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ArgSplit(string) abort$/;"	f
ArrayAggAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class ArrayAggAggregator:$/;"	c
AskPassArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
AsmFmt	plugged/vim-go/ftplugin/asm.vim	/^command! -nargs=0 AsmFmt call go#asmfmt#Format()$/;"	c
AssertEqual	plugged/rainbow_csv/test/unit_lib.vim	/^func! AssertEqual(lhs, rhs)$/;"	f
AssertTrue	plugged/rainbow_csv/test/unit_lib.vim	/^func! AssertTrue(expr, error_msg)$/;"	f
AsyncParent	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^class AsyncParent(_Parent):$/;"	c
AutoPairsBackInsert	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsBackInsert()$/;"	f
AutoPairsDefaultPairs	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefaultPairs()$/;"	f
AutoPairsDefine	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefine(pairs, ...)$/;"	f
AutoPairsDelete	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDelete()$/;"	f
AutoPairsFastWrap	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsFastWrap()$/;"	f
AutoPairsInit	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInit()$/;"	f
AutoPairsInsert	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInsert(key)$/;"	f
AutoPairsJump	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsJump()$/;"	f
AutoPairsMap	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMap(key)$/;"	f
AutoPairsMoveCharacter	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMoveCharacter(key)$/;"	f
AutoPairsReturn	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsReturn()$/;"	f
AutoPairsSpace	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsSpace()$/;"	f
AutoPairsToggle	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsToggle()$/;"	f
AutoPairsTryInit	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsTryInit()$/;"	f
AutoResetWidth	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:AutoResetWidth()$/;"	f
AutoUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
Avg	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Avg = AVG$/;"	v
AvgAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class AvgAggregator:$/;"	c
BASE_DIR	plugged/deoplete.nvim/test/conftest.py	/^BASE_DIR = Path(__file__).parent.parent$/;"	v
BUFFER_TYPE	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^BUFFER_TYPE = type(vim.current.buffer)$/;"	v
BUFFER_TYPE_ID	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^BUFFER_TYPE_ID = neovim_rpc_server_api_info.API_INFO['types']['Buffer']['id']$/;"	v
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^class Base(LoggingMixin):$/;"	c
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^class Base(LoggingMixin):$/;"	c
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/base.py	/^class Base(_Base):$/;"	c
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_word_abbr.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_length.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_matchfuzzy.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_word.py	/^from deoplete.base.filter import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^from deoplete.base.source import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/source/base.py	/^class Base(_Base):$/;"	c
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^from deoplete.base.source import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^from deoplete.base.source import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^from deoplete.base.source import Base$/;"	i
Base	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^from deoplete.base.source import Base$/;"	i
Base	plugged/vim-devicons/rplugin/python3/denite/filter/devicons_denite_converter.py	/^from .base import Base$/;"	i
Base	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^from .base import Base$/;"	i
Benchmark	plugged/vim-clojure-static/clj/vim/test-runtime.vim	/^function! Benchmark(n, ...)$/;"	f
BlameBufnr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
BlameCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
BlameCommitFileLnum	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
BlameJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
BlameLeave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
BlameQuit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
BlameRehighlight	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
BlameSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
BlobTemp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
BlurStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
Bookmark.AddBookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.CompareBookmarksByName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.Edit	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
Bookmark.GetNodeForName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.SortBookmarksList	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.ToRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.Write	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.delete	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.open	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.validate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
BrowserOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BrowserOpen(url, mods, echo_copy) abort$/;"	f
BufName	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
Buffer	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^from pynvim.api import Buffer$/;"	i
Buffer	plugged/vim-elixir/spec/spec_helper.rb	/^class Buffer$/;"	c
BuildEnvPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
BuildShell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, git, args) abort$/;"	f
CLIVimMediator	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^class CLIVimMediator:$/;"	c
COUNT	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function COUNT(val) {$/;"	f
COUNT	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def COUNT(_val):$/;"	f
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSVLint	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! CSVLint call rainbow_csv#csv_lint()$/;"	c
CSVRecordIterator	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_csv import CSVRecordIterator$/;"	i
CSVRecordIterator	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^class CSVRecordIterator(rbql_engine.RBQLInputIterator):$/;"	c
CSVWriter	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_csv import CSVWriter$/;"	i
CSVWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^class CSVWriter(rbql_engine.RBQLOutputWriter):$/;"	c
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CanCommentLine	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
Candidate	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^from deoplete.util import UserContext, Candidates, Candidate$/;"	i
Candidate	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^Candidate = typing.Dict[str, typing.Any]$/;"	v
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^from deoplete.util import error_vim, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^from deoplete.util import debug, error_vim, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^Candidates = typing.List[typing.Dict[str, typing.Any]]$/;"	v
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^Candidates = typing.Dict[str, typing.Any]$/;"	v
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_word_abbr.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^from deoplete.util import fuzzy_escape, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^from deoplete.util import fuzzy_escape, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_length.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_matchfuzzy.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^from deoplete.util import UserContext, Candidates, Candidate$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_word.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^from deoplete.util import expand, exists_path, UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^from deoplete.util import UserContext, Candidates$/;"	i
Candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^Candidates = typing.List[Candidate]$/;"	v
CeilingDirectories	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
Center	plugged/tabular/autoload/tabular.vim	/^function! s:Center(string, fieldwidth)$/;"	f
ChangeFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
ChangedLines	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:ChangedLines()$/;"	f
CheckBinaries	plugged/vim-go/plugin/go.vim	/^function! s:CheckBinaries()$/;"	f
CheckExCtagsVersion	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
CheckFTCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
CheckForExCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
CheckMouseClick	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
Child	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^    from deoplete.child import Child$/;"	i
Child	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^class Child(logger.LoggingMixin):$/;"	c
Child	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^        from deoplete.child import Child$/;"	i
ChompDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
ChompError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompError(...) abort$/;"	f
ChooseCommandMap	plugged/tabular/plugin/Tabular.vim	/^function! s:ChooseCommandMap(commandline)$/;"	f
CleanUp	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
ClearHighlighting	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^    function! s:ClearHighlighting()$/;"	f
CljBufferNs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljBufferNs(...) dict abort$/;"	f
CljEval	plugged/vim-fireplace/plugin/fireplace.vim	/^command! -bang -range -complete=customlist,fireplace#CljEvalComplete -nargs=* CljEval$/;"	c
CljExt	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljExt() dict abort$/;"	f
CljReplNs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljReplNs() dict abort$/;"	f
CljUserNs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljUserNs() dict abort$/;"	f
Cljfmt	plugged/vim-cljfmt/plugin/cljfmt.vim	/^command! Cljfmt call cljfmt#Format()$/;"	c
CljfmtRange	plugged/vim-cljfmt/plugin/cljfmt.vim	/^command! -buffer -bang -range=0 -nargs=? CljfmtRange :exe s:CljfmtRange(<bang>0, <line1>, <line2>, <count>, <q-args>)$/;"	c
CljfmtRange	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! s:CljfmtRange(bang, line1, line2, count, args) abort$/;"	f
CljfmtRequire	plugged/vim-cljfmt/plugin/cljfmt.vim	/^command! CljfmtRequire call s:RequireCljfmt()$/;"	c
Cljs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Cljs(...) abort$/;"	f
CljsBufferNs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljsBufferNs(...) dict abort$/;"	f
CljsEval	plugged/vim-fireplace/plugin/fireplace.vim	/^command! -bang -range -complete=customlist,fireplace#CljsEvalComplete -nargs=* CljsEval$/;"	c
CljsExt	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljsExt() dict abort$/;"	f
CljsReplNs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljsReplNs() dict abort$/;"	f
CljsUserNs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:CljsUserNs() dict abort$/;"	f
ClojureHighlightReferences	plugged/vim-clojure-highlight/plugin/vim_clojure_highlight.vim	/^command! -bar ClojureHighlightReferences call s:syntax_match_references()$/;"	c
ClojureSynIDNames	plugged/vim-clojure-static/clj/vim/test-runtime.vim	/^function! ClojureSynIDNames()$/;"	f
CloseFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
CloseTerm	autoload/lv.vim	/^function CloseTerm(...)$/;"	f
CloseWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
CommentBlock	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
CommitInteractive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
CommitSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
CompareAge	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
CompilerSet	plugged/vim-elixir/compiler/credo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-elixir/compiler/exunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-elixir/compiler/mix.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/vim-go/compiler/go.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompletableSubcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletableSubcommands(dir) abort$/;"	f
CompleteHeads	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
CompleteRemote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
CompleteRevision	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
CompleteSub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
CompleteTabularizeCommand	plugged/tabular/plugin/Tabular.vim	/^function! s:CompleteTabularizeCommand(argstart, cmdline, cursorpos)$/;"	f
ConfigTimestamps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
Connection	plugged/vim-fireplace/pythonx/fireplace.py	/^class Connection:$/;"	c
ConstGroupVerifier	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class ConstGroupVerifier:$/;"	c
ContainingCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
Context	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^Context = typing.Dict[str, typing.Any]$/;"	v
Context	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^class Context(object):$/;"	c
Context	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^from deoplete.context import Context$/;"	i
ConvertLeadingSpacesToTabs	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
CorrectFocusOnStartup	plugged/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
Count	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Count = COUNT$/;"	v
CountAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class CountAggregator:$/;"	c
CountNonESCedOccurances	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CreateAutocommands	plugged/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
CreateDelimMapFromCms	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
CreateMaps	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function! s:CreateMaps(modes, target, desc, combo)$/;"	f
CreateTabTreeVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
Creator.BufNamePrefix	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.CreateTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.CreateWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.New	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator.ToggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator._bindMappings	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator._createNERDTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator._createTreeWin	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator._nextBufferName	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
Creator._nextBufferNumber	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator._uniq	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
Creator.createMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator.createTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.createWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator.toggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
CtagsErrMsg	plugged/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
CurrentLineWhitespaceOff	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! -nargs=* CurrentLineWhitespaceOff echoerr 'E492: Deprecated command CurrentLineWhitespaceOff: '.s:errmsg$/;"	c
CurrentLineWhitespaceOn	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! CurrentLineWhitespaceOn echoerr 'E492: Deprecated command CurrentLineWhitespaceOn: '.s:errmsg$/;"	c
CursorHoldUpdate	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:CursorHoldUpdate()$/;"	f
CygwinPath	plugged/vim-go/autoload/go/path.vim	/^function! s:CygwinPath(path)$/;"	f
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DECLS_SYNTAX_HIGHLIGHT	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^DECLS_SYNTAX_HIGHLIGHT = [$/;"	v
Deoplete	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^from deoplete.deoplete import Deoplete$/;"	i
Deoplete	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^class Deoplete(logger.LoggingMixin):$/;"	c
DeopleteHandlers	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    class DeopleteHandlers(object):$/;"	c
DeopleteLogFilter	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^class DeopleteLogFilter(logging.Filter):$/;"	c
DetectElixir	plugged/vim-elixir/ftdetect/elixir.vim	/^function! s:DetectElixir()$/;"	f
DetectFiletype	plugged/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
DetectWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:DetectWhitespace(line1, line2)$/;"	f
DevIconsGetArtifactFix	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:DevIconsGetArtifactFix()$/;"	f
Differ	plugged/vim-elixir/spec/spec_helper.rb	/^class Differ$/;"	c
DifftoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
DirCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
DirCommitFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
DirRev	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
Disable	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:Disable()$/;"	f
DisableOnDiff	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:DisableOnDiff()$/;"	f
DisableStripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! DisableStripWhitespaceOnSave call <SID>DisableStripWhitespaceOnSave()$/;"	c
DisableStripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:DisableStripWhitespaceOnSave()$/;"	f
DisableWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! DisableWhitespace call <SID>DisableWhitespace()$/;"	c
DisableWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:DisableWhitespace()$/;"	f
DisplayWidth	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:DisplayWidth() abort$/;"	f
Do	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
DoAutocmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(cmd) abort$/;"	f
DoAutocmdChanged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
DoStagePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
DoStageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
DoStageUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
DoStageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
DoStageUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
DoStageUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
DoStageUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
DoToggleHeadHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
DoToggleHelpHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
DoTogglePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
DoToggleStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
DoToggleStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
DoToggleUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
DoToggleUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
DoToggleUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
DoToggleUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
DoToggleUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
DoToggleUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
DoToggleUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
DoToggleUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
DoUnstageStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
DoUnstageStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
DoUnstageUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
DoUnstageUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
DoUnstageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
DoUnstageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
Doc	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Doc(symbol) abort$/;"	f
DoesBlockHaveDelim	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
DotRelative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
EDN	plugged/vim-clojure-static/clj/vim/test-runtime.vim	/^function! EDN(value)$/;"	f
EPIPE	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^from errno import EPIPE$/;"	i
EXCEPT	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^EXCEPT = 'EXCEPT'$/;"	v
EchoExec	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:EchoExec(...) abort$/;"	f
Edit	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Edit(cmd, keyword) abort$/;"	f
EditUrlUnderCursor	plugged/vim-markdown/ftplugin/markdown.vim	/^    function s:EditUrlUnderCursor()$/;"	f
EexBuffer	plugged/vim-elixir/spec/spec_helper.rb	/^module EexBuffer$/;"	m	class:Differ
ElelineBufnrWinnr	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineBufnrWinnr() abort$/;"	f
ElelineCoc	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineCoc() abort$/;"	f
ElelineCurFname	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineCurFname() abort$/;"	f
ElelineError	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineError() abort$/;"	f
ElelineFsize	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineFsize(f) abort$/;"	f
ElelineGitBranch	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineGitBranch(...) abort$/;"	f
ElelineGitStatus	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineGitStatus() abort$/;"	f
ElelineLCN	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineLCN() abort$/;"	f
ElelineNvimLsp	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineNvimLsp() abort$/;"	f
ElelinePaste	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelinePaste() abort$/;"	f
ElelineTotalBuf	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineTotalBuf() abort$/;"	f
ElelineVista	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineVista() abort$/;"	f
ElelineWarning	plugged/eleline.vim/plugin/eleline.vim	/^function! ElelineWarning() abort$/;"	f
EnableStripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! EnableStripWhitespaceOnSave call <SID>EnableStripWhitespaceOnSave()$/;"	c
EnableStripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:EnableStripWhitespaceOnSave()$/;"	f
EnableWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! EnableWhitespace call <SID>EnableWhitespace()$/;"	c
EnableWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:EnableWhitespace()$/;"	f
EnsureJavaScriptInitialization	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^function! s:EnsureJavaScriptInitialization()$/;"	f
EnsurePythonInitialization	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^function! s:EnsurePythonInitialization()$/;"	f
Error	plugged/vim-go/autoload/go/import.vim	/^function! s:Error(s) abort$/;"	f
Esc	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
EscapeCtagsCmd	plugged/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
Eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Eval(type, line1, line2, range, bang, mods, args) abort$/;"	f
EvalQuery	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:EvalQuery(...) dict abort$/;"	f
Event.New	plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
ExBuffer	plugged/vim-elixir/spec/spec_helper.rb	/^module ExBuffer$/;"	m	class:Differ
ExecPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
ExecuteCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
ExecuteCtagsOnFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
ExpandMap	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ExpandMap(map)$/;"	f
ExpandSnippet	plugged/vim-go/autoload/go/auto.vim	/^function! s:ExpandSnippet() abort$/;"	f
ExpandVar	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
ExpandVarLegacy	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
ExpireStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FUNC	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^FUNC = typing.Callable[..., typing.Any]$/;"	v
FileIgnoreCase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
FileSystemCSVRegistry	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_csv import FileSystemCSVRegistry$/;"	i
FileSystemCSVRegistry	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^class FileSystemCSVRegistry(rbql_engine.RBQLTableRegistry):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_word_abbr.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_length.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_matchfuzzy.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_word.py	/^class Filter(Base):$/;"	c
Filter	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_converter_reorder_attr.py	/^from deoplete.filter.converter_reorder_attr import Filter$/;"	i
Filter	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_matcher_full_fuzzy.py	/^from deoplete.filter.matcher_full_fuzzy import Filter$/;"	i
Filter	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_matcher_fuzzy.py	/^from deoplete.filter.matcher_fuzzy import Filter$/;"	i
Filter	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:Filter()$/;"	f
Filter	plugged/vim-devicons/rplugin/python3/denite/filter/devicons_denite_converter.py	/^class Filter(Base):$/;"	c
FilterEscape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
FilterOutput	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! s:FilterOutput(lines, ...)$/;"	f
FilterString	plugged/tabular/autoload/tabular.vim	/^function! s:FilterString(lines, commandstring)$/;"	f
Find	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Find(find, edit) abort$/;"	f
FindBoundingLinesOfSexyCom	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindCornerOfSyntax	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:FindCornerOfSyntax(lnum, col, step)$/;"	f
FindCornersOfSyntax	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:FindCornersOfSyntax(lnum, col)$/;"	f
FindDelimiterIndex	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
FindLeftOfSyntax	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:FindLeftOfSyntax(lnum, col)$/;"	f
FindNextSyntax	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:FindNextSyntax(lnum, col, name)$/;"	f
FindParentVCSRoot	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
FindRightOfSyntax	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:FindRightOfSyntax(lnum, col)$/;"	f
FireplaceConnect	plugged/vim-fireplace/plugin/fireplace.vim	/^command! -bar -bang -complete=customlist,fireplace#ConnectComplete -nargs=* FireplaceConnect$/;"	c
FlagSet.New	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
FlagSet._flagsForScope	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
FlagSet.addFlag	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
FlagSet.clearFlags	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
FlagSet.removeFlag	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
FlagSet.renderToString	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
Foldexpr_markdown	plugged/vim-markdown/after/ftplugin/markdown.vim	/^    function! Foldexpr_markdown(lnum)$/;"	f
Foldtext_markdown	plugged/vim-markdown/after/ftplugin/markdown.vim	/^    function! Foldtext_markdown()$/;"	f
For	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import datetime # For date operations inside user queries$/;"	i
For	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import math # For math operations inside user queries$/;"	i
For	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import os # For system operations inside user queries$/;"	i
Format	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
FormatFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
FormatLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
FormatRebase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
FugitiveCommonDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveConfigGetRegexp	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetRegexp(pattern, ...) abort$/;"	f
FugitiveDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(path) abort$/;"	f
FugitiveExtractGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveHead	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(path) abort$/;"	f
FugitiveParse	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveResult	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveResult(...) abort$/;"	f
FugitiveStatusline	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
G	plugged/vim-fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)$/;"	c
GF	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GROUP_BY	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^GROUP_BY = 'GROUP BY'$/;"	v
GTabularize	plugged/tabular/plugin/Tabular.vim	/^   \\ GTabularize <line1>,<line2>$/;"	c
Generate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(object, ...) abort$/;"	f
GetClojureIndent	plugged/vim-clojure-static/indent/clojure.vim	/^	function! GetClojureIndent()$/;"	f
GetCurrentBufferContents	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! s:GetCurrentBufferContents()$/;"	f
GetEelixirIndent	plugged/vim-elixir/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
GetFileWinnr	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
GetFormattedFile	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! s:GetFormattedFile()$/;"	f
GetGoHTMLTmplIndent	plugged/vim-go/indent/gohtmltmpl.vim	/^function! GetGoHTMLTmplIndent(lnum)$/;"	f
GetHeaderLevel	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:GetHeaderLevel(...)$/;"	f
GetHeaderLineNum	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:GetHeaderLineNum(...)$/;"	f
GetHeaderList	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:GetHeaderList()$/;"	f
GetLevelOfHeaderAtLine	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:GetLevelOfHeaderAtLine(linenum)$/;"	f
GetMarkdownIndent	plugged/vim-markdown/indent/markdown.vim	/^function GetMarkdownIndent()$/;"	f
GetNearbyTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(request, forcecurrent, ...) abort$/;"	f
GetNextHeaderLineNumberAtLevel	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:GetNextHeaderLineNumberAtLevel(level, ...)$/;"	f
GetParentHeaderLineNumber	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:GetParentHeaderLineNumber(...)$/;"	f
GetPreviousHeaderLineNumberAtLevel	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:GetPreviousHeaderLineNumberAtLevel(level, ...)$/;"	f
GetReformatString	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! s:GetReformatString(CurrentBufferContents)$/;"	f
GetSexyComLeft	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetSupportedFiletypes	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
GetTagInfo	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
Git	plugged/vim-fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)$/;"	c
GlobComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern, ...) abort$/;"	f
GoAddTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoAddTags call go#tags#Add(<line1>, <line2>, <count>, <f-args>)$/;"	c
GoAddWorkspace	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=+ -complete=dir GoAddWorkspace call go#lsp#AddWorkspaceDirectory(<f-args>)$/;"	c
GoAlternate	plugged/vim-go/ftplugin/go/commands.vim	/^command! -bang GoAlternate call go#alternate#Switch(<bang>0, '')$/;"	c
GoAsmFmtAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoAsmFmtAutoSaveToggle call go#asmfmt#ToggleAsmFmtAutoSave()$/;"	c
GoAutoTypeInfoToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoAutoTypeInfoToggle call go#complete#ToggleAutoTypeInfo()$/;"	c
GoBuild	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoBuild call go#cmd#Build(<bang>0,<f-args>)$/;"	c
GoBuildTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -bang GoBuildTags call go#cmd#BuildTags(<bang>0, <f-args>)$/;"	c
GoCallees	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoCallees call go#guru#Callees(<count>)$/;"	c
GoCallers	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoCallers call go#calls#Callers()$/;"	c
GoCallstack	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoCallstack call go#guru#Callstack(<count>)$/;"	c
GoChannelPeers	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoChannelPeers call go#guru#ChannelPeers(<count>)$/;"	c
GoCoverage	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverage call go#coverage#Buffer(<bang>0, <f-args>)$/;"	c
GoCoverageBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageBrowser call go#coverage#Browser(<bang>0, <f-args>)$/;"	c
GoCoverageClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageClear call go#coverage#Clear()$/;"	c
GoCoverageToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageToggle call go#coverage#BufferToggle(<bang>0, <f-args>)$/;"	c
GoDebugAttach	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=1 GoDebugAttach call go#debug#Start('attach', <f-args>)$/;"	c
GoDebugBreakpoint	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=? GoDebugBreakpoint call go#debug#Breakpoint(<f-args>)$/;"	c
GoDebugConnect	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=? GoDebugConnect call go#debug#Start('connect', <f-args>)$/;"	c
GoDebugStart	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugStart call go#debug#Start('debug', <f-args>)$/;"	c
GoDebugTest	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugTest  call go#debug#Start('test', <f-args>)$/;"	c
GoDebugTestFunc	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* GoDebugTestFunc  call go#debug#TestFunc(<f-args>)$/;"	c
GoDecls	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=file GoDecls call go#decls#Decls(0, <q-args>)$/;"	c
GoDeclsDir	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=dir GoDeclsDir call go#decls#Decls(1, <q-args>)$/;"	c
GoDef	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoDef :call go#def#Jump('', 0)$/;"	c
GoDefPop	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefPop :call go#def#StackPop(<f-args>)$/;"	c
GoDefStack	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefStack :call go#def#Stack(<f-args>)$/;"	c
GoDefStackClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefStackClear :call go#def#StackClear(<f-args>)$/;"	c
GoDefType	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoDefType :call go#def#Jump('', 1)$/;"	c
GoDeps	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoDeps echo go#tool#Deps()$/;"	c
GoDescribe	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoDescribe call go#guru#Describe(<count>)$/;"	c
GoDiagnostics	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoDiagnostics call go#lint#Diagnostics(<bang>0, <f-args>)$/;"	c
GoDoc	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range -complete=customlist,go#package#Complete GoDoc call go#doc#Open('new', 'split', <f-args>)$/;"	c
GoDocBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range -complete=customlist,go#package#Complete GoDocBrowser call go#doc#OpenBrowser(<f-args>)$/;"	c
GoDrop	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=customlist,go#package#Complete GoDrop call go#import#SwitchImport(0, '', <f-args>, '')$/;"	c
GoErrCheck	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=customlist,go#package#Complete GoErrCheck call go#lint#Errcheck(<bang>0, <f-args>)$/;"	c
GoFiles	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -complete=customlist,go#tool#ValidFiles GoFiles echo go#tool#Files(<f-args>)$/;"	c
GoFillStruct	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFillStruct call go#fillstruct#FillStruct()$/;"	c
GoFmt	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFmt call go#fmt#Format(0)$/;"	c
GoFmtAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFmtAutoSaveToggle call go#fmt#ToggleFmtAutoSave()$/;"	c
GoFreevars	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoFreevars call go#guru#Freevars(<count>)$/;"	c
GoGenerate	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoGenerate call go#cmd#Generate(<bang>0,<f-args>)$/;"	c
GoGuruScope	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoGuruScope call go#guru#Scope(<f-args>)$/;"	c
GoIfErr	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoIfErr call go#iferr#Generate()$/;"	c
GoImpl	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -complete=customlist,go#impl#Complete GoImpl call go#impl#Impl(<f-args>)$/;"	c
GoImplements	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=% GoImplements call go#implements#Implements(<count>)$/;"	c
GoImport	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=1 -bang -complete=customlist,go#package#Complete GoImport call go#import#SwitchImport(1, '', <f-args>, '<bang>')$/;"	c
GoImportAs	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=customlist,go#package#Complete GoImportAs call go#import#SwitchImport(1, <f-args>, '<bang>')$/;"	c
GoImports	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoImports call go#fmt#Format(1)$/;"	c
GoIndent	plugged/vim-go/indent/go.vim	/^function! GoIndent(lnum) abort$/;"	f
GoInfo	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoInfo call go#tool#Info(1)$/;"	c
GoInstall	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoInstall call go#cmd#Install(<bang>0, <f-args>)$/;"	c
GoInstallBinaries	plugged/vim-go/plugin/go.vim	/^command! -nargs=* -complete=customlist,s:complete GoInstallBinaries call s:GoInstallBinaries(-1, <f-args>)$/;"	c
GoInstallBinaries	plugged/vim-go/plugin/go.vim	/^function! s:GoInstallBinaries(updateBinaries, ...)$/;"	f
GoKeyify	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoKeyify call go#keyify#Keyify()$/;"	c
GoLSPDebugBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoLSPDebugBrowser call go#lsp#DebugBrowser()$/;"	c
GoLint	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoLint call go#lint#Golint(<bang>0, <f-args>)$/;"	c
GoMetaLinter	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoMetaLinter call go#lint#Gometa(<bang>0, 0, <f-args>)$/;"	c
GoMetaLinterAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoMetaLinterAutoSaveToggle call go#lint#ToggleMetaLinterAutoSave()$/;"	c
GoMinisnip	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoMinisnip() abort$/;"	f
GoModFmt	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 -range GoModFmt call go#mod#Format()$/;"	c
GoModFmt	plugged/vim-go/ftplugin/gomod/commands.vim	/^command! -nargs=0 -range GoModFmt call go#mod#Format()$/;"	c
GoModFmtAutoSaveToggle	plugged/vim-go/ftplugin/gomod/commands.vim	/^command! -nargs=0 GoModFmtAutoSaveToggle call go#mod#ToggleModFmtAutoSave()$/;"	c
GoNeosnippet	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoNeosnippet() abort$/;"	f
GoPath	plugged/vim-go/plugin/go.vim	/^command! -nargs=? -complete=dir GoPath call go#path#GoPath(<f-args>)$/;"	c
GoPlay	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 -range=% GoPlay call go#play#Share(<count>, <line1>, <line2>)$/;"	c
GoPointsTo	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoPointsTo call go#guru#PointsTo(<count>)$/;"	c
GoReferrers	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=% GoReferrers call go#referrers#Referrers(<count>)$/;"	c
GoRemoveTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoRemoveTags call go#tags#Remove(<line1>, <line2>, <count>, <f-args>)$/;"	c
GoRename	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=customlist,go#rename#Complete GoRename call go#rename#Rename(<bang>0, <f-args>)$/;"	c
GoReportGitHubIssue	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoReportGitHubIssue call go#issue#New()$/;"	c
GoRun	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=file GoRun call go#cmd#Run(<bang>0,<f-args>)$/;"	c
GoSameIds	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIds call go#guru#SameIds(1)$/;"	c
GoSameIdsAutoToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsAutoToggle call go#guru#AutoToggleSameIds()$/;"	c
GoSameIdsClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsClear call go#guru#ClearSameIds()$/;"	c
GoSameIdsToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsToggle call go#guru#ToggleSameIds()$/;"	c
GoTemplateAutoCreateToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoTemplateAutoCreateToggle call go#template#ToggleAutoCreate()$/;"	c
GoTest	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTest call go#test#Test(<bang>0, 0, <f-args>)$/;"	c
GoTestCompile	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTestCompile call go#test#Test(<bang>0, 1, <f-args>)$/;"	c
GoTestFunc	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTestFunc call go#test#Func(<bang>0, <f-args>)$/;"	c
GoToggleTermCloseOnExit	plugged/vim-go/ftplugin/go/commands.vim	/^command! GoToggleTermCloseOnExit call go#term#ToggleCloseOnExit()$/;"	c
GoUltiSnips	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoUltiSnips() abort$/;"	f
GoUpdateBinaries	plugged/vim-go/plugin/go.vim	/^command! -nargs=* -complete=customlist,s:complete GoUpdateBinaries  call s:GoInstallBinaries(1, <f-args>)$/;"	c
GoVet	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoVet call go#lint#Vet(<bang>0, <f-args>)$/;"	c
GoWhicherrs	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoWhicherrs call go#guru#Whicherrs(<count>)$/;"	c
GodocView	plugged/vim-go/autoload/go/doc.vim	/^function! s:GodocView(newposition, position, content) abort$/;"	f
GotoFileWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
GotoNextFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
GotoNextToplevelTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
GotoPrevFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
GotoTrailingWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:GotoTrailingWhitespace(search_backwards, from, to)$/;"	f
GrepParseLine	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(prefix, name_only, dir, line) abort$/;"	f
GrepSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
GutentagsToggleEnabled	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
HandleBufDelete	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
HandleBufWrite	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
HandleOnlyWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
HasCStyleComments	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasLeadingTabs	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
HasOpenFileWindows	plugged/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
HasOpt	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
HasPath	plugged/vim-go/autoload/go/path.vim	/^function! s:HasPath(path) abort$/;"	f
HashJoinMap	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class HashJoinMap:$/;"	c
HeaderDecrease	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer -range=% HeaderDecrease call s:HeaderDecrease(<line1>, <line2>)$/;"	c
HeaderDecrease	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:HeaderDecrease(line1, line2, ...)$/;"	f
HeaderIncrease	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer -range=% HeaderIncrease call s:HeaderDecrease(<line1>, <line2>, 1)$/;"	c
HighlightEOLWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^    function! s:HighlightEOLWhitespace()$/;"	f
HighlightEOLWhitespaceExceptCurrentLine	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^    function! s:HighlightEOLWhitespaceExceptCurrentLine()$/;"	f
HighlightTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
HtmlHiLink	plugged/vim-markdown/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	plugged/vim-markdown/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
INNER_JOIN	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^INNER_JOIN = 'INNER JOIN'$/;"	v
IndentFile	plugged/vim-clojure-static/clj/vim/test-runtime.vim	/^function! IndentFile()$/;"	f
IndentLinesDisable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesDisable call s:IndentLinesDisable()$/;"	c
IndentLinesDisable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesDisable let b:indentLine_enabled = 0 | call s:IndentLinesDisable()$/;"	c
IndentLinesDisable	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:IndentLinesDisable()$/;"	f
IndentLinesEnable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesEnable call s:IndentLinesEnable()$/;"	c
IndentLinesEnable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesEnable let b:indentLine_enabled = 1 | call s:IndentLinesEnable()$/;"	c
IndentLinesEnable	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:IndentLinesEnable()$/;"	f
IndentLinesReset	plugged/indentLine/after/plugin/indentLine.vim	/^command! -nargs=? IndentLinesReset call s:ResetWidth(<f-args>)$/;"	c
IndentLinesToggle	plugged/indentLine/after/plugin/indentLine.vim	/^command! IndentLinesToggle call s:IndentLinesToggle()$/;"	c
IndentLinesToggle	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:IndentLinesToggle()$/;"	f
Init	plugged/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
InitColor	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:InitColor()$/;"	f
InitTypes	plugged/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
InitVariable	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
InitVariable	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:InitVariable(var, value)$/;"	f
InitWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
InnerJoiner	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class InnerJoiner(object):$/;"	c
InsertNToc	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer -nargs=? InsertNToc call s:InsertToc('numbers', <args>)$/;"	c
InsertStatuslineColor	plugged/eleline.vim/plugin/eleline.vim	/^function! s:InsertStatuslineColor(mode) abort$/;"	f
InsertToc	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer -nargs=? InsertToc call s:InsertToc('bullets', <args>)$/;"	c
InsertToc	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:InsertToc(format, ...)$/;"	f
InternalBadFieldError	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class InternalBadFieldError(Exception):$/;"	c
InternalBadKeyError	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class InternalBadKeyError(Exception):$/;"	c
InvertComment	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
IsBlankLine	plugged/vim-markdown/indent/markdown.vim	/^function! s:IsBlankLine(line)$/;"	f
IsCommented	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOutermost	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedOutermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsConflicted	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
IsDelimValid	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEscaped	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsHeaderLine	plugged/vim-markdown/indent/markdown.vim	/^function! s:IsHeaderLine(line)$/;"	f
IsInSexyComment	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsLiStart	plugged/vim-markdown/indent/markdown.vim	/^function! s:IsLiStart(line)$/;"	f
IsLineVisible	plugged/tagbar/autoload/tagbar.vim	/^function! s:IsLineVisible(line) abort$/;"	f
IsMkdCode	plugged/vim-markdown/indent/markdown.vim	/^function! s:IsMkdCode(lnum)$/;"	f
IsNumEven	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsSexyComment	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
IsValidFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
JOIN	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^JOIN = 'JOIN'$/;"	v
Job.onExitCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onExitCB() abort$/;"	f
Job.onFailed	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onFailed() abort$/;"	f
Job.onStderrCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStderrCB(data) abort$/;"	f
Job.onStdoutCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStdoutCB(data) abort$/;"	f
Job.onSuccess	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onSuccess() abort$/;"	f
Job.run	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^    function! s:Job.run(cmd) abort$/;"	f
JobOpts	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
JumpToTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar) abort$/;"	f
K	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:K() abort$/;"	f
K	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> K :GoDoc<cr>$/;"	m
KeyMap.Add	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
KeyMap.All	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Compare	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
KeyMap.Create	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.FindFor	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap.Invoke	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap.Remove	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap.bind	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap.invoke	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
Keywordprg	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
LEFT_JOIN	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^LEFT_JOIN = 'LEFT JOIN'$/;"	v
LEFT_OUTER_JOIN	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^LEFT_OUTER_JOIN = 'LEFT OUTER JOIN'$/;"	v
LIKE	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^LIKE = like$/;"	v
LIMIT	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^LIMIT = 'LIMIT'$/;"	v
LINES_MAX	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^LINES_MAX = 150$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Last	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Last(bang, count) abort$/;"	f
LastIndexOfDelim	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
LeadingSpaceDisable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceDisable call s:LeadingSpaceDisable()$/;"	c
LeadingSpaceDisable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceDisable let b:indentLine_leadingSpaceEnabled = 0 | call s:LeadingSpaceDisable()$/;"	c
LeadingSpaceDisable	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:LeadingSpaceDisable()$/;"	f
LeadingSpaceEnable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceEnable call s:LeadingSpaceEnable()$/;"	c
LeadingSpaceEnable	plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceEnable let b:indentLine_leadingSpaceEnabled = 1 | call s:LeadingSpaceEnable()$/;"	c
LeadingSpaceEnable	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:LeadingSpaceEnable()$/;"	f
LeadingSpaceToggle	plugged/indentLine/after/plugin/indentLine.vim	/^command! LeadingSpaceToggle call s:LeadingSpaceToggle()$/;"	c
LeadingSpaceToggle	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:LeadingSpaceToggle()$/;"	f
LeexBuffer	plugged/vim-elixir/spec/spec_helper.rb	/^module LeexBuffer$/;"	m	class:Differ
Left	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Left(...)$/;"	f
Left	plugged/tabular/autoload/tabular.vim	/^function! s:Left(string, fieldwidth)$/;"	f
LeftJoiner	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class LeftJoiner(object):$/;"	c
LeftMostIndx	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
LinesError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
Listener.HasPath	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.HasPath(path_str) abort$/;"	f
Listener.OnInit	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnInit(event) abort$/;"	f
Listener.OnRefresh	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefresh(event) abort$/;"	f
Listener.OnRefreshFlags	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefreshFlags(event) abort$/;"	f
Listener.SetNext	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.SetNext(cache) abort$/;"	f
Listener.TryUpdateNERDTreeUI	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.TryUpdateNERDTreeUI() abort$/;"	f
Listener.callback	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.callback(event) abort$/;"	f
Listener.changed	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.changed() abort$/;"	f
Listener.getOption	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.getOption(name, default) abort$/;"	f
Listener.update	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.update() abort$/;"	f
LoadUserTypeDefs	plugged/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
LogFlushQueue	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
LogParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, line) abort$/;"	f
Logger.debug	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.debug(msg) abort$/;"	f
Logger.error	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.error(msg) abort$/;"	f
Logger.info	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.info(msg) abort$/;"	f
Logger.output	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.output(level, msg) abort$/;"	f
Logger.warning	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.warning(msg) abort$/;"	f
LoggingMixin	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^from deoplete.logger import LoggingMixin$/;"	i
LoggingMixin	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^from deoplete.logger import LoggingMixin$/;"	i
LoggingMixin	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^class LoggingMixin(object):$/;"	c
Lookup	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Lookup(ns, macro, arg) abort$/;"	f
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
MAX	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function MAX(val) {$/;"	f
MAX	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def MAX(val):$/;"	f
MEDIAN	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function MEDIAN(val) {$/;"	f
MEDIAN	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def MEDIAN(val):$/;"	f
MIN	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function MIN(val) {$/;"	f
MIN	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def MIN(val):$/;"	f
Map	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
Map	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
MapKeys	plugged/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
MapMotion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
MapNormVis	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MapNormVis(rhs,lhs)$/;"	f
MapNotHasmapto	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MapNotHasmapto(lhs, rhs)$/;"	f
MarkdownClearSyntaxVariables	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MarkdownClearSyntaxVariables()$/;"	f
MarkdownHighlightSources	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MarkdownHighlightSources(force)$/;"	f
MarkdownRefreshSyntax	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MarkdownRefreshSyntax(force)$/;"	f
MarkdownSetupFoldLevel	plugged/vim-markdown/after/ftplugin/markdown.vim	/^function! s:MarkdownSetupFoldLevel()$/;"	f
MarkdownSetupFolding	plugged/vim-markdown/after/ftplugin/markdown.vim	/^function! s:MarkdownSetupFolding()$/;"	f
Markdown_GetUrlForPosition	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:Markdown_GetUrlForPosition(lnum, col)$/;"	f
Max	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Max = MAX$/;"	v
MaxAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class MaxAggregator:$/;"	c
Median	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Median = MEDIAN$/;"	v
MedianAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class MedianAggregator:$/;"	c
MenuController.New	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.isMinimal	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
MenuController.showMenu	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MergeHead	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(...) abort$/;"	f
MergeSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
MergetoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
MessageCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MessageCfile(...) abort$/;"	f
Min	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Min = MIN$/;"	v
MinAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class MinAggregator:$/;"	c
MinimizeMaxFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
Mkd	plugged/vim-markdown/after/ftplugin/markdown.vim	/^augroup Mkd$/;"	a
Mkd	plugged/vim-markdown/ftplugin/markdown.vim	/^augroup Mkd$/;"	a
Mods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
Module	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^        import readline # Module readline is not available on Windows$/;"	i
Move	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
MoveToCurHeader	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MoveToCurHeader()$/;"	f
MoveToNextHeader	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MoveToNextHeader()$/;"	f
MoveToNextSiblingHeader	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MoveToNextSiblingHeader()$/;"	f
MoveToParentHeader	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MoveToParentHeader()$/;"	f
MoveToPreviousHeader	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MoveToPreviousHeader()$/;"	f
MoveToPreviousSiblingHeader	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:MoveToPreviousSiblingHeader()$/;"	f
Multipart	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
MyTest	plugged/vim-elixir/spec/syntax/exunit_spec.rb	/^    module MyTest do$/;"	m
NERDComment	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function! NERDComment(mode, type) range$/;"	f
NERDCommentIsCharCommented	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function! NERDCommentIsCharCommented(line, col) abort$/;"	f
NERDCommentIsLineCommented	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function! NERDCommentIsLineCommented(lineNo)$/;"	f
NERDCommenter	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^augroup NERDCommenter$/;"	a
NERDTree	plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree.AddPathFilter	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
NERDTree.Close	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
NERDTree.CursorToBookmarkTable	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
NERDTree.CursorToTreeWin	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
NERDTree.ExistsForBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
NERDTree.ExistsForTab	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
NERDTree.ForCurrentBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
NERDTree.ForCurrentTab	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
NERDTree.GetWinNum	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
NERDTree.IsOpen	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
NERDTree.MustBeOpen	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
NERDTree.New	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
NERDTree.PathFilters	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
NERDTree.changeRoot	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
NERDTree.getRoot	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
NERDTree.isTabTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
NERDTree.isWinTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
NERDTree.previousBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
NERDTree.render	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
NERDTree.setPreviousBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
NERDTreeAddKeyMap	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeCopyNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDash	plugged/nerdtree-dash/syntax/nerdtree.vim	/^augroup NERDTreeDash$/;"	a
NERDTreeDeleteNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeFocus	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeHijackNetrw	plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMoveNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSystemCommand	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeToggleVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
NERDTreeWebDevIconsRefreshListener	plugged/vim-devicons/plugin/webdevicons.vim	/^function! NERDTreeWebDevIconsRefreshListener(event)$/;"	f
NativeDelegate	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:NativeDelegate(func, ...) dict abort$/;"	f
NavigateUp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
NerdEcho	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
Nested	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Nested()$/;"	f
NextExpandedHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
NextFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
NextHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
NextItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
NextSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
NextSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
NextTrailingWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! -range=% NextTrailingWhitespace call <SID>GotoTrailingWhitespace(0, <line1>, <line2>)$/;"	c
NoRainbowComment	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! NoRainbowComment call rainbow_csv#manual_disable_comment_prefix()$/;"	c
NoRainbowDelim	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! NoRainbowDelim call rainbow_csv#manual_disable()$/;"	c
NormalizeNs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:NormalizeNs(client, payload) abort$/;"	f
Notifier.AddListener	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
Notifier.GetListenersForEvent	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
Notifier.GetListenersMap	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
Notifier.NotifyListeners	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
NullError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NullError(...) abort$/;"	f
NumHandler	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class NumHandler:$/;"	c
NumLinesInBuf	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/base.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_word_abbr.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_length.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_matchfuzzy.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_word.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/source/base.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^from pynvim import Nvim$/;"	i
Nvim	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^from pynvim import Nvim$/;"	i
NvimHandler	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class NvimHandler(socketserver.BaseRequestHandler):$/;"	c
ORDER_BY	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^ORDER_BY = 'ORDER BY'$/;"	v
OnFrame	plugged/eleline.vim/autoload/eleline.vim	/^function! s:OnFrame(...) abort$/;"	f
OpenFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
OpenParents	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
OpenParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(string, wants_cmd) abort$/;"	f
OpenUrlUnderCursor	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:OpenUrlUnderCursor()$/;"	f
OpenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
Opener.New	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener._bufInWindows	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
Opener._checkToCloseTree	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener._firstUsableWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
Opener._gotoTargetWin	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener._isWindowUsable	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
Opener._newSplit	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
Opener._newVSplit	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener._openDirectory	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener._openFile	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
Opener._previousWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener._restoreCursorPos	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener._reuseWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener._saveCursorPos	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
Opener.open	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
OrderedDict	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^from collections import OrderedDict, defaultdict, namedtuple$/;"	i
Owner	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
PATH	plugged/deoplete.nvim/Makefile	/^PATH := .\/vim-themis\/bin:$(PATH)$/;"	m
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
Parent	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^Parent = typing.Union[deoplete.parent.SyncParent, deoplete.parent.AsyncParent]$/;"	v
ParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParsePattern	plugged/tabular/plugin/Tabular.vim	/^function! s:ParsePattern(string)$/;"	f
ParseTagline	plugged/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
PatchSearchExpr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
Path	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from pathlib import Path$/;"	i
Path	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^from pathlib import Path$/;"	i
Path	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^from pathlib import Path$/;"	i
Path	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^from pathlib import Path$/;"	i
Path	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from pathlib import Path$/;"	i
Path	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^from pathlib import Path$/;"	i
Path	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^from pathlib import Path$/;"	i
Path	plugged/deoplete.nvim/test/conftest.py	/^from pathlib import Path$/;"	i
Path.AbsolutePathFor	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
Path.CopyingSupported	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
Path.Resolve	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
Path.WinToUnixPath	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._escChars	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
Path._ignorePatternMatches	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path._splitChunks	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
Path._str	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
Path.addDelimiter	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
Path.bookmarkNames	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
Path.changeToDir	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
Path.copy	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.createParentDirectories	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
Path.delete	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
Path.edit	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
Path.equals	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortKey	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
Path.getSortOrderIndex	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
Path.isAncestor	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
Path.isHiddenUnder	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
Path.isUnder	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
Path.isUnixHiddenFile	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
Path.isUnixHiddenPath	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
Path.readInfoFromDisk	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
Path.refreshFlags	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
Path.rename	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
Path.tabnr	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
PathInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
PlaceDelimitersAndInsBetween	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
PlatformDelegate	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:PlatformDelegate(func, ...) dict abort$/;"	f
PreparePathArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal) abort$/;"	f
PrevNonBlank	plugged/vim-markdown/indent/markdown.vim	/^function! s:PrevNonBlank(lnum)$/;"	f
PrevTrailingWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! -range=% PrevTrailingWhitespace call <SID>GotoTrailingWhitespace(1, <line1>, <line2>)$/;"	c
PreviousFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
PreviousHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
PreviousItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
PreviousSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
PreviousSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
PrintHelp	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
PrintKinds	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
PrintTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
Process	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from deoplete.process import Process$/;"	i
Process	plugged/deoplete.nvim/rplugin/python3/deoplete/process.py	/^class Process(asyncio.SubprocessProtocol):$/;"	c
ProcessFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
ProcessTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
ProjectionistDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
QueryLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
Queue	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from queue import Queue$/;"	i
Queue	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    from Queue import Queue, Empty as QueueEmpty$/;"	i
Queue	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    from queue import Queue, Empty as QueueEmpty$/;"	i
QueueEmpty	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    from Queue import Queue, Empty as QueueEmpty$/;"	i
QueueEmpty	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    from queue import Queue, Empty as QueueEmpty$/;"	i
QuickfixCreate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
QuickfixGet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
QuickfixSet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
QuickfixStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort$/;"	f
RBQLAggregationToken	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RBQLAggregationToken(object):$/;"	c
RBQLContext	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RBQLContext:$/;"	c
RBQLInputIterator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RBQLInputIterator:$/;"	c
RBQLOutputWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RBQLOutputWriter:$/;"	c
RBQLRecord	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RBQLRecord:$/;"	c
RBQLTableRegistry	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RBQLTableRegistry:$/;"	c
RBQL_VERSION	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^RBQL_VERSION = __version__$/;"	v
REGISTRY	plugged/vim-markdown/Makefile	/^REGISTRY=${VIMDIR}\/registry$/;"	m
RainbowAlign	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowAlign call rainbow_csv#csv_align()$/;"	c
RainbowComment	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowComment call rainbow_csv#manual_set_comment_prefix(0)$/;"	c
RainbowCommentMulti	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowCommentMulti call rainbow_csv#manual_set_comment_prefix(1)$/;"	c
RainbowDelim	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowDelim call rainbow_csv#manual_set('auto', 0)$/;"	c
RainbowDelimQuoted	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowDelimQuoted call rainbow_csv#manual_set('quoted', 0)$/;"	c
RainbowDelimSimple	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowDelimSimple call rainbow_csv#manual_set('simple', 0)$/;"	c
RainbowInitAuGrp	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^augroup RainbowInitAuGrp$/;"	a
RainbowLint	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowLint call rainbow_csv#csv_lint()$/;"	c
RainbowMultiDelim	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowMultiDelim call rainbow_csv#manual_set('simple', 1)$/;"	c
RainbowName	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! -nargs=1 RainbowName call rainbow_csv#set_table_name_for_buffer(<q-args>)$/;"	c
RainbowNoDelim	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowNoDelim call rainbow_csv#manual_disable()$/;"	c
RainbowShrink	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RainbowShrink call rainbow_csv#csv_shrink()$/;"	c
RainbowToggle	plugged/rainbow/plugin/rainbow_main.vim	/^command! RainbowToggle call rainbow_main#toggle()$/;"	c
RainbowToggleOff	plugged/rainbow/plugin/rainbow_main.vim	/^command! RainbowToggleOff call rainbow_main#clear()$/;"	c
RainbowToggleOn	plugged/rainbow/plugin/rainbow_main.vim	/^command! RainbowToggleOn call rainbow_main#load()$/;"	c
RbRun	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RbRun call rainbow_csv#finish_query_editing()$/;"	c
RbSelect	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! RbSelect call rainbow_csv#select_from_file()$/;"	c
RbqlIOHandlingError	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RbqlIOHandlingError(Exception):$/;"	c
RbqlParsingError	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RbqlParsingError(Exception):$/;"	c
RbqlRuntimeError	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class RbqlRuntimeError(Exception):$/;"	c
ReadExec	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadExec(line1, count, range, mods, env, args, options) abort$/;"	f
ReadPrepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
RebaseArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
RebaseSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
RecoverStateAfterLineComment	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RecoverStateAfterLineComment(state)$/;"	f
RedirectStream	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^class RedirectStream(io.IOBase):$/;"	c
Refresh	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! s:Refresh()$/;"	f
Relative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
ReloadStatusBuffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
ReloadTabStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
ReloadWinStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
Remove	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
RemoveDelimiters	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RenderContent	plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
RenderKeepView	plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
ReopenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
ReplaceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
ReplaceDelims	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
Require	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Require(bang, echo, ns) abort$/;"	f
RequireCljfmt	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! s:RequireCljfmt()$/;"	f
ResetConcealOption	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:ResetConcealOption()$/;"	f
ResetWidth	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:ResetWidth(...)$/;"	f
Resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
RestoreScreenState	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreSession	plugged/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
Result	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^Result = typing.Dict[str, typing.Any]$/;"	v
RevertSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Right	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Right(...)$/;"	f
Right	plugged/tabular/autoload/tabular.vim	/^function! s:Right(string, fieldwidth)$/;"	f
RightMostIndx	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
RunBufDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
RunClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunClose(state, tmp, job, ...) abort$/;"	f
RunCloseIn	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunCloseIn(job) abort$/;"	f
RunEcho	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEcho(tmp) abort$/;"	f
RunEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, tmp, job) abort$/;"	f
RunExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunExit(state, tmp, job, exit_status) abort$/;"	f
RunFinished	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunFinished(state, ...) abort$/;"	f
RunJobs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunJobs() abort$/;"	f
RunReceive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, tmp, type, job, data, ...) abort$/;"	f
RunSave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSave(state) abort$/;"	f
RunSend	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
RunTests	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:RunTests(bang, count, ...) abort$/;"	f
RunTick	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunTick(job) abort$/;"	f
RunUnitTests	plugged/rainbow_csv/test/unit_lib.vim	/^func! RunUnitTests()$/;"	f
RunWait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, tmp, job, ...) abort$/;"	f
SELECT	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^SELECT = 'SELECT'$/;"	v
SID	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function s:SID()$/;"	f
SID	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
STRICT_LEFT_JOIN	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^STRICT_LEFT_JOIN = 'STRICT LEFT JOIN'$/;"	v
SUM	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function SUM(val) {$/;"	f
SUM	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def SUM(val):$/;"	f
SampleClass	plugged/rainbow/tests/test.rb	/^class SampleClass$/;"	c
SaveScreenState	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
Select	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! -nargs=+ Select call rainbow_csv#run_select_cmd_query(<q-args>)$/;"	c
Selection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
SetConcealOption	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:SetConcealOption()$/;"	f
SetFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
SetFoldLevelRecursive	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
SetGitBranch	plugged/eleline.vim/plugin/eleline.vim	/^function! s:SetGitBranch(root, str) abort$/;"	f
SetLines	plugged/tabular/autoload/tabular.vim	/^function! s:SetLines(start, len, strings)$/;"	f
SetStatusLine	plugged/eleline.vim/plugin/eleline.vim	/^function! s:SetStatusLine(...) abort$/;"	f
SetStatusLine	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
SetTagbar	plugged/vim-go/ftplugin/go/tagbar.vim	/^function! s:SetTagbar()$/;"	f
SetUpForNewFiletype	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
SetexToAtx	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer -range=% SetexToAtx call s:SetexToAtx(<line1>, <line2>)$/;"	c
SetexToAtx	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:SetexToAtx(line1, line2)$/;"	f
Setup	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:Setup()$/;"	f
SetupAutoCommands	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! <SID>SetupAutoCommands()$/;"	f
SetupListeners	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! s:SetupListeners()$/;"	f
SetupStateBeforeLineComment	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SetupStateBeforeLineComment(topLine, bottomLine)$/;"	f
SexyNested	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SexyNested()$/;"	f
ShouldHighlight	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:ShouldHighlight()$/;"	f
ShouldStripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:ShouldStripWhitespaceOnSave()$/;"	f
ShowImportantMessage	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:ShowImportantMessage(msg_header, msg_lines)$/;"	f
ShowInPreviewWin	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
ShowPrototype	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
ShrinkIfExpanded	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
SingleTableRegistry	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_engine import SingleTableRegistry$/;"	i
SingleTableRegistry	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class SingleTableRegistry(RBQLTableRegistry):$/;"	c
Slash	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
Slash	plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
SocketToStream	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class SocketToStream():$/;"	c
SortedWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class SortedWriter(object):$/;"	c
Source	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^class Source(Base):$/;"	c
Source	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^class Source(Base):$/;"	c
Source	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^class Source(Base):$/;"	c
Source	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^class Source(Base):$/;"	c
Source	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^class Source(Base):$/;"	c
Source	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^class Source(Base):$/;"	c
SourceInitError	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from deoplete.exceptions import SourceInitError$/;"	i
SourceInitError	plugged/deoplete.nvim/rplugin/python3/deoplete/exceptions.py	/^class SourceInitError(Exception):$/;"	c
SpecExample	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:SpecExample(kw) abort$/;"	f
SpecForm	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:SpecForm(kw) abort$/;"	f
SplitCDeclarations	plugged/tabular/after/plugin/TabularMaps.vim	/^function! SplitCDeclarations(lines)$/;"	f
SplitCommands	plugged/tabular/plugin/Tabular.vim	/^function! s:SplitCommands(string)$/;"	f
SplitDelim	plugged/tabular/autoload/tabular.vim	/^function! s:SplitDelim(string, delim)$/;"	f
SplitDelimTest	plugged/tabular/autoload/tabular.vim	/^function! s:SplitDelimTest(string, delim, expected)$/;"	f
SplitExpandChain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
SqliteDbRegistry	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^class SqliteDbRegistry(rbql_engine.RBQLTableRegistry):$/;"	c
SqliteRecordIterator	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^class SqliteRecordIterator(rbql_engine.RBQLInputIterator):$/;"	c
SquashArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
StacktraceCommand	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:StacktraceCommand(bang, args) abort$/;"	f
StageApply	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
StageArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
StageDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
StageDiff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StageIgnore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
StageInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
StageInline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
StageJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
StagePatch	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageReveal	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
StageSeek	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
State.New	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
State.getCurrent	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
State.setCurrentFile	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
State.setPaused	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
StatusCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
StatusCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
StatusLine	plugged/eleline.vim/plugin/eleline.vim	/^function! s:StatusLine() abort$/;"	f
StrictLeftJoiner	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class StrictLeftJoiner(object):$/;"	c
StripLeadingSpaces	plugged/tabular/autoload/tabular.vim	/^function! s:StripLeadingSpaces(string)$/;"	f
StripTrailingSpaces	plugged/tabular/autoload/tabular.vim	/^function! s:StripTrailingSpaces(string)$/;"	f
StripWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! -bang -range=% StripWhitespace call <SID>StripWhitespaceCommand(<line1>, <line2>, <bang>0)$/;"	c
StripWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:StripWhitespace(line1, line2)$/;"	f
StripWhitespaceCommand	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:StripWhitespaceCommand(line1, line2, force)$/;"	f
StripWhitespaceMotion	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:StripWhitespaceMotion(...)$/;"	f
StripWhitespaceOnChangedLines	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! -bang -range=% StripWhitespaceOnChangedLines call <SID>StripWhitespaceOnChangedLinesCommand(<line1>, <line2>, <bang>0)$/;"	c
StripWhitespaceOnChangedLinesCommand	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:StripWhitespaceOnChangedLinesCommand(line1, line2, force)$/;"	f
StripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:StripWhitespaceOnSave(force)$/;"	f
Strlen	plugged/tabular/autoload/tabular.vim	/^  function! s:Strlen(string)$/;"	f
Sum	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Sum = SUM$/;"	v
SumAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class SumAggregator:$/;"	c
SurfaceBuffer	plugged/vim-elixir/spec/spec_helper.rb	/^module SurfaceBuffer$/;"	m	class:Differ
SwapOuterMultiPartDelimsForPlaceHolders	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOuterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOuterPlaceHoldersForMultiPartDelims	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOuterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
SyncParent	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^class SyncParent(_Parent):$/;"	c
SyntaxInclude	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:SyntaxInclude(filetype)$/;"	f
SystemError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TEST_FLAGS	plugged/vim-go/Makefile	/^TEST_FLAGS ?=$/;"	m
THEMIS_ARGS	plugged/deoplete.nvim/Makefile	/^export THEMIS_ARGS := -e -s --headless$/;"	m
THEMIS_HOME	plugged/deoplete.nvim/Makefile	/^export THEMIS_HOME := .\/vim-themis$/;"	m
THEMIS_VIM	plugged/deoplete.nvim/Makefile	/^export THEMIS_VIM  := nvim$/;"	m
TabSpace	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
TableFormat	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer TableFormat call s:TableFormat()$/;"	c
TableFormat	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:TableFormat()$/;"	f
TableIterator	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_engine import TableIterator$/;"	i
TableIterator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class TableIterator(RBQLInputIterator):$/;"	c
TableWriter	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_engine import TableWriter$/;"	i
TableWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class TableWriter(RBQLOutputWriter):$/;"	c
Tabularize	plugged/tabular/plugin/Tabular.vim	/^   \\ Tabularize <line1>,<line2>call Tabularize(<q-args>)$/;"	c
Tabularize	plugged/tabular/plugin/Tabular.vim	/^function! Tabularize(command, ...) range$/;"	f
Tag	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:Tag(cmd, keyword) abort$/;"	f
Tagbar	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
TagbarBalloonExpr	plugged/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarBufName	plugged/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
TagbarClose	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarForceUpdate	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarForceUpdate   call tagbar#ForceUpdate()$/;"	c
TagbarGetTypeConfig	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarJump	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJump   call tagbar#jump()$/;"	c
TagbarOpen	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	plugged/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarTogglePause	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TempCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempCmd(out, cmd) abort$/;"	f
TempDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDelete(file) abort$/;"	f
TempReadPost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
TempReadPre	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
TempScript	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
TempState	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
TestAddTags	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags() abort$/;"	f
TestAddTags_AddOptions	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags_AddOptions() abort$/;"	f
TestAddTags_WithOptions	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags_WithOptions() abort$/;"	f
TestHeaderParsing	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^class TestHeaderParsing(unittest.TestCase):$/;"	c
TestLineSplit	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^class TestLineSplit(unittest.TestCase):$/;"	c
TestRBQLSimple	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^class TestRBQLSimple(unittest.TestCase):$/;"	c
TestRBQLWithCSV	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^class TestRBQLWithCSV(unittest.TestCase):$/;"	c
TestRecordIterator	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^class TestRecordIterator(unittest.TestCase):$/;"	c
TestSplitMethods	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^class TestSplitMethods(unittest.TestCase):$/;"	c
TestSplitRandomCsv	plugged/rainbow_csv/test/unit_lib.vim	/^func! TestSplitRandomCsv()$/;"	f
TestWhitespaceSplit	plugged/rainbow_csv/test/unit_lib.vim	/^func! TestWhitespaceSplit()$/;"	f
Test_Callers	plugged/vim-go/autoload/go/calls_test.vim	/^func! Test_Callers() abort$/;"	f
Test_Complete_GOPATH_baronly	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_baronly() abort$/;"	f
Test_Complete_GOPATH_simple	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_simple() abort$/;"	f
Test_Complete_GOPATH_subdirs	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_subdirs() abort$/;"	f
Test_Complete_GOPATH_vendor	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_vendor() abort$/;"	f
Test_Complete_Module_baronly	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_baronly() abort$/;"	f
Test_Complete_Module_simple	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_simple() abort$/;"	f
Test_Complete_Module_subdirs	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_subdirs() abort$/;"	f
Test_Complete_Module_vendor	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_vendor() abort$/;"	f
Test_Decode_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Decode_multibyte() abort$/;"	f
Test_Decode_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Decode_simple() abort$/;"	f
Test_DefJump_gopls_MultipleCodeUnit_first	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_MultipleCodeUnit_first() abort$/;"	f
Test_DefJump_gopls_MultipleCodeUnit_last	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_MultipleCodeUnit_last() abort$/;"	f
Test_DefJump_gopls_simple_first	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_simple_first() abort$/;"	f
Test_DefJump_gopls_simple_last	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_simple_last() abort$/;"	f
Test_EncodePath_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_EncodePath_multibyte() abort$/;"	f
Test_EncodePath_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_EncodePath_simple() abort$/;"	f
Test_Errcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck() abort$/;"	f
Test_Errcheck_compilererror	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck_compilererror() abort$/;"	f
Test_Errcheck_options	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck_options() abort$/;"	f
Test_ExecuteInDir	plugged/vim-go/autoload/go/tool_test.vim	/^func! Test_ExecuteInDir() abort$/;"	f
Test_ExecuteInDir_nodir	plugged/vim-go/autoload/go/tool_test.vim	/^func! Test_ExecuteInDir_nodir() abort$/;"	f
Test_Format	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Format() abort$/;"	f
Test_Format_SingleNewline	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Format_SingleNewline() abort$/;"	f
Test_GetInfo_gopls	plugged/vim-go/autoload/go/complete_test.vim	/^func! Test_GetInfo_gopls()$/;"	f
Test_GetMultiByteTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetMultiByteTextPosition()$/;"	f
Test_GetMultipleCodeUnitTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetMultipleCodeUnitTextPosition()$/;"	f
Test_GetSimpleTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetSimpleTextPosition()$/;"	f
Test_GoBuildErrors	plugged/vim-go/autoload/go/cmd_test.vim	/^func! Test_GoBuildErrors()$/;"	f
Test_GoDebugModeRemapsAndRestoresKeys	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugModeRemapsAndRestoresKeys() abort$/;"	f
Test_GoDebugStart_Empty	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Empty() abort$/;"	f
Test_GoDebugStart_Errors	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Errors() abort$/;"	f
Test_GoDebugStart_Package	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Package() abort$/;"	f
Test_GoDebugStart_RelativePackage	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_RelativePackage() abort$/;"	f
Test_GoDebugStart_RelativePackage_NullModule	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_RelativePackage_NullModule() abort$/;"	f
Test_GoDebugStopRemovesPlugMappings	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStopRemovesPlugMappings() abort$/;"	f
Test_GoTermNewMode	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermNewMode()$/;"	f
Test_GoTermNewMode_SplitRight	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermNewMode_SplitRight()$/;"	f
Test_GoTermReuse	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermReuse()$/;"	f
Test_GoTest	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTest() abort$/;"	f
Test_GoTestCompilerError	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestCompilerError() abort$/;"	f
Test_GoTestConcurrentPanic	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestConcurrentPanic()$/;"	f
Test_GoTestExample	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestExample() abort$/;"	f
Test_GoTestShowName	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestShowName() abort$/;"	f
Test_GoTestTestCompilerError	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestTestCompilerError() abort$/;"	f
Test_GoTestTimeout	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestTimeout() abort$/;"	f
Test_GoTestVerbose	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestVerbose() abort$/;"	f
Test_GoTestVet	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestVet() abort$/;"	f
Test_GometaAutoSaveGolangciLint	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLint() abort$/;"	f
Test_GometaAutoSaveGolangciLintKeepsErrors	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLintKeepsErrors() abort$/;"	f
Test_GometaAutoSaveGolangciLint_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLint_multiple() abort$/;"	f
Test_GometaAutoSaveGopls	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGopls() abort$/;"	f
Test_GometaAutoSaveStaticcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveStaticcheck() abort$/;"	f
Test_GometaAutoSaveStaticcheckKeepsErrors	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveStaticcheckKeepsErrors() abort$/;"	f
Test_GometaGolangciLint	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaGolangciLint() abort$/;"	f
Test_GometaGolangciLint_importabs	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaGolangciLint_importabs() abort$/;"	f
Test_GometaStaticcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaStaticcheck() abort$/;"	f
Test_GoplsEnabled_Clear	plugged/vim-go/autoload/go/config_test.vim	/^func! Test_GoplsEnabled_Clear() abort$/;"	f
Test_GuruScope_Set	plugged/vim-go/autoload/go/guru_test.vim	/^function Test_GuruScope_Set() abort$/;"	f
Test_Imports	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Imports() abort$/;"	f
Test_JobDirWithSpaces	plugged/vim-go/autoload/go/job_test.vim	/^func! Test_JobDirWithSpaces()$/;"	f
Test_Jump_leaves_lists	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_Jump_leaves_lists() abort$/;"	f
Test_Lint_GOPATH	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Lint_GOPATH() abort$/;"	f
Test_Lint_NullModule	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Lint_NullModule() abort$/;"	f
Test_PositionOf_MultiByte	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_MultiByte()$/;"	f
Test_PositionOf_MultipleCodeUnit	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_MultipleCodeUnit()$/;"	f
Test_PositionOf_Simple	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_Simple()$/;"	f
Test_PromiseAwait	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseAwait() abort$/;"	f
Test_PromiseAwait_Timeout	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseAwait_Timeout() abort$/;"	f
Test_PromiseNew	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseNew() abort$/;"	f
Test_Roundtrip_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Roundtrip_multibyte() abort$/;"	f
Test_Roundtrip_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Roundtrip_simple() abort$/;"	f
Test_SetBuildTags	plugged/vim-go/autoload/go/config_test.vim	/^func! Test_SetBuildTags() abort$/;"	f
Test_SwitchImportAddIgnoresCommented	plugged/vim-go/autoload/go/import_test.vim	/^func! Test_SwitchImportAddIgnoresCommented()$/;"	f
Test_TemplateCreate	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate() abort$/;"	f
Test_TemplateCreate_PackageExists	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate_PackageExists() abort$/;"	f
Test_TemplateCreate_UsePkg	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate_UsePkg() abort$/;"	f
Test_Vet	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet() abort$/;"	f
Test_Vet_compilererror	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet_compilererror() abort$/;"	f
Test_Vet_subdir	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet_subdir() abort$/;"	f
Test_diagnostic_after_fmt	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt() abort$/;"	f
Test_diagnostic_after_fmt_change	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt_change() abort$/;"	f
Test_diagnostic_after_fmt_cleared	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt_cleared() abort$/;"	f
Test_diagnostic_after_reload	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_reload() abort$/;"	f
Test_fillstruct	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct() abort$/;"	f
Test_fillstruct_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_line() abort$/;"	f
Test_fillstruct_two_cursor	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_two_cursor() abort$/;"	f
Test_fillstruct_two_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_two_line() abort$/;"	f
Test_goimports	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_goimports() abort$/;"	f
Test_gomodVersion_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_gomodVersion_highlight() abort$/;"	f
Test_gomodVersion_incompatible_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_gomodVersion_incompatible_highlight() abort$/;"	f
Test_gopls_fillstruct	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct() abort$/;"	f
Test_gopls_fillstruct_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_line() abort$/;"	f
Test_gopls_fillstruct_two_cursor	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_two_cursor() abort$/;"	f
Test_gopls_fillstruct_two_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_two_line() abort$/;"	f
Test_impl	plugged/vim-go/autoload/go/impl_test.vim	/^func! Test_impl() abort$/;"	f
Test_impl_get	plugged/vim-go/autoload/go/impl_test.vim	/^func! Test_impl_get() abort$/;"	f
Test_indent_raw_string	plugged/vim-go/autoload/go/indent_test.vim	/^func! Test_indent_raw_string() abort$/;"	f
Test_jump_to_declaration_godef	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_jump_to_declaration_godef() abort$/;"	f
Test_jump_to_declaration_guru	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_jump_to_declaration_guru() abort$/;"	f
Test_numeric_literal_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_numeric_literal_highlight() abort$/;"	f
Test_remove_tags	plugged/vim-go/autoload/go/tags_test.vim	/^func! Test_remove_tags() abort$/;"	f
Test_run_fmt	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_run_fmt() abort$/;"	f
Test_update_file	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_update_file() abort$/;"	f
Test_zero_as_index_element	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_index_element() abort$/;"	f
Test_zero_as_slice_index	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_slice_index() abort$/;"	f
Test_zero_as_start_slicing_slice	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_start_slicing_slice() abort$/;"	f
ThreadedTCPServer	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):$/;"	c
ThreadedUnixServer	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^                             socketserver.UnixStreamServer):$/;"	c	class:ThreadedTCPServer
Time	plugged/vim-clojure-static/clj/vim/test-runtime.vim	/^function! Time(n, expr)$/;"	f
Toc	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer Toc call s:Toc()$/;"	c
Toc	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:Toc(...)$/;"	f
Toch	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer Toch call s:Toc('horizontal')$/;"	c
Toct	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer Toct call s:Toc('tab')$/;"	c
Tocv	plugged/vim-markdown/ftplugin/markdown.vim	/^command! -buffer Tocv call s:Toc('vertical')$/;"	c
ToggleAutoclose	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
ToggleCaseInsensitive	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
ToggleClojureHighlightReferences	plugged/vim-clojure-highlight/plugin/vim_clojure_highlight.vim	/^command! -bar ToggleClojureHighlightReferences call s:toggle_clojure_highlight_references()$/;"	c
ToggleFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
ToggleHelp	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
ToggleHideNonPublicTags	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
ToggleOnDiff	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:ToggleOnDiff()$/;"	f
TogglePause	plugged/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
ToggleSort	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
ToggleStripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! ToggleStripWhitespaceOnSave call <SID>ToggleStripWhitespaceOnSave()$/;"	c
ToggleStripWhitespaceOnSave	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:ToggleStripWhitespaceOnSave()$/;"	f
ToggleTabTreeVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
ToggleWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^command! ToggleWhitespace call <SID>ToggleWhitespace()$/;"	c
ToggleWhitespace	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:ToggleWhitespace()$/;"	f
ToggleWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
ToolItems	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
ToolParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
ToolStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
ToolToFrom	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
TopWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class TopWriter(object):$/;"	c
TransformUserTypeDef	plugged/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
Tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
Tree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
TreeChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
TreeDirNode.AbsoluteTreeRoot	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
TreeDirNode._glob	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
TreeDirNode._initChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openInNewTab	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode.activate	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode.addChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.displayString	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
TreeDirNode.findNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getCascade	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
TreeDirNode.getCascadeRoot	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
TreeDirNode.getChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getDirChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
TreeDirNode.getVisibleChildCount	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.isCascadable	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
TreeDirNode.open	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode.openAlong	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
TreeDirNode.openExplorer	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.refreshDirFlags	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
TreeDirNode.refreshFlags	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
TreeDirNode.removeChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
TreeDirNode.sortChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode.transplantChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetSelected	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
TreeFileNode._renderToString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
TreeFileNode.activate	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode.bookmark	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBookmarks	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
TreeFileNode.copy	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findSibling	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getNerdtree	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
TreeFileNode.isRoot	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.open	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode.openExplorer	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
TreeFileNode.openInNewTab	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.refreshFlags	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
TreeFileNode.rename	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
Trim	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^    function! s:Trim(s)$/;"	f
TrimTrailingWhitespace	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TrimTrailingWhitespace(line)$/;"	f
TypeKeys	plugged/vim-clojure-static/clj/vim/test-runtime.vim	/^function! TypeKeys(keys)$/;"	f
UI.IndentWid	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
UI.MarkupReg	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
UI.New	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
UI.UpDirLine	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
UI._dumpHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
UI._indentLevelFor	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
UI._renderBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
UI._stripMarkup	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
UI.centerView	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
UI.getLineNum	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
UI.getPath	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
UI.getRootLineNum	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
UI.getShowBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
UI.getShowFiles	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
UI.getShowHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
UI.getShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
UI.isIgnoreFilterEnabled	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
UI.isMinimal	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
UI.render	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
UI.renderViewSavingPosition	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
UI.restoreScreenState	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
UI.saveScreenState	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
UI.setShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
UI.toggleHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
UI.toggleIgnoreFilter	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
UI.toggleShowBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
UI.toggleShowFiles	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
UI.toggleShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
UI.toggleZoom	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
UNNEST	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function UNNEST(vals) {$/;"	f
UNNEST	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class UNNEST:$/;"	c
UPDATE	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^UPDATE = 'UPDATE'$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
UnEsc	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
Uniq	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
UniqCountWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class UniqCountWriter(object):$/;"	c
UniqWriter	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class UniqWriter(object):$/;"	c
Unlock	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unnest	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Unnest = UNNEST$/;"	v
UntabbedCol	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
Update	plugged/rainbow_csv/plugin/rainbow_csv.vim	/^command! -nargs=+ Update call rainbow_csv#run_update_cmd_query(<q-args>)$/;"	c
UpdateIndex	plugged/vim-fugitive/autoload/fugitive.vim	/^function s:UpdateIndex(dir, info) abort$/;"	f
UsableWin	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
Usage	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
UserCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommand(...) abort$/;"	f
UserCommandCwd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandCwd(dir) abort$/;"	f
UserCommandList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^from deoplete.util import error_vim, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^from deoplete.util import debug, error_vim, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^UserContext = typing.Dict[str, typing.Any]$/;"	v
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^UserContext = typing.Dict[str, typing.Any]$/;"	v
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^UserContext = typing.Dict[str, typing.Any]$/;"	v
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_word_abbr.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^from deoplete.util import fuzzy_escape, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^from deoplete.util import fuzzy_escape, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_length.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_matchfuzzy.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^from deoplete.util import UserContext, Candidates, Candidate$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_word.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^UserContext = typing.Dict[str, typing.Any]$/;"	v
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^from deoplete.util import expand, exists_path, UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^from deoplete.util import UserContext, Candidates$/;"	i
UserContext	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^UserContext = typing.Dict[str, typing.Any]$/;"	v
VARIANCE	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function VARIANCE(val) {$/;"	f
VARIANCE	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def VARIANCE(val):$/;"	f
VIMDIR	plugged/vim-markdown/Makefile	/^VIMDIR=$(DESTDIR)\/usr\/share\/vim$/;"	m
VIMS	plugged/vim-go/Makefile	/^VIMS ?= vim-8.0 vim-8.2 nvim$/;"	m
VariableInfo	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^VariableInfo = namedtuple('VariableInfo', ['initialize', 'index'])$/;"	v
Variance	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^Variance = VARIANCE$/;"	v
VarianceAggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^class VarianceAggregator:$/;"	c
VersionAwareNetrwBrowseX	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:VersionAwareNetrwBrowseX(url)$/;"	f
VersionCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:VersionCheck() abort$/;"	f
VimEnter	plugged/indentLine/after/plugin/indentLine.vim	/^function! s:VimEnter()$/;"	f
VimHandler	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class VimHandler(socketserver.BaseRequestHandler):$/;"	c
VimInterface	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^class VimInterface:$/;"	c
VisMove	plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:VisMove(f)$/;"	f
WHERE	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^WHERE = 'WHERE'$/;"	v
WINDOW_TYPE	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^WINDOW_TYPE = type(vim.current.window)$/;"	v
WINDOW_TYPE_ID	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^WINDOW_TYPE_ID = neovim_rpc_server_api_info.API_INFO['types']['Window']['id']$/;"	v
WebDevIconsGetFileFormatSymbol	plugged/vim-devicons/plugin/webdevicons.vim	/^function! WebDevIconsGetFileFormatSymbol(...)$/;"	f
WebDevIconsGetFileTypeSymbol	plugged/vim-devicons/plugin/webdevicons.vim	/^function! WebDevIconsGetFileTypeSymbol(...)$/;"	f
WebDevIconsNERDTreeChangeRootHandler	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeChangeRootHandler(node)$/;"	f
WebDevIconsNERDTreeDirClose	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirClose(node)$/;"	f
WebDevIconsNERDTreeDirCloseChildren	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirCloseChildren(node)$/;"	f
WebDevIconsNERDTreeDirCloseRecursively	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirCloseRecursively(node)$/;"	f
WebDevIconsNERDTreeDirOpen	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirOpen(node)$/;"	f
WebDevIconsNERDTreeDirOpenRecursively	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirOpenRecursively(node)$/;"	f
WebDevIconsNERDTreeDirUpdateFlags	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirUpdateFlags(node, glyph)$/;"	f
WebDevIconsNERDTreeMapActivateNode	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapActivateNode(node)$/;"	f
WebDevIconsNERDTreeMapActivateNodeSingleMode	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapActivateNodeSingleMode(node)$/;"	f
WebDevIconsNERDTreeMapCloseChildren	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapCloseChildren(node)$/;"	f
WebDevIconsNERDTreeMapCloseDir	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapCloseDir(node)$/;"	f
WebDevIconsNERDTreeMapOpenRecursively	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapOpenRecursively(node)$/;"	f
WebDevIconsNERDTreeMapUpdirKeepOpen	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapUpdirKeepOpen()$/;"	f
WebDevIconsNERDTreeUpDirCurrentRootClosedHandler	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeUpDirCurrentRootClosedHandler()$/;"	f
WhitespaceInit	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^function! s:WhitespaceInit()$/;"	f
WinShellEsc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
Windows	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^        import readline # Module readline is not available on Windows$/;"	i
ZoomWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
[[	plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('n', 'prev')<cr>$/;"	m
[[	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('o', 'prev')<cr>$/;"	m
[]	plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
][	plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
]]	plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('n', 'next')<cr>$/;"	m
]]	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('o', 'next')<cr>$/;"	m
_Base	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/base.py	/^from deoplete.base.filter import Base as _Base$/;"	i
_Base	plugged/deoplete.nvim/rplugin/python3/deoplete/source/base.py	/^from deoplete.base.source import Base as _Base$/;"	i
_Parent	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^class _Parent(logger.LoggingMixin):$/;"	c
__getitem__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __getitem__(self, key):$/;"	m	class:RBQLRecord	file:
__init__	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^    def __init__(self, handler):$/;"	m	class:RedirectStream
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^        def __init__(self, _vim: Nvim):$/;"	m	class:DeopleteHandlers
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Base
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Base
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Child
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Context
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def __init__(self, vim: Nvim):$/;"	m	class:Deoplete
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/base.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Base
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_word_abbr.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_length.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_matchfuzzy.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_word.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Filter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def __init__(self, vim: Nvim, name: str = ''):$/;"	m	class:DeopleteLogFilter
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:_Parent
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/process.py	/^    def __init__(self, plugin: typing.Any) -> None:$/;"	m	class:Process
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Source
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/source/base.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Base
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Source
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Source
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Source
__init__	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Source
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def __init__(self, delim, policy, encoding, skip_headers, comment_prefix):$/;"	m	class:FileSystemCSVRegistry
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def __init__(self, stream, close_stream_on_finish, encoding, delim, policy, line_separator='\\n', colorize_output=False):$/;"	m	class:CSVWriter
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def __init__(self, stream, encoding, delim, policy, skip_headers=False, comment_prefix=None, table_name='input', variable_prefix='a', chunk_size=1024, line_mode=False):$/;"	m	class:CSVRecordIterator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:AvgAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:CountAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:MaxAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:MedianAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:MinAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:RBQLRecord
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:SumAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self):$/;"	m	class:VarianceAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, bad_idx):$/;"	m	class:InternalBadFieldError
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, bad_key):$/;"	m	class:InternalBadKeyError
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, external_table):$/;"	m	class:TableWriter
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, input_iterator, output_writer, user_init_code):$/;"	m	class:RBQLContext
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, join_map):$/;"	m	class:InnerJoiner
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, join_map):$/;"	m	class:LeftJoiner
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, join_map):$/;"	m	class:StrictLeftJoiner
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, marker_id, value):$/;"	m	class:RBQLAggregationToken
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, output_index):$/;"	m	class:ConstGroupVerifier
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, post_proc=None):$/;"	m	class:ArrayAggAggregator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, record_iterator, key_indices):$/;"	m	class:HashJoinMap
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, start_with_int):$/;"	m	class:NumHandler
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, subwriter):$/;"	m	class:AggregateWriter
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, subwriter):$/;"	m	class:TopWriter
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, subwriter):$/;"	m	class:UniqCountWriter
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, subwriter):$/;"	m	class:UniqWriter
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, subwriter, reverse_sort):$/;"	m	class:SortedWriter
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, table, column_names=None, normalize_column_names=True, table_name='b'):$/;"	m	class:SingleTableRegistry
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, table, column_names=None, normalize_column_names=True, variable_prefix='a'):$/;"	m	class:TableIterator
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __init__(self, vals):$/;"	m	class:UNNEST
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def __init__(self, db_connection):$/;"	m	class:SqliteDbRegistry
__init__	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def __init__(self, db_connection, table_name, variable_prefix='a'):$/;"	m	class:SqliteRecordIterator
__init__	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    def __init__(self):$/;"	m	class:CLIVimMediator
__init__	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    def __init__(self):$/;"	m	class:VimInterface
__init__	plugged/vim-devicons/rplugin/python3/denite/filter/devicons_denite_converter.py	/^	def __init__(self, vim):$/;"	m	class:Filter
__init__	plugged/vim-fireplace/pythonx/fireplace.py	/^    def __init__(self, host, port, keepalive_file=None):$/;"	m	class:Connection
__init__	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def __init__(self, sock):$/;"	m	class:SocketToStream
__setitem__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __setitem__(self, key, value):$/;"	m	class:RBQLRecord	file:
__str__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __str__(self):$/;"	m	class:RBQLAggregationToken	file:
__str__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def __str__(self):$/;"	m	class:UNNEST	file:
__version__	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from ._version import __version__$/;"	i
__version__	plugged/rainbow_csv/rbql_core/rbql/_version.py	/^__version__ = '0.19.0'$/;"	v
__version__	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^from ._version import __version__$/;"	i
_add_filter	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _add_filter(self, path: str) -> None:$/;"	m	class:Child
_add_parent	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _add_parent(self, parent_cls: typing.Callable[$/;"	m	class:Deoplete
_add_source	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _add_source(self, path: str) -> None:$/;"	m	class:Child
_cache_context_filetype	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^    def _cache_context_filetype(self, text: str, filetype: str,$/;"	m	class:Context
_channel_id_new	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def _channel_id_new():$/;"	f
_check_recache	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _check_recache(self, context: UserContext) -> None:$/;"	m	class:Deoplete
_connect_stdin	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _connect_stdin(self, stdin: int) -> msgpack.Unpacker:$/;"	m	class:AsyncParent
_ctx	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_matcher_full_fuzzy.py	/^from test_matcher_fuzzy import _ctx$/;"	i
_ctx	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_matcher_fuzzy.py	/^def _ctx(complete_str, ignorecase=True, camelcase=True):$/;"	f
_do_test_random_headers	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def _do_test_random_headers(self):$/;"	m	class:TestRBQLSimple
_enable_logging	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _enable_logging(self) -> None:$/;"	m	class:Child
_ends_with	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:_ends_with(text, expr, lnum)$/;"	f
_find_rplugins	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _find_rplugins(self,$/;"	m	class:Deoplete
_gather_async_results	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _gather_async_results(self, result: Result,$/;"	m	class:Child
_gather_results	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _gather_results(self, context: UserContext) -> typing.List[Result]:$/;"	m	class:Child
_get	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _get(self, queue_id: str) -> typing.List[typing.Any]:$/;"	m	class:AsyncParent
_getPrefix	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
_get_all_rows	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def _get_all_rows(self):$/;"	m	class:CSVRecordIterator
_get_candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _get_candidates(self, result: Result,$/;"	m	class:Child
_get_complete_position	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^    def _get_complete_position(self, context: UserContext,$/;"	m	class:Source
_get_context_filetype	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^    def _get_context_filetype(self,$/;"	m	class:Context
_get_cpsm_result	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^    def _get_cpsm_result(self, candidates: Candidates,$/;"	m	class:Filter
_get_python_executable	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _get_python_executable(self) -> str:$/;"	m	class:AsyncParent
_get_result	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _get_result(self, context: UserContext,$/;"	m	class:Child
_get_results	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _get_results(self, context: UserContext) -> typing.List[typing.Any]:$/;"	m	class:Deoplete
_get_row_from_buffer	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def _get_row_from_buffer(self):$/;"	m	class:CSVRecordIterator
_get_sources	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _get_sources(self) -> typing.Dict[str, typing.Any]:$/;"	m	class:Child
_handleOldOptions	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
_handle_source_exception	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _handle_source_exception(self,$/;"	m	class:Child
_init_cached	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^    def _init_cached(self) -> None:$/;"	m	class:Context
_init_cached_filetype	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^    def _init_cached_filetype(self, filetype: str) -> UserContext:$/;"	m	class:Context
_init_cpsm	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^    def _init_cpsm(self, context: UserContext) -> str:$/;"	m	class:Filter
_is_skip	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _is_skip(self, context: UserContext, source: typing.Any) -> bool:$/;"	m	class:Child
_itersource	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _itersource(self, context: UserContext$/;"	m	class:Child
_load_filters	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _load_filters(self, context: UserContext) -> None:$/;"	m	class:Deoplete
_load_sources	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _load_sources(self, context: UserContext) -> None:$/;"	m	class:Deoplete
_lock	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    _lock = threading.Lock()$/;"	v	class:VimHandler
_logger	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    _logger = None  # type: logging.Logger$/;"	v	class:LoggingMixin
_longest_path_that_exists	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^    def _longest_path_that_exists(self, context: UserContext,$/;"	m	class:Source
_make_cache	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^    def _make_cache(self, context: UserContext) -> None:$/;"	m	class:Source
_merge_results	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _merge_results(self, context: UserContext,$/;"	m	class:Child
_merge_results	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _merge_results(self, context: UserContext) -> typing.Tuple[$/;"	m	class:Deoplete
_on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _on_event(self, context: UserContext) -> None:$/;"	m	class:Child
_print_error	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _print_error(self, message: str) -> None:$/;"	m	class:AsyncParent
_process_filter	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _process_filter(self, f: typing.Any,$/;"	m	class:Child
_process_request	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def _process_request(channel, method, args):$/;"	f
_profile_end	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _profile_end(self, name: str) -> None:$/;"	m	class:Child
_profile_start	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _profile_start(self, context: UserContext, name: str) -> None:$/;"	m	class:Child
_put	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _put(self, name: str,$/;"	m	class:AsyncParent
_put	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _put(self, name: str,$/;"	m	class:SyncParent
_put	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _put(self, name: str,$/;"	m	class:_Parent
_read_until_found	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def _read_until_found(self):$/;"	m	class:CSVRecordIterator
_serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    fun! s:_serveraddr()$/;"	f
_set_source_attributes	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _set_source_attributes(self, context: UserContext) -> None:$/;"	m	class:Child
_set_source_attributes	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def _set_source_attributes(self, context: UserContext) -> None:$/;"	m	class:Deoplete
_setup_logging	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def _setup_logging(name):$/;"	f
_sock	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    _sock = None$/;"	v	class:VimHandler
_start_process	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _start_process(self) -> None:$/;"	m	class:AsyncParent
_start_process	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _start_process(self) -> None:$/;"	m	class:SyncParent
_start_process	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def _start_process(self) -> None:$/;"	m	class:_Parent
_starts_with	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:_starts_with(text, expr, lnum)$/;"	f
_substitute_path	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^    def _substitute_path(self, context: UserContext,$/;"	m	class:Source
_usage	plugged/vim-go/scripts/test	/^_usage() {$/;"	f
_use_previous_result	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _use_previous_result(self, context: UserContext,$/;"	m	class:Child
_version	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^from . import _version$/;"	i
_write	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def _write(self, stdout: typing.Any, expr: typing.Any) -> None:$/;"	m	class:Child
_write_all	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def _write_all(self, table):$/;"	m	class:CSVWriter
abort_with_help	plugged/vim-clojure-static/clj/bin/syntime	/^abort_with_help() {$/;"	f
absolute_import	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^from __future__ import (unicode_literals, division, absolute_import, print_function)$/;"	i
abstractmethod	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^from abc import abstractmethod$/;"	i
abstractmethod	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^from abc import abstractmethod$/;"	i
abstractmethod	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from abc import abstractmethod$/;"	i
ac	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ac :<c-u>call go#textobj#Comment('a')<cr>$/;"	m
activateAll	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
activateBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
activateDirNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
activateFileNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
actually_input	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:actually_input(...) abort$/;"	f
addChild	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
addTag	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
add_db	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
add_filter	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def add_filter(self, path: str) -> None:$/;"	m	class:_Parent
add_highlight	plugged/nerdtree-dash/syntax/nerdtree.vim	/^function! s:add_highlight() abort$/;"	f
add_methods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_pprint_opts	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:add_pprint_opts(msg, width) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_source	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def add_source(self, path: str) -> None:$/;"	m	class:_Parent
add_tag_recursive	plugged/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
add_to_set	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function add_to_set(dst_set, value) {$/;"	f
add_to_set	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def add_to_set(dst_set, value):$/;"	f
af	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> af :<c-u>call go#textobj#Function('a')<cr>$/;"	m
airline#extensions#tabline#formatters#webdevicons#format	plugged/vim-devicons/autoload/airline/extensions/tabline/formatters/webdevicons.vim	/^function! airline#extensions#tabline#formatters#webdevicons#format(bufnr, buffers) abort$/;"	f
alphabetical	plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def alphabetical(query) do$/;"	f	class:smth.do_query
ambiguous_error_msg	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^ambiguous_error_msg = 'Ambiguous variable name: "{}" is present both in input and in join tables'$/;"	v
ansi_reset_color_code	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^ansi_reset_color_code = '\\u001b[0m'$/;"	v
append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
applyDocumentChanges	plugged/vim-go/autoload/go/lsp.vim	/^function s:applyDocumentChanges(changes)$/;"	f
applyTextEdits	plugged/vim-go/autoload/go/lsp.vim	/^function s:applyTextEdits(bufnr, msg) abort$/;"	f
apply_highlight	plugged/nerdtree-dash/syntax/nerdtree.vim	/^function! s:apply_highlight(extension, group, ext_hl_group)$/;"	f
argparse	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^import argparse$/;"	i
argparse	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import argparse$/;"	i
argparse	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    import argparse$/;"	i
array_agg	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^array_agg = ARRAY_AGG$/;"	v
ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assert	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function assert(condition, message=null) {$/;"	f
assert	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function assert(condition, message=null) {$/;"	f
assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
async	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^    async get_variables_map(query_text) {$/;"	c
async_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:async_guru(args) abort$/;"	f
asyncio	plugged/deoplete.nvim/rplugin/python3/deoplete/process.py	/^import asyncio$/;"	i
attach	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^    from neovim import attach$/;"	i
attach	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^    from pynvim import attach$/;"	i
attach	plugged/nvim-yarp/pythonx/yarp.py	/^    from neovim import attach, setup_logging$/;"	i
attach	plugged/nvim-yarp/pythonx/yarp.py	/^    from pynvim import attach, setup_logging$/;"	i
attach_vim	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^def attach_vim(serveraddr):$/;"	f
auto_completion_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^        def auto_completion_begin(self, context: Context) -> None:$/;"	m	class:DeopleteHandlers
autodetect_delim_policy	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def autodetect_delim_policy(input_path, encoding, comment_prefix=None):$/;"	f
available	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^        import readline # Module readline is not available on Windows$/;"	i
avg	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var avg = cur_sum \/ cur_cnt;$/;"	v
avg	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^avg = AVG$/;"	v
avg_val	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var avg_val = cur_sum \/ cur_cnt;$/;"	v
await	plugged/vim-go/autoload/go/promise.vim	/^function! s:await(timeout, default) dict$/;"	f
b:block_begin	plugged/vim-elixir/ftplugin/elixir.vim	/^let b:block_begin = '\\<\\(do$\\|fn\\>\\)'$/;"	v
b:block_end	plugged/vim-elixir/ftplugin/elixir.vim	/^let b:block_end = '\\<end\\>'$/;"	v
b:browsefilter	plugged/vim-clojure-static/ftplugin/clojure.vim	/^	let b:browsefilter = "Clojure Source Files (*.clj)\\t*.clj\\n" .$/;"	v
b:current_syntax	plugged/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
b:current_syntax	plugged/vim-clojure-static/syntax/clojure.vim	/^let b:current_syntax = "clojure"$/;"	v
b:current_syntax	plugged/vim-elixir/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
b:current_syntax	plugged/vim-elixir/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax	plugged/vim-go/syntax/go.vim	/^let b:current_syntax = "go"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugoutput.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugstacktrace.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugvariables.vim	/^let b:current_syntax = "godebugvariables"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godefstack.vim	/^let b:current_syntax = "godefstack"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gohtmltmpl.vim	/^let b:current_syntax = "gohtmltmpl"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gomod.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gosum.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gotexttmpl.vim	/^let b:current_syntax = "gotexttmpl"$/;"	v
b:current_syntax	plugged/vim-go/syntax/vimgo.vim	/^let b:current_syntax = "vimgo"$/;"	v
b:current_syntax	plugged/vim-markdown/syntax/markdown.vim	/^let b:current_syntax = "mkd"$/;"	v
b:did_ftplugin	plugged/vim-clojure-static/ftplugin/clojure.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-elixir/ftplugin/eelixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-elixir/ftplugin/elixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-fugitive/ftplugin/fugitiveblame.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/asm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/go.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/gomod.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	plugged/vim-clojure-static/indent/clojure.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-elixir/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-elixir/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-go/indent/go.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-markdown/indent/markdown.vim	/^let b:did_indent = 1$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^sface\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.sface\\|\\.leex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^sface\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.sface\\|\\.leex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype_indentexpr	plugged/vim-elixir/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:fenced_block	plugged/vim-markdown/after/ftplugin/markdown.vim	/^let b:fenced_block = 0$/;"	v
b:front_matter	plugged/vim-markdown/after/ftplugin/markdown.vim	/^let b:front_matter = 0$/;"	v
b:match_ignorecase	plugged/vim-elixir/ftplugin/elixir.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	plugged/vim-clojure-static/ftplugin/clojure.vim	/^	let b:match_skip = 's:comment\\|string\\|regex\\|character'$/;"	v
b:match_words	plugged/vim-clojure-static/ftplugin/clojure.vim	/^	let b:match_words = &matchpairs$/;"	v
b:match_words	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/vim-elixir/ftplugin/elixir.vim	/^  let b:match_words = '\\:\\@<!\\<\\%(do\\|fn\\)\\:\\@!\\>' .$/;"	v
b:surround_123	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_123 = "{{ \\r }}"$/;"	v
b:surround_35	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_35 = "<%# \\r %>"$/;"	v
b:surround_45	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_45 = "<% \\r %>"$/;"	v
b:surround_5	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_5 = "<% \\r %>\\n<% end %>"$/;"	v
b:surround_61	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_61 = "<%= \\r %>"$/;"	v
b:undo_ftplugin	plugged/vim-clojure-static/ftplugin/clojure.vim	/^		let b:undo_ftplugin .= ' | setlocal ' . s:setting . '<'$/;"	v
b:undo_ftplugin	plugged/vim-clojure-static/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | setlocal path<'$/;"	v
b:undo_ftplugin	plugged/vim-clojure-static/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
b:undo_ftplugin	plugged/vim-clojure-static/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:match_words b:match_skip'$/;"	v
b:undo_ftplugin	plugged/vim-clojure-static/ftplugin/clojure.vim	/^let b:undo_ftplugin = 'setlocal iskeyword< define< formatoptions< comments< commentstring< lispwords<'$/;"	v
b:undo_ftplugin	plugged/vim-elixir/ftplugin/eelixir.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:undo_ftplugin	plugged/vim-elixir/ftplugin/elixir.vim	/^let b:undo_ftplugin = 'setlocal sw< sts< et< isk< com< cms< path< inex< sua< def< fo<'.$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/asm.vim	/^let b:undo_ftplugin = "setl fo< com< cms<$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/go.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/gomod.vim	/^let b:undo_ftplugin = "setl fo< com< cms<$/;"	v
b:undo_indent	plugged/vim-clojure-static/indent/clojure.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
b:undo_indent	plugged/vim-clojure-static/indent/clojure.vim	/^let b:undo_indent = 'setlocal autoindent< smartindent< expandtab< softtabstop< shiftwidth< indentexpr< indentkeys<'$/;"	v
backspace	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:backspace(s)$/;"	f
balloon	plugged/vim-go/autoload/go/tool.vim	/^function! s:balloon(msg)$/;"	f
bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	autoload/plug.vim	/^function! s:bar()$/;"	f
batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
bdecode	plugged/vim-fireplace/pythonx/fireplace.py	/^def bdecode(f, char=None):$/;"	f
bencode	plugged/vim-fireplace/pythonx/fireplace.py	/^def bencode(data, f):$/;"	f
binary_search_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^from deoplete.util import binary_search_begin, binary_search_end$/;"	i
binary_search_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^from deoplete.util import binary_search_begin, binary_search_end$/;"	i
binary_search_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def binary_search_begin(li: typing.List[Candidates], prefix: str) -> int:$/;"	f
binary_search_end	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^from deoplete.util import binary_search_begin, binary_search_end$/;"	i
binary_search_end	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^from deoplete.util import binary_search_begin, binary_search_end$/;"	i
binary_search_end	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def binary_search_end(li: typing.List[Candidates], prefix: str) -> int:$/;"	f
binread	plugged/vim-fireplace/pythonx/fireplace.py	/^def binread(f, count=1):$/;"	f
bm	plugged/vim-elixir/bin/test_indent	/^def bm$/;"	f
bracket_type	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:bracket_type(char)$/;"	f
broken_pipe_exception	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    broken_pipe_exception = BrokenPipeError$/;"	v
broken_pipe_exception	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    broken_pipe_exception = IOError$/;"	v
buf	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:buf(...) abort$/;"	f
bufext	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:bufext(...) abort$/;"	f
buffer_absolute	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:buffer_absolute(...) abort$/;"	f
buffer_line_count	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def buffer_line_count(buffer):$/;"	f
buffer_name	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^from powerline.bindings.vim import (vim_get_func, buffer_name)$/;"	i
buffer_path	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:buffer_path(...) abort$/;"	f
buffer_repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_set_lines	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^buffer_set_lines = nvim_buf_set_lines$/;"	v
buffer_type	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
build	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def build(self):$/;"	m	class:HashJoinMap
buildGitStatusCommand	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitStatusCommand(workdir) abort$/;"	f
buildGitWorkdirCommand	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitWorkdirCommand(root) abort$/;"	f
build_command	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^    def build_command(input, output) do$/;"	f	class:test.test.test.build_command.build_command.build_command
build_command	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	class:test.test.test
build_command	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	class:test.test.test.build_command
build_command	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	class:test.test.test.build_command.build_command
builtin_max	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^builtin_max = max$/;"	v
builtin_min	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^builtin_min = min$/;"	v
builtin_sum	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^builtin_sum = sum$/;"	v
bytepos2charpos	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from deoplete.util import (bytepos2charpos, charpos2bytepos, error, error_tb,$/;"	i
bytepos2charpos	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def bytepos2charpos(encoding: str, text: str, pos: int) -> int:$/;"	f
cache_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
calc_column_sizes	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:calc_column_sizes(delim, policy, comment_prefix)$/;"	f
calc_file_md5	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def calc_file_md5(fname):$/;"	f
call	plugged/vim-elixir/spec/syntax/variable_spec.rb	/^      def call(:pop, _, [h|stack]) do$/;"	f
call_jsonrpc	plugged/vim-go/autoload/go/debug.vim	/^function! s:call_jsonrpc(handle_result, method, ...) abort$/;"	f
callback	plugged/vim-go/autoload/go/job.vim	/^function! s:callback(chan, msg) dict$/;"	f
callback2on_stderr	plugged/vim-go/autoload/go/job.vim	/^function! s:callback2on_stderr(mode, ch, data, event) dict$/;"	f
callback2on_stdout	plugged/vim-go/autoload/go/job.vim	/^function! s:callback2on_stdout(mode, ch, data, event) dict$/;"	f
can	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^        return [] # Reimplement if your class can produce warnings$/;"	c	function:RBQLInputIterator.get_warnings
can	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^        return [] # Reimplement if your class can produce warnings$/;"	c	function:RBQLOutputWriter.get_warnings
can	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^        return [] # Reimplement if your class can produce warnings$/;"	c	function:RBQLTableRegistry.get_warnings
can_diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
candidate	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:candidate(val) abort$/;"	f
candidates	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_converter_reorder_attr.py	/^candidates = [$/;"	v
capture_test_run	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:capture_test_run(expr, pre, bang) abort$/;"	f
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs._start = function('s:start', [''], state)$/;"	v
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs.callback = function('s:callback', [], state)$/;"	v
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs.close_cb = function('s:close_cb', [], state)$/;"	v
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs.exit_cb = function('s:exit_cb', [], state)$/;"	v
cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
chCwd	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
chRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
channel_sockets	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    channel_sockets = {}$/;"	v	class:NvimHandler
char_class_escape	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^function! s:char_class_escape(src)$/;"	f
character	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! s:character(line, col) abort$/;"	f
charpos2bytepos	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from deoplete.util import (bytepos2charpos, charpos2bytepos, error, error_tb,$/;"	i
charpos2bytepos	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def charpos2bytepos(encoding: str, text: str, pos: int) -> int:$/;"	f
charwidth	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def charwidth(c: str) -> int:$/;"	f
checkVersion	plugged/vim-go/plugin/go.vim	/^function! s:checkVersion() abort$/;"	f
check_completion_info	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! s:check_completion_info(candidates) abort$/;"	f
check_custom_option	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! s:check_custom_option(old_var, new_var) abort$/;"	f
check_custom_var	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! s:check_custom_var(source_name, old_var, new_var) abort$/;"	f
check_diagnostics	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:check_diagnostics(actual, expected, when)$/;"	f
check_errors	plugged/vim-go/autoload/go/debug.vim	/^function! s:check_errors(resp_json) abort$/;"	f
check_for_string	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:check_for_string()$/;"	f
check_input_method	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:check_input_method() abort$/;"	f
check_required_msgpack	plugged/deoplete.nvim/autoload/health/deoplete.vim	/^function! s:check_required_msgpack() abort$/;"	f
check_required_python	plugged/deoplete.nvim/autoload/health/deoplete.vim	/^function! s:check_required_python() abort$/;"	f
check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
check_separator_in_fields_after_join	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def check_separator_in_fields_after_join(self, output_line, num_fields_expected):$/;"	m	class:CSVWriter
check_separators_in_fields_before_join	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def check_separators_in_fields_before_join(self, fields):$/;"	m	class:CSVWriter
check_t_list	plugged/deoplete.nvim/autoload/health/deoplete.vim	/^function! s:check_t_list() abort$/;"	f
check_timers	plugged/deoplete.nvim/autoload/health/deoplete.vim	/^function! s:check_timers() abort$/;"	f
checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
checkwith	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^  function! s:checkwith(left, right, line, col) abort$/;"	f
chomp	plugged/vim-go/autoload/go/keyify.vim	/^function! s:chomp(string)$/;"	f
chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
cleanup_query	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def cleanup_query(query_text):$/;"	f
cleanup_tmp_files	plugged/rainbow_csv/test/test_vim_integration.sh	/^cleanup_tmp_files() {$/;"	f
clear	plugged/vim-go/autoload/go/statusline.vim	/^function! s:clear()$/;"	f
clearOldFolds	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
clearOptions	plugged/vim-go/scripts/runtest.vim	/^function! s:clearOptions() abort$/;"	f
clearState	plugged/vim-go/autoload/go/debug.vim	/^function! s:clearState() abort$/;"	f
clear_group_from_matches	plugged/vim-go/autoload/go/util.vim	/^function! s:clear_group_from_matches(group) abort$/;"	f
cljfmt#AutoFormat	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! cljfmt#AutoFormat()$/;"	f
cljfmt#Format	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! cljfmt#Format()$/;"	f
clojure_check_for_string_worker	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:clojure_check_for_string_worker()$/;"	f
clojure_indent_pos	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:clojure_indent_pos()$/;"	f
clojure_is_method_special_case_worker	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:clojure_is_method_special_case_worker(position)$/;"	f
clojurecomplete#Complete	plugged/vim-clojure-static/autoload/clojurecomplete.vim	/^function! clojurecomplete#Complete(findstart, base)$/;"	f
close	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:close(job) abort$/;"	f
close	plugged/vim-fireplace/pythonx/fireplace.py	/^    def close(self):$/;"	m	class:Connection
closeChildren	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
closeCurrentDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
closeFold	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
closeFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
closeKindFold	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
closeTreeWindow	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
close_cb	plugged/vim-go/autoload/go/def.vim	/^  function! s:close_cb(next, ch) dict$/;"	f
close_cb	plugged/vim-go/autoload/go/job.vim	/^function! s:close_cb(ch) dict$/;"	f
close_on_first_done	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:close_on_first_done(transport, msg) abort$/;"	f
close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f
closeterm	plugged/vim-go/autoload/go/term.vim	/^function! s:closeterm()$/;"	f
cmd_job	plugged/vim-go/autoload/go/cmd.vim	/^function! s:cmd_job(args) abort$/;"	f
cmdwinenter	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:cmdwinenter() abort$/;"	f
cmdwinleave	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:cmdwinleave() abort$/;"	f
code	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:code(group, attr) abort$/;"	f
codeAction	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:codeAction(name, file) abort$/;"	f
codecs	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^import codecs$/;"	i
codecs	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import codecs$/;"	i
codecs	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import codecs$/;"	i
color	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:color(str, group) abort$/;"	f
colorize_fields	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def colorize_fields(self, fields):$/;"	m	class:CSVWriter
column.define_syntax	plugged/vim-devicons/autoload/vimfiler/columns/devicons.vim	/^function! s:column.define_syntax(context) abort "{{{$/;"	f
column.get	plugged/vim-devicons/autoload/vimfiler/columns/devicons.vim	/^function! s:column.get(file, context) abort$/;"	f
column.length	plugged/vim-devicons/autoload/vimfiler/columns/devicons.vim	/^function! s:column.length(files, context) abort$/;"	f
combine_string_literals	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function combine_string_literals(backend_expression, string_literals) {$/;"	f
combine_string_literals	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def combine_string_literals(backend_expression, string_literals):$/;"	f
command_exists	plugged/rainbow/tests/test.sh	/^command_exists () {$/;"	f
comment_prefix	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^    var comment_prefix = args['comment-prefix'];$/;"	v
compare	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^        def compare(x: Candidate) -> int:$/;"	f	function:Filter.filter
compareLocations	plugged/vim-go/autoload/go/lsp.vim	/^function! s:compareLocations(left, right) abort$/;"	f
compare_by_kind	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
compare_by_line	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
compile_and_run	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def compile_and_run():$/;"	f
complete	plugged/vim-go/autoload/go/debug.vim	/^function! s:complete(job, exit_status, data) abort$/;"	f
complete	plugged/vim-go/autoload/go/guru.vim	/^function! s:complete(job, exit_status, messages) dict abort$/;"	f
complete	plugged/vim-go/autoload/go/job_test.vim	/^func! s:complete(job, exit_code, messages)$/;"	f
complete	plugged/vim-go/autoload/go/package_test.vim	/^func! s:complete(arglead, expected) abort$/;"	f
complete	plugged/vim-go/plugin/go.vim	/^fun! s:complete(lead, cmdline, cursor)$/;"	f
complete_add	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:complete_add(msg) abort$/;"	f
complete_delegate	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:complete_delegate(queue, callback, msg) abort$/;"	f
complete_extract	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:complete_extract(msg) abort$/;"	f
completionErrorHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:completionErrorHandler(next, error) abort dict$/;"	f
completionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:completionHandler(next, msg) abort dict$/;"	f
completion_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def completion_begin(self, user_context: UserContext) -> None:$/;"	m	class:Deoplete
completion_timer_start	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:completion_timer_start(event) abort$/;"	f
completion_timer_stop	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:completion_timer_stop() abort$/;"	f
concat	plugged/rainbow/autoload/rainbow.vim	/^fun s:concat(strs)$/;"	f
config	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def config do$/;"	f	class:example.project
configureMappings	plugged/vim-go/autoload/go/debug.vim	/^function! s:configureMappings(...) abort$/;"	f
connect	plugged/vim-go/autoload/go/debug.vim	/^function! s:connect(addr) abort$/;"	f
connection_made	plugged/deoplete.nvim/rplugin/python3/deoplete/process.py	/^    def connection_made(self, transport: typing.Any) -> None:$/;"	m	class:Process
continue	plugged/vim-go/autoload/go/debug.vim	/^function! s:continue()$/;"	f
converged_execute	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^def converged_execute(src_table_path, rb_script_path, encoding, input_delim, input_policy, input_comment_prefix, out_delim, out_policy):$/;"	f
converged_select	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:converged_select(table_buf_number, rb_script_path, query_buf_nr)$/;"	f
convert2candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def convert2candidates(li: typing.Any) -> Candidates:$/;"	f
convert2list	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def convert2list(expr: typing.Any) -> typing.List[typing.Any]:$/;"	f
copy	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^import copy$/;"	i
copy	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^import copy$/;"	i
copy	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import copy$/;"	i
count	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^count = COUNT$/;"	v
coverage_browser_callback	plugged/vim-go/autoload/go/coverage.vim	/^function! s:coverage_browser_callback(coverfile, job, exit_status, data)$/;"	f
coverage_callback	plugged/vim-go/autoload/go/coverage.vim	/^function! s:coverage_callback(coverfile, job, exit_status, data)$/;"	f
coverage_job	plugged/vim-go/autoload/go/coverage.vim	/^function s:coverage_job(args)$/;"	f
cpath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
cpsm_py	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^                import cpsm_py$/;"	i
create	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def create(conn, %{$/;"	f	class:example.project.config.test.test.test.project.test
createKinddict	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
create_cmd	plugged/vim-go/autoload/go/tags.vim	/^func s:create_cmd(args) abort$/;"	f
create_pseudotag	plugged/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
create_user	plugged/vim-elixir/spec/indent/with_spec.rb	/^  def create_user(params) do$/;"	f	class:resend_confirmation
creategomod	plugged/vim-go/autoload/gotest.vim	/^func! s:creategomod(modname, dir) abort$/;"	f
critical	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def critical(self, msg: str,$/;"	m	class:LoggingMixin
csv_encoding	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^    var csv_encoding = args['encoding'];$/;"	v
csv_main	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def csv_main():$/;"	f
csv_utils	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^from . import csv_utils$/;"	i
csv_utils	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^from . import csv_utils$/;"	i
csv_utils	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^from rbql import csv_utils$/;"	i
ctrlp#decls#accept	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#accept(mode, str) abort$/;"	f
ctrlp#decls#cmd	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#cmd(mode, ...) abort$/;"	f
ctrlp#decls#enter	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#enter() abort$/;"	f
ctrlp#decls#exit	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#exit() abort$/;"	f
ctrlp#decls#init	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#init() abort$/;"	f
cur_cnt	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var cur_cnt = cur_aggr[1];$/;"	v
cur_cnt	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var cur_cnt = cur_aggr[2];$/;"	v
cur_sum	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var cur_sum = cur_aggr[0];$/;"	v
cur_sum_sq	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var cur_sum_sq = cur_aggr[1];$/;"	v
current_char	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:current_char()$/;"	f
current_compiler	plugged/vim-elixir/compiler/credo.vim	/^let current_compiler = 'credo'$/;"	v
current_compiler	plugged/vim-elixir/compiler/exunit.vim	/^let current_compiler = "exunit"$/;"	v
current_compiler	plugged/vim-elixir/compiler/mix.vim	/^let current_compiler = 'mix'$/;"	v
current_word	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:current_word()$/;"	f
customOpenBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
customOpenDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
customOpenFile	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
cword	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:cword() abort$/;"	f
date	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import datetime # For date operations inside user queries$/;"	i
datetime	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import datetime # For date operations inside user queries$/;"	i
db#adapter#ecto#canonicalize	plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#canonicalize(url) abort$/;"	f
db#adapter#ecto#complete_opaque	plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#complete_opaque(url) abort$/;"	f
debug	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^from deoplete.util import debug, error_vim, UserContext, Candidates$/;"	i
debug	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def debug(self, msg: str,$/;"	m	class:LoggingMixin
debug	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def debug(vim: Nvim, expr: typing.Any) -> None:$/;"	f
debug	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
debug	plugged/vim-go/autoload/go/debug_test.vim	/^function! s:debug(...) abort$/;"	f
debug	plugged/vim-go/autoload/go/lsp.vim	/^function! s:debug(event, data) abort$/;"	f
debug_mode	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^debug_mode = False$/;"	v
debug_mode	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^debug_mode = False$/;"	v
debugasync	plugged/vim-go/autoload/go/lsp.vim	/^function! s:debugasync(timer) abort$/;"	f
decode_if_bytes	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^def decode_if_bytes(obj):$/;"	f
decodehex	plugged/vim-go/autoload/go/uri.vim	/^function! s:decodehex(value)$/;"	f
dedup	plugged/vim-go/autoload/go/lsp.vim	/^function! s:dedup(list)$/;"	f
def	plugged/eleline.vim/plugin/eleline.vim	/^function! s:def(fn) abort$/;"	f
def_job	plugged/vim-go/autoload/go/def.vim	/^function s:def_job(args, state) abort$/;"	f
default_csv_encoding	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^default_csv_encoding = 'utf-8'$/;"	v
defaultdict	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from collections import defaultdict$/;"	i
defaultdict	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^from collections import defaultdict$/;"	i
defaultdict	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^from collections import OrderedDict, defaultdict, namedtuple$/;"	i
define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
define_completion_via_timer	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:define_completion_via_timer(event) abort$/;"	f
define_on_event	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:define_on_event(event) abort$/;"	f
definitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:definitionHandler(next, msg) abort dict$/;"	f
delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:delete(s)$/;"	f
deleteBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
delete_expands	plugged/vim-go/autoload/go/debug.vim	/^function! s:delete_expands()$/;"	f
delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
deleteline	plugged/vim-go/autoload/go/lsp.vim	/^function! s:deleteline(start, end) abort$/;"	f
denite	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import denite.util$/;"	i
deoplete	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^import deoplete.parent$/;"	i
deoplete	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^import deoplete.util as util$/;"	i
deoplete	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_util.py	/^import deoplete.util as util$/;"	i
deoplete#auto_complete	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#auto_complete(...) abort$/;"	f
deoplete#can_complete	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#can_complete() abort$/;"	f
deoplete#cancel_popup	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#cancel_popup() abort$/;"	f
deoplete#close_popup	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#close_popup() abort$/;"	f
deoplete#complete	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#complete() abort$/;"	f
deoplete#complete_common_string	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#complete_common_string() abort$/;"	f
deoplete#custom#_get	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_get() abort$/;"	f
deoplete#custom#_get_buffer	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_get_buffer() abort$/;"	f
deoplete#custom#_get_filetype_option	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_get_filetype_option(name, filetype, default) abort$/;"	f
deoplete#custom#_get_filter	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_get_filter(name) abort$/;"	f
deoplete#custom#_get_option	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_get_option(name) abort$/;"	f
deoplete#custom#_get_source	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_get_source(source_name) abort$/;"	f
deoplete#custom#_get_source_vars	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_get_source_vars(name) abort$/;"	f
deoplete#custom#_init	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_init() abort$/;"	f
deoplete#custom#_init_buffer	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_init_buffer() abort$/;"	f
deoplete#custom#_update_cache	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#_update_cache() abort$/;"	f
deoplete#custom#buffer_filter	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#buffer_filter(filter_name, name_or_dict, ...) abort$/;"	f
deoplete#custom#buffer_option	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#buffer_option(name_or_dict, ...) abort$/;"	f
deoplete#custom#buffer_var	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#buffer_var(source_name, name_or_dict, ...) abort$/;"	f
deoplete#custom#filter	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#filter(filter_name, name_or_dict, ...) abort$/;"	f
deoplete#custom#option	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#option(name_or_dict, ...) abort$/;"	f
deoplete#custom#source	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#source(source_name, name_or_dict, ...) abort$/;"	f
deoplete#custom#var	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! deoplete#custom#var(source_name, name_or_dict, ...) abort$/;"	f
deoplete#disable	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#disable() abort$/;"	f
deoplete#enable	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#enable() abort$/;"	f
deoplete#enable_logging	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#enable_logging(level, logfile) abort$/;"	f
deoplete#handler#_async_timer_start	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! deoplete#handler#_async_timer_start() abort$/;"	f
deoplete#handler#_check_omnifunc	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! deoplete#handler#_check_omnifunc(context) abort$/;"	f
deoplete#handler#_check_prev_completion	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! deoplete#handler#_check_prev_completion(event) abort$/;"	f
deoplete#handler#_completion_begin	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! deoplete#handler#_completion_begin(event) abort$/;"	f
deoplete#handler#_do_complete	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! deoplete#handler#_do_complete() abort$/;"	f
deoplete#handler#_init	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! deoplete#handler#_init() abort$/;"	f
deoplete#handler#_skip_next_completion	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! deoplete#handler#_skip_next_completion() abort$/;"	f
deoplete#init#_channel	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_channel() abort$/;"	f
deoplete#init#_channel_initialized	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_channel_initialized() abort$/;"	f
deoplete#init#_custom_variables	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_custom_variables() abort$/;"	f
deoplete#init#_disable_handler	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_disable_handler() abort$/;"	f
deoplete#init#_enable_handler	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_enable_handler() abort$/;"	f
deoplete#init#_initialize	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_initialize() abort$/;"	f
deoplete#init#_is_handler_enabled	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_is_handler_enabled() abort$/;"	f
deoplete#init#_msgpack_version_check	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_msgpack_version_check() abort$/;"	f
deoplete#init#_option	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_option() abort$/;"	f
deoplete#init#_prev_completion	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_prev_completion() abort$/;"	f
deoplete#init#_python_version_check	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! deoplete#init#_python_version_check() abort$/;"	f
deoplete#initialize	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#initialize() abort$/;"	f
deoplete#insert_candidate	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#insert_candidate(number) abort$/;"	f
deoplete#is_enabled	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#is_enabled() abort$/;"	f
deoplete#manual_complete	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#manual_complete(...) abort$/;"	f
deoplete#mapping#_can_complete	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_can_complete() abort$/;"	f
deoplete#mapping#_complete	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_complete() abort$/;"	f
deoplete#mapping#_complete_common_string	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_complete_common_string() abort$/;"	f
deoplete#mapping#_dummy	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_dummy(func) abort$/;"	f
deoplete#mapping#_init	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_init() abort$/;"	f
deoplete#mapping#_insert_candidate	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_insert_candidate(number) abort$/;"	f
deoplete#mapping#_prev_complete	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_prev_complete() abort$/;"	f
deoplete#mapping#_restore_completeopt	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_restore_completeopt() abort$/;"	f
deoplete#mapping#_rpcrequest_wrapper	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_rpcrequest_wrapper(sources) abort$/;"	f
deoplete#mapping#_set_completeopt	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_set_completeopt(is_async) abort$/;"	f
deoplete#mapping#_undo_completion	plugged/deoplete.nvim/autoload/deoplete/mapping.vim	/^function! deoplete#mapping#_undo_completion() abort$/;"	f
deoplete#send_event	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#send_event(event, ...) abort$/;"	f
deoplete#smart_close_popup	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#smart_close_popup() abort$/;"	f
deoplete#toggle	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#toggle() abort$/;"	f
deoplete#undo_completion	plugged/deoplete.nvim/autoload/deoplete.vim	/^function! deoplete#undo_completion() abort$/;"	f
deoplete#util#check_eskk_phase_henkan	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#check_eskk_phase_henkan() abort$/;"	f
deoplete#util#check_popup	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#check_popup() abort$/;"	f
deoplete#util#convert2list	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#convert2list(expr) abort$/;"	f
deoplete#util#get_input	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#get_input(event) abort$/;"	f
deoplete#util#get_keyword_pattern	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#get_keyword_pattern(filetype) abort$/;"	f
deoplete#util#get_next_input	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#get_next_input(event) abort$/;"	f
deoplete#util#get_syn_names	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#get_syn_names() abort$/;"	f
deoplete#util#has_yarp	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#has_yarp() abort$/;"	f
deoplete#util#indent_current_line	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#indent_current_line() abort$/;"	f
deoplete#util#neovim_version	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#neovim_version() abort$/;"	f
deoplete#util#print_debug	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#print_debug(string) abort$/;"	f
deoplete#util#print_error	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#print_error(string, ...) abort$/;"	f
deoplete#util#print_warning	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#print_warning(string) abort$/;"	f
deoplete#util#rpcnotify	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#rpcnotify(method, context) abort$/;"	f
deoplete#util#split	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#split(string) abort$/;"	f
deoplete#util#string	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#string(expr) abort$/;"	f
deoplete#util#uniq	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#uniq(list) abort$/;"	f
deoplete#util#versioncmp	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#versioncmp(a, b) abort$/;"	f
deoplete#util#vimoption2python	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#vimoption2python(option) abort$/;"	f
deoplete#util#vimoption2python_not	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! deoplete#util#vimoption2python_not(option) abort$/;"	f
deoplete_auto_completion_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    def deoplete_auto_completion_begin(context: Context) -> None:$/;"	f
deoplete_enable_logging	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    def deoplete_enable_logging(context: Context) -> None:$/;"	f
deoplete_init	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    def deoplete_init() -> None:$/;"	f
deoplete_manual_completion_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    def deoplete_manual_completion_begin(context: Context) -> None:$/;"	f
deoplete_on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    def deoplete_on_event(context: Context) -> None:$/;"	f
deprecated	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:deprecated(oldv, newv) abort$/;"	f
detect_change	plugged/vim-elixir/bin/test_indent	/^def detect_change(f)$/;"	f
devicons#plugins#ctrlp#init	plugged/vim-devicons/autoload/devicons/plugins/ctrlp.vim	/^function! devicons#plugins#ctrlp#init() abort$/;"	f
devicons#plugins#denite#init	plugged/vim-devicons/autoload/devicons/plugins/denite.vim	/^function! devicons#plugins#denite#init() abort$/;"	f
devicons#plugins#flagship#init	plugged/vim-devicons/autoload/devicons/plugins/flagship.vim	/^function! devicons#plugins#flagship#init() abort$/;"	f
devicons#plugins#startify#init	plugged/vim-devicons/autoload/devicons/plugins/startify.vim	/^function! devicons#plugins#startify#init() abort$/;"	f
devicons#plugins#unite#init	plugged/vim-devicons/autoload/devicons/plugins/unite.vim	/^function! devicons#plugins#unite#init() abort$/;"	f
devicons#plugins#vimfiler#init	plugged/vim-devicons/autoload/devicons/plugins/vimfiler.vim	/^function! devicons#plugins#vimfiler#init() abort$/;"	f
diagnostic_after_write	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:diagnostic_after_write(contents, changes) abort$/;"	f
die	plugged/rainbow_csv/rbql_core/rbql-js/cli_parser.js	/^function die(error_msg) {$/;"	f
diff	autoload/plug.vim	/^function! s:diff()$/;"	f
diff	plugged/vim-elixir/spec/spec_helper.rb	/^  def diff(result, expected)$/;"	f	class:Differ.initialize
diff	plugged/vim-elixir/spec/spec_helper.rb	/^  def self.diff(result, expected)$/;"	F	class:Differ
diff_modifier	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
diff_restore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
diff_window_count	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
diffoff_all	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
diffthis	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
disableLiveUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:disableLiveUpdate() abort$/;"	f
displayHelp	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
division	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^from __future__ import (unicode_literals, division, absolute_import, print_function)$/;"	i
do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
do	plugged/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^  def do$/;"	f
do_delayed_update	plugged/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
do_get_col_num_rfc_lines	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:do_get_col_num_rfc_lines(cur_line, delim, start_line, end_line, expected_num_fields)$/;"	f
do_handle_pattern_match_block	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_pattern_match_block(relative_line, context)$/;"	f
do_query	plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^    def do_query do$/;"	f
do_query	plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def do_query do$/;"	f	class:smth
do_stuff	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^    def do_stuff do$/;"	f	class:test.test.test.build_command.build_command.build_command.hello
doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
docFromHoverResult	plugged/vim-go/autoload/go/lsp.vim	/^function! s:docFromHoverResult(msg) abort dict$/;"	f
docLinkFromHoverResult	plugged/vim-go/autoload/go/lsp.vim	/^function! s:docLinkFromHoverResult(msg) abort dict$/;"	f
done	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:done(id) abort$/;"	f
double	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	class:example.project.config.test.test.test.project.test.create
double	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	class:example.project.config.test.test.test.project.test.create.double
double	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double
dst_variables_map.index	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        dst_variables_map[`${prefix}[${field_num}]`] = {initialize: true, index: field_num - 1};$/;"	p
dst_variables_map.index	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        dst_variables_map[prefix + String(field_num)] = {initialize: true, index: field_num - 1};$/;"	p
dst_variables_map.initialize	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        dst_variables_map[`${prefix}[${field_num}]`] = {initialize: true, index: field_num - 1};$/;"	p
dst_variables_map.initialize	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        dst_variables_map[prefix + String(field_num)] = {initialize: true, index: field_num - 1};$/;"	p
echo	plugged/vim-go/autoload/go/util.vim	/^function! s:echo(msg, hi)$/;"	f
echo_go_info	plugged/vim-go/autoload/go/auto.vim	/^function! s:echo_go_info()$/;"	f
echon	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:echon(state, str, ...) abort$/;"	f
edit_file	plugged/vim-elixir/spec/spec_helper.rb	/^  def edit_file(content)$/;"	f	class:Buffer
editop	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:editop(type) abort$/;"	f
eleline	plugged/eleline.vim/plugin/eleline.vim	/^augroup eleline$/;"	a
eleline#LanguageClientNeovim	plugged/eleline.vim/autoload/eleline.vim	/^function! eleline#LanguageClientNeovim() abort$/;"	f
elixir#indent	plugged/vim-elixir/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
elixir#indent#handle_follow_prev_nb	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(context)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(context)$/;"	f
elixir#indent#handle_inside_block	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_block(context)$/;"	f
elixir#indent#handle_inside_generic_block	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(context)$/;"	f
elixir#indent#handle_starts_with_binary_operator	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(context)$/;"	f
elixir#indent#handle_starts_with_end	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(context)$/;"	f
elixir#indent#handle_starts_with_pipe	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(context)$/;"	f
elixir#indent#handle_starts_with_string_continuation	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_string_continuation(context)$/;"	f
elixir#indent#handle_top_of_file	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(context)$/;"	f
elixir#indent#indent	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
elixir#indent#searchpair_back_skip	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
elixir#util#get_filename	plugged/vim-elixir/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
embed_code	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function embed_code(parent_code, child_placeholder, child_code) {$/;"	f
embed_code	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def embed_code(parent_code, child_placeholder, child_code):$/;"	f
embed_expression	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function embed_expression(parent_code, child_placeholder, child_expression) {$/;"	f
embed_expression	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def embed_expression(parent_code, child_placeholder, child_expression):$/;"	f
enableLiveUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:enableLiveUpdate() abort$/;"	f
enable_logging	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^        def enable_logging(self, context: Context) -> None:$/;"	m	class:DeopleteHandlers
enable_logging	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def enable_logging(self) -> None:$/;"	m	class:Deoplete
enable_logging	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def enable_logging(self) -> None:$/;"	m	class:_Parent
enable_syntax	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! s:enable_syntax() abort$/;"	f
encode	plugged/vim-go/autoload/go/uri.vim	/^function! s:encode(value, unreserved)$/;"	f
encode_input_stream	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def encode_input_stream(stream, encoding):$/;"	f
encode_output_stream	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def encode_output_stream(stream, encoding):$/;"	f
encodechar	plugged/vim-go/autoload/go/uri.vim	/^function! s:encodechar(value)$/;"	f
ensureWorkspace	plugged/vim-go/autoload/go/lsp.vim	/^function! s:ensureWorkspace(dir)$/;"	f
ensure_no_ambiguous_variables	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def ensure_no_ambiguous_variables(query_text, input_column_names, join_column_names):$/;"	f
ensure_single_field	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def ensure_single_field(self, fields):$/;"	m	class:CSVWriter
ensure_storage_exists	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:ensure_storage_exists()$/;"	f
environ	plugged/nvim-yarp/pythonx/yarp.py	/^from os import environ$/;"	i
eprint	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def eprint(*args, **kwargs):$/;"	f
eq	plugged/rainbow/autoload/rainbow_main.vim	/^fun s:eq(x, y)$/;"	f
err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
err_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:err_cb(ch, msg) abort$/;"	f
error	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from deoplete.util import (bytepos2charpos, charpos2bytepos, error, error_tb,$/;"	i
error	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^from deoplete.util import error, error_tb$/;"	i
error	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^from deoplete.util import error, globruntime$/;"	i
error	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def error(self, msg: str,$/;"	m	class:LoggingMixin
error	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from deoplete.util import error_tb, error$/;"	i
error	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def error(vim: Nvim, expr: typing.Any) -> None:$/;"	f
errorFromDiagnostic	plugged/vim-go/autoload/go/lsp.vim	/^function! s:errorFromDiagnostic(diagnostic, bufname, fname) abort$/;"	f
error_format	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^var error_format = 'hr';$/;"	v
error_tb	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^    from deoplete.util import error_tb$/;"	i
error_tb	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from deoplete.util import (bytepos2charpos, charpos2bytepos, error, error_tb,$/;"	i
error_tb	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^from deoplete.util import error, error_tb$/;"	i
error_tb	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from deoplete.util import error_tb, error$/;"	i
error_tb	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def error_tb(vim: Nvim, msg: str) -> None:$/;"	f
error_vim	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^from deoplete.util import error_vim, UserContext, Candidates$/;"	i
error_vim	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^from deoplete.util import debug, error_vim, UserContext, Candidates$/;"	i
error_vim	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def error_vim(vim: Nvim, msg: str) -> None:$/;"	f
errorformat	plugged/vim-go/autoload/go/lint.vim	/^function! s:errorformat(metalinter) abort$/;"	f
errorformat	plugged/vim-go/autoload/go/test.vim	/^function! s:errorformat() abort$/;"	f
esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
escape	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def escape(expr: str) -> str:$/;"	f
escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
eval	plugged/vim-go/autoload/go/debug.vim	/^function! s:eval(arg) abort$/;"	f
eval_callback	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:eval_callback(state, delegates, message) abort$/;"	f
eval_tree	plugged/vim-go/autoload/go/debug.vim	/^function! s:eval_tree(var, nest, isMapOrSliceChild) abort$/;"	f
example	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def example do$/;"	f
exception	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def exception(self, msg: str,$/;"	m	class:LoggingMixin
exception_to_error_info	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_engine import exception_to_error_info$/;"	i
exception_to_error_info	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def exception_to_error_info(e):$/;"	f
exception_to_error_info	plugged/rainbow_csv/rbql_core/vim_rbql.js	/^function exception_to_error_info(e) {$/;"	f
exec	plugged/vim-elixir/spec/indent/if_spec.rb	/^  def exec(command, progress_func \\\\ fn(_, state) -> state end, key \\\\ nil, output \\\\ nil) do$/;"	f	class:test
exec	plugged/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^        def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
exec	plugged/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^      def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
exec	plugged/vim-go/autoload/go/util.vim	/^function! s:exec(cmd, ...) abort$/;"	f
executable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
executeCommand	plugged/vim-go/autoload/go/lsp.vim	/^function! s:executeCommand(cmd, args) abort$/;"	f
execute_python	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^def execute_python(src_table_path, rb_script_path, encoding, input_delim, input_policy, input_comment_prefix, out_delim, out_policy, dst_table_path):$/;"	f
exists_path	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^from deoplete.util import exists_path$/;"	i
exists_path	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^from deoplete.util import expand, exists_path, UserContext, Candidates$/;"	i
exists_path	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def exists_path(path: str) -> bool:$/;"	f
exit	plugged/vim-go/autoload/go/lsp.vim	/^function! s:exit(restart) abort$/;"	f
exit_callback	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:exit_callback(url, state, requests, sessions, job, status) abort$/;"	f
exit_cb	plugged/vim-go/autoload/go/job.vim	/^function! s:exit_cb(job, exitval) dict$/;"	f
exit_cb	plugged/vim-go/autoload/go/rename.vim	/^function! s:exit_cb(next, job, exitval) abort$/;"	f
exit_cb	plugged/vim-go/autoload/go/term.vim	/^function! s:exit_cb(job_id, exit_status) dict abort$/;"	f
exited	plugged/vim-go/autoload/go/debug.vim	/^function! s:exited(res) abort$/;"	f
expand	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^from deoplete.util import expand, exists_path, UserContext, Candidates$/;"	i
expand	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def expand(path: str) -> str:$/;"	f
expandRunArgs	plugged/vim-go/autoload/go/cmd.vim	/^function! s:expandRunArgs(idx, val) abort$/;"	f
expand_var	plugged/vim-go/autoload/go/debug.vim	/^function! s:expand_var() abort$/;"	f
expanduser	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function expanduser(filepath) {$/;"	f
expandvars	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^from os.path import expandvars$/;"	i
export_info	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^    def export_info(users) do$/;"	f	class:test.test.test
extract	plugged/eleline.vim/plugin/eleline.vim	/^function! s:extract(group, what, ...) abort$/;"	f
extract_line_from_data	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def extract_line_from_data(data):$/;"	f
extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
extract_next_field	plugged/rainbow_csv/rbql_core/rbql-js/csv_utils.js	/^function extract_next_field(src, dlm, preserve_quotes_and_whitespaces, allow_external_whitespaces, cidx, result) {$/;"	f
extract_next_field	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def extract_next_field(src, dlm, preserve_quotes_and_whitespaces, allow_external_whitespaces, cidx, result):$/;"	f
f	plugged/rainbow/tests/test.sh	/^function f() {$/;"	f
f	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^  def f do$/;"	f	class:name.name
f	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^  def f do$/;"	f	class:name.name.f
fatal	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    fatal = critical$/;"	v	class:LoggingMixin
fetch	plugged/rainbow/tests/test.sh	/^fetch() {$/;"	f
field_regular_expression	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^field_regular_expression = '"((?:[^"]*"")*[^"]*)"'$/;"	v
field_rgx	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^field_rgx = re.compile(field_regular_expression)$/;"	v
field_rgx_external_whitespaces	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^field_rgx_external_whitespaces = re.compile(' *' + field_regular_expression + ' *')$/;"	v
fields_info	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^        this.fields_info = new Object();$/;"	c
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Base
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_word_abbr.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_head.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_length.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_matchfuzzy.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_word.py	/^    def filter(self, context: UserContext) -> Candidates:$/;"	m	class:Filter
filter	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def filter(self, record: logging.LogRecord) -> bool:$/;"	m	class:DeopleteLogFilter
filter	plugged/vim-devicons/rplugin/python3/denite/filter/devicons_denite_converter.py	/^	def filter(self, context):$/;"	m	class:Filter
filter_attrs	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^    def filter_attrs(candidates: Candidates,$/;"	m	class:Filter
filterop	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:filterop(type) abort$/;"	f
findAndRevealPath	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
findHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:findHunk(node, direction) abort$/;"	f
find_in_table	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def find_in_table(table, token):$/;"	f
find_last_pos	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
find_table_path	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function find_table_path(table_id) {$/;"	f
find_table_path	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def find_table_path(table_id):$/;"	f
find_top	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def find_top(rb_actions):$/;"	f
find_unbalanced_lines_around	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:find_unbalanced_lines_around(cur_line)$/;"	f
finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def finish(self):$/;"	m	class:CSVWriter
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def finish(self):$/;"	m	class:FileSystemCSVRegistry
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:AggregateWriter
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:RBQLOutputWriter
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:RBQLTableRegistry
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:SortedWriter
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:TableWriter
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:TopWriter
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:UniqCountWriter
finish	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def finish(self):$/;"	m	class:UniqWriter
finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
fireplace	plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace$/;"	a
fireplace#CljEvalCommand	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#CljEvalCommand(line1, line2, range, bang, mods, args) abort$/;"	f
fireplace#CljEvalComplete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#CljEvalComplete(A, L, P) abort$/;"	f
fireplace#CljsEvalCommand	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#CljsEvalCommand(line1, line2, range, bang, mods, args) abort$/;"	f
fireplace#CljsEvalComplete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#CljsEvalComplete(A, L, P) abort$/;"	f
fireplace#ConnectCommand	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#ConnectCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fireplace#ConnectComplete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#ConnectComplete(A, L, P) abort$/;"	f
fireplace#EvalComplete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#EvalComplete(A, L, P, ...) abort$/;"	f
fireplace#NsComplete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#NsComplete(A, L, P) abort$/;"	f
fireplace#activate	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#activate() abort$/;"	f
fireplace#cfile	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#cfile() abort$/;"	f
fireplace#client	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#client(...) abort$/;"	f
fireplace#clj	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#clj(...) abort$/;"	f
fireplace#cljs	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#cljs(...) abort$/;"	f
fireplace#echo_session_eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#echo_session_eval(...) abort$/;"	f
fireplace#eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#eval(...) abort$/;"	f
fireplace#eval_complete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#eval_complete(A, L, P) abort$/;"	f
fireplace#evalparse	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#evalparse(expr, ...) abort$/;"	f
fireplace#findfile	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#findfile(path) abort$/;"	f
fireplace#findresource	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#findresource(resource, ...) abort$/;"	f
fireplace#format	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#format(lnum, count, char) abort$/;"	f
fireplace#id	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#id() abort$/;"	f
fireplace#info	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#info(symbol) abort$/;"	f
fireplace#interrupt	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#interrupt(msg_or_id) abort$/;"	f
fireplace#jar_contents	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#jar_contents(path) abort$/;"	f
fireplace#location	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#location(keyword) abort$/;"	f
fireplace#massage_list	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#massage_list(...) abort$/;"	f
fireplace#message	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#message(payload, ...) abort$/;"	f
fireplace#native	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#native(...) abort$/;"	f
fireplace#ns	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#ns(...) abort$/;"	f
fireplace#ns_complete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#ns_complete(A, L, P) abort$/;"	f
fireplace#omnicomplete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#omnicomplete(findstart, base, ...) abort$/;"	f
fireplace#op_available	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#op_available(op) abort$/;"	f
fireplace#path	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#path(...) abort$/;"	f
fireplace#platform	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#platform(...) abort$/;"	f
fireplace#qualify_keyword	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#qualify_keyword(kw) abort$/;"	f
fireplace#query	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#query(...) abort$/;"	f
fireplace#quickfix_for	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#quickfix_for(stacktrace) abort$/;"	f
fireplace#register_port_file	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#register_port_file(portfile, ...) abort$/;"	f
fireplace#resolve_alias	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#resolve_alias(name) abort$/;"	f
fireplace#session#for	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! fireplace#session#for(transport, ...) abort$/;"	f
fireplace#session_eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#session_eval(...) abort$/;"	f
fireplace#skip	plugged/vim-cljfmt/plugin/cljfmt.vim	/^let fireplace#skip = 'synIDattr(synID(line("."),col("."),1),"name") =~? "comment\\\\|string\\\\|char\\\\|regexp"'$/;"	v
fireplace#skip	plugged/vim-fireplace/autoload/fireplace.vim	/^let fireplace#skip = 'synIDattr(synID(line("."),col("."),1),"name") =~? "comment\\\\|string\\\\|char\\\\|regexp"'$/;"	v
fireplace#source	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#source(symbol) abort$/;"	f
fireplace#transport#combine	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! fireplace#transport#combine(responses) abort$/;"	f
fireplace#transport#connect	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! fireplace#transport#connect(arg) abort$/;"	f
fireplace#transport#id	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! fireplace#transport#id() abort$/;"	f
fireplace#transport#interrupt	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! fireplace#transport#interrupt(id) abort$/;"	f
fireplace#transport#stdin	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! fireplace#transport#stdin(session_or_id, data) abort$/;"	f
fireplace#transport#wait	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! fireplace#transport#wait(id, ...) abort$/;"	f
fireplace#wait	plugged/vim-fireplace/autoload/fireplace.vim	/^function! fireplace#wait(msg_or_id_or_list, ...) abort$/;"	f
fireplace_eval	plugged/vim-fireplace/autoload/fireplace.vim	/^augroup fireplace_eval$/;"	a
fireplace_transport	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^augroup fireplace_transport$/;"	a
fmt_cmd	plugged/vim-go/autoload/go/fmt.vim	/^function! s:fmt_cmd(bin_name, source, target)$/;"	f
fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
fold	plugged/vim-elixir/spec/folding/basic_spec.rb	/^  def self.fold(content)$/;"	F
fold_and_replace	plugged/vim-elixir/spec/spec_helper.rb	/^  def fold_and_replace(content, fold_on_line)$/;"	f	class:Buffer
foo	plugged/vim-elixir/spec/syntax/comments_spec.rb	/^    def foo(<<$/;"	f
foo	plugged/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \/\/ :baz)$/;"	f	class:foo
foo	plugged/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \\\\ :baz)$/;"	f
format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
from_client	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^    def from_client(msg):$/;"	f	function:walk
fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#Autowrite	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Autowrite() abort$/;"	f
fugitive#BlameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameFileType	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameFileType() abort$/;"	f
fugitive#BlameSyntax	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#BufReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#BufWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#Cd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#CommonDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#Cwindow	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#DiffClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort$/;"	f
fugitive#EditComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#FetchComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GX	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GX() abort$/;"	f
fugitive#GitVersion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Object	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, args) abort$/;"	f
fugitive#PagerFor	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Path	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#Prepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvGitArgv	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvGitArgv(...) abort$/;"	f
fugitive#PullComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#ReadComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#RemoteUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#ResolveRemote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ResolveRemote(remote) abort$/;"	f
fugitive#Result	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Result(...) abort$/;"	f
fugitive#Resume	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#SourceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#SshHostAlias	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshHostAlias(...) abort$/;"	f
fugitive#StatusCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#StatusCfile() abort$/;"	f
fugitive#Statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#WqCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#buffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive_blame	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_job	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
fun	plugged/vim-elixir/spec/indent/lists_spec.rb	/^    def fun do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
function	plugged/vim-elixir/spec/syntax/strings_spec.rb	/^      def function do$/;"	f
function	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:function(name) abort$/;"	f
function	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
fuzzy_escape	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^from deoplete.util import fuzzy_escape, UserContext, Candidates$/;"	i
fuzzy_escape	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^from deoplete.util import fuzzy_escape, UserContext, Candidates$/;"	i
fuzzy_escape	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def fuzzy_escape(string: str, camelcase: bool) -> str:$/;"	f
fzf#decls#cmd	plugged/vim-go/autoload/fzf/decls.vim	/^function! fzf#decls#cmd(...) abort$/;"	f
g:AutoPairs	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":"'''", "`":"`"}$/;"	v
g:AutoPairsCenterLine	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsLoaded	plugged/auto-pairs/plugin/auto-pairs.vim	/^let g:AutoPairsLoaded = 1$/;"	v
g:AutoPairsMapBS	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCR = 1$/;"	v
g:AutoPairsMapCh	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCh = 1$/;"	v
g:AutoPairsMapSpace	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapSpace = 1$/;"	v
g:AutoPairsMoveCharacter	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMoveCharacter = "()[]{}\\"'"$/;"	v
g:AutoPairsMultilineClose	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMultilineClose = 1$/;"	v
g:AutoPairsShortcutBackInsert	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsShortcutFastWrap	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutToggle	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsSmartQuotes	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsSmartQuotes = 1$/;"	v
g:AutoPairsWildClosedPair	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsWildClosedPair = ''$/;"	v
g:DevIconsEnableFolderExtensionPatternMatching	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^  let g:DevIconsEnableFolderExtensionPatternMatching = 0$/;"	v
g:DevIconsEnableFolderPatternMatching	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^  let g:DevIconsEnableFolderPatternMatching = 1$/;"	v
g:DevIconsEnableFoldersOpenClose	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^  let g:DevIconsEnableFoldersOpenClose = 0$/;"	v
g:DevIconsEnableNERDTreeRedraw	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^    let g:DevIconsEnableNERDTreeRedraw = 0$/;"	v
g:DevIconsEnableNERDTreeRedraw	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^    let g:DevIconsEnableNERDTreeRedraw = 1$/;"	v
g:NERDDelimiterMap	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let g:NERDDelimiterMap = s:delimiterMap$/;"	v
g:NERDTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarksFile	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') . '\/.NERDTreeBookmarks')$/;"	v
g:NERDTreeBookmarksSort	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeSingleChildDir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCaseSensitiveSort	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirArrowCollapsible	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHijackNetrw	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeKeyMap	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpFirstChild	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivateNode)$/;"	v
g:NERDTreeMapPreviewSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSplit)$/;"	v
g:NERDTreeMapPreviewVSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSplit)$/;"	v
g:NERDTreeMapQuit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFiles	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalUI	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMouseMode	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowLineNumbers	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '\\~$'])$/;"	v
g:NERDTreeStatusline	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}")$/;"	v
g:NERDTreeUI	plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:_neovim_rpc_jobs	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let g:_neovim_rpc_jobs = {}$/;"	v
g:_neovim_rpc_main_channel	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let g:_neovim_rpc_main_channel = -1$/;"	v
g:_webdevicons_airline_orig_formatter	plugged/vim-devicons/plugin/webdevicons.vim	/^  let g:_webdevicons_airline_orig_formatter = get(g:, 'airline#extensions#tabline#formatter', 'default')$/;"	v
g:airline#extensions#tabline#formatter	plugged/vim-devicons/plugin/webdevicons.vim	/^  let g:airline#extensions#tabline#formatter = 'webdevicons'$/;"	v
g:autoloaded_fireplace	plugged/vim-fireplace/autoload/fireplace.vim	/^let g:autoloaded_fireplace = 1$/;"	v
g:autoloaded_fireplace_session	plugged/vim-fireplace/autoload/fireplace/session.vim	/^let g:autoloaded_fireplace_session = 1$/;"	v
g:autoloaded_fireplace_transport	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^let g:autoloaded_fireplace_transport = 1$/;"	v
g:autoloaded_fugitive	plugged/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:clj_fmt_config	plugged/vim-cljfmt/plugin/cljfmt.vim	/^    let g:clj_fmt_config = 'nil'$/;"	v
g:clj_fmt_required	plugged/vim-cljfmt/plugin/cljfmt.vim	/^let g:clj_fmt_required = 0$/;"	v
g:clojure_align_multiline_strings	plugged/vim-clojure-static/indent/clojure.vim	/^		let g:clojure_align_multiline_strings = 0$/;"	v
g:clojure_align_subforms	plugged/vim-clojure-static/indent/clojure.vim	/^		let g:clojure_align_subforms = 0$/;"	v
g:clojure_fuzzy_indent	plugged/vim-clojure-static/indent/clojure.vim	/^		let g:clojure_fuzzy_indent = 1$/;"	v
g:clojure_fuzzy_indent_blacklist	plugged/vim-clojure-static/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_blacklist = ['-fn$', '\\v^with-%(meta|out-str|loading-context)$']$/;"	v
g:clojure_fuzzy_indent_patterns	plugged/vim-clojure-static/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']$/;"	v
g:clojure_highlight_local_vars	plugged/vim-clojure-highlight/plugin/vim_clojure_highlight.vim	/^	let g:clojure_highlight_local_vars = 1$/;"	v
g:clojure_highlight_references	plugged/vim-clojure-highlight/plugin/vim_clojure_highlight.vim	/^	let g:clojure_highlight_references = 1$/;"	v
g:clojure_maxlines	plugged/vim-clojure-static/indent/clojure.vim	/^		let g:clojure_maxlines = 100$/;"	v
g:clojure_special_indent_words	plugged/vim-clojure-static/indent/clojure.vim	/^		let g:clojure_special_indent_words = 'deftype,defrecord,reify,proxy,extend-type,extend-protocol,letfn'$/;"	v
g:colors_name	plugged/seoul256.vim/colors/seoul256-light.vim	/^    let g:colors_name = &background == 'dark' ? 'seoul256' : 'seoul256-light'$/;"	v
g:colors_name	plugged/seoul256.vim/colors/seoul256-light.vim	/^    let g:colors_name = 'seoul256'$/;"	v
g:colors_name	plugged/seoul256.vim/colors/seoul256.vim	/^let g:colors_name = 'seoul256'$/;"	v
g:colors_name	plugged/vim-solarized8/colors/solarized8.vim	/^let g:colors_name = 'solarized8'$/;"	v
g:colors_name	plugged/vim-solarized8/colors/solarized8_flat.vim	/^let g:colors_name = 'solarized8_flat'$/;"	v
g:colors_name	plugged/vim-solarized8/colors/solarized8_high.vim	/^let g:colors_name = 'solarized8_high'$/;"	v
g:colors_name	plugged/vim-solarized8/colors/solarized8_low.vim	/^let g:colors_name = 'solarized8_low'$/;"	v
g:ctrlp_ext_vars	plugged/vim-go/autoload/ctrlp/decls.vim	/^  let g:ctrlp_ext_vars = [s:go_decls_var]$/;"	v
g:ctrlp_ext_vars	plugged/vim-go/autoload/ctrlp/decls.vim	/^  let g:ctrlp_ext_vars = add(g:ctrlp_ext_vars, s:go_decls_var)$/;"	v
g:current_compiler	plugged/vim-go/compiler/go.vim	/^let g:current_compiler = "go"$/;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:eelixir_default_subtype	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:eelixir_default_subtype	plugged/vim-elixir/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:elixir_indent_debug	plugged/vim-elixir/test.init.vim	/^let g:elixir_indent_debug=1$/;"	v
g:elixir_indent_max_lookbehind	plugged/vim-elixir/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
g:elixir_use_markdown_for_docs	plugged/vim-elixir/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
g:fireplace#reader	plugged/vim-fireplace/autoload/fireplace.vim	/^let g:fireplace#reader =$/;"	v
g:fireplace_python_executable	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^  let g:fireplace_python_executable = executable('python3') ? 'python3' : 'python'$/;"	v
g:fugitive_git_executable	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'env ' . g:fugitive_git_executable$/;"	v
g:fugitive_git_executable	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:go_echo_command_info	plugged/vim-go/scripts/runtest.vim	/^  let g:go_echo_command_info = 0$/;"	v
g:go_fmt_command	init.vim	/^let g:go_fmt_command = 'goimports'$/;"	v
g:go_gopls_options	plugged/vim-go/scripts/runtest.vim	/^  let g:go_gopls_options = []$/;"	v
g:go_gotags_bin	plugged/vim-go/ftplugin/go/tagbar.vim	/^  let g:go_gotags_bin = "gotags"$/;"	v
g:go_jump_to_error	plugged/vim-go/ftplugin/go/mappings.vim	/^  let g:go_jump_to_error = 1$/;"	v
g:go_loaded_gosnippets	plugged/vim-go/ftplugin/go/snippets.vim	/^let g:go_loaded_gosnippets = 1$/;"	v
g:go_loaded_install	plugged/vim-go/plugin/go.vim	/^let g:go_loaded_install = 1$/;"	v
g:go_rename_command	init.vim	/^let g:go_rename_command = 'gopls'$/;"	v
g:gutentags_add_ctrlp_root_markers	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'])$/;"	v
g:gutentags_fake	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:indentLine_bufNameExclude	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_bufNameExclude = get(g:, 'indentLine_bufNameExclude', [])$/;"	v
g:indentLine_bufTypeExclude	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_bufTypeExclude = get(g:, 'indentLine_bufTypeExclude', [])$/;"	v
g:indentLine_char	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_char = get(g:, 'indentLine_char', (&encoding ==# "utf-8" && &term isnot# "linux" ? '¦' : '|'))$/;"	v
g:indentLine_char_list	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_char_list = get(g:, 'indentLine_char_list', [])$/;"	v
g:indentLine_defaultGroup	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_defaultGroup = get(g:, 'indentLine_defaultGroup', "")$/;"	v
g:indentLine_enabled	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_enabled = get(g:, 'indentLine_enabled', 1)$/;"	v
g:indentLine_faster	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_faster = get(g:, 'indentLine_faster', 0)$/;"	v
g:indentLine_fileType	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_fileType = get(g:, 'indentLine_fileType', [])$/;"	v
g:indentLine_fileTypeExclude	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_fileTypeExclude = get(g:, 'indentLine_fileTypeExclude', ['leaderf'])$/;"	v
g:indentLine_first_char	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_first_char = get(g:, 'indentLine_first_char', (&encoding ==# "utf-8" && &term isnot# "linux" ? '¦' : '|'))$/;"	v
g:indentLine_indentLevel	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_indentLevel = get(g:, 'indentLine_indentLevel', 20)$/;"	v
g:indentLine_leadingSpaceChar	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_leadingSpaceChar = get(g:, 'indentLine_leadingSpaceChar', (&encoding ==# "utf-8" && &term isnot# "linux" ? '˰' : '.'))$/;"	v
g:indentLine_leadingSpaceEnabled	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_leadingSpaceEnabled = get(g:, 'indentLine_leadingSpaceEnabled', 0)$/;"	v
g:indentLine_loaded	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_loaded = 1$/;"	v
g:indentLine_maxLines	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_maxLines = get(g:, 'indentLine_maxLines', 3000)$/;"	v
g:indentLine_mysyntaxfile	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_mysyntaxfile = fnamemodify(expand("<sfile>"), ":p:h:h")."\/syntax\/indentLine.vim"$/;"	v
g:indentLine_newVersion	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_newVersion = get(g:,'indentLine_newVersion',v:version > 704 || v:version == 704 && has("patch792"))$/;"	v
g:indentLine_setColors	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_setColors = get(g:, 'indentLine_setColors', 1)$/;"	v
g:indentLine_setConceal	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_setConceal = get(g:, 'indentLine_setConceal', 1)$/;"	v
g:indentLine_showFirstIndentLevel	plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_showFirstIndentLevel = get(g:, 'indentLine_showFirstIndentLevel', 0)$/;"	v
g:indent_guides_auto_colors	plugged/seoul256.vim/colors/seoul256.vim	/^let g:indent_guides_auto_colors = 0$/;"	v
g:io_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:loaded_better_whitespace_plugin	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^let g:loaded_better_whitespace_plugin = 1$/;"	v
g:loaded_deoplete	plugged/deoplete.nvim/plugin/deoplete.vim	/^let g:loaded_deoplete = 1$/;"	v
g:loaded_eleline	plugged/eleline.vim/plugin/eleline.vim	/^let g:loaded_eleline = 1$/;"	v
g:loaded_fireplace	plugged/vim-fireplace/plugin/fireplace.vim	/^let g:loaded_fireplace = 1$/;"	v
g:loaded_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_gutentags	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_nerdtree_autoload	plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_git_status	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let g:loaded_nerdtree_git_status = 1$/;"	v
g:loaded_nerdtree_git_status_autoload	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^let g:loaded_nerdtree_git_status_autoload = 1$/;"	v
g:loaded_nerdtree_git_status_job	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let g:loaded_nerdtree_git_status_job = 1$/;"	v
g:loaded_nerdtree_git_status_listener	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let g:loaded_nerdtree_git_status_listener = 1$/;"	v
g:loaded_nerdtree_git_status_log	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let g:loaded_nerdtree_git_status_log = 1$/;"	v
g:loaded_nerdtree_git_status_util	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let g:loaded_nerdtree_git_status_util = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_tagbar	plugged/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_webdevicons	plugged/vim-devicons/plugin/webdevicons.vim	/^let g:loaded_webdevicons = 1$/;"	v
g:main_syntax	plugged/vim-go/syntax/gohtmltmpl.vim	/^  let g:main_syntax = 'html'$/;"	v
g:neovim_rpc#py	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:neovim_rpc#py = 'python'$/;"	v
g:neovim_rpc#py	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:neovim_rpc#py = 'python3'$/;"	v
g:neovim_rpc#py	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:neovim_rpc#py = 'pythonx'$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:rainbow_active	init.vim	/^let g:rainbow_active=1$/;"	v
g:rbql_test_log_records	plugged/rainbow_csv/test/unit_lib.vim	/^let g:rbql_test_log_records = []$/;"	v
g:seoul256_background	plugged/seoul256.vim/colors/seoul256-light.vim	/^      let g:seoul256_background = s:backup$/;"	v
g:seoul256_background	plugged/seoul256.vim/colors/seoul256-light.vim	/^      let g:seoul256_background = s:custom_bg$/;"	v
g:seoul256_current_bg	plugged/seoul256.vim/colors/seoul256.vim	/^let g:seoul256_current_bg = [s:dark_bg, s:light_bg][s:style_idx]$/;"	v
g:seoul256_current_fg	plugged/seoul256.vim/colors/seoul256.vim	/^let g:seoul256_current_fg = [s:dark_fg, s:light_fg][s:style_idx]$/;"	v
g:tabular_default_format	plugged/tabular/autoload/tabular.vim	/^  let g:tabular_default_format = "l1"$/;"	v
g:tabular_loaded	plugged/tabular/plugin/Tabular.vim	/^let g:tabular_loaded = 1$/;"	v
g:tagbar#icon_closed	plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_iconchars	plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▶', '▼']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5', '#002b36', '#cb4b16', '#586e75', '#657b83', '#839496', '#6c71c4', '#93a1a1', '#fdf6e3']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8.vim	/^  let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5', '#002b36', '#cb4b16', '#586e75', '#657b83', '#839496', '#6c71c4', '#93a1a1', '#fdf6e3']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5', '#002b36', '#cb4b16', '#586e75', '#657b83', '#839496', '#6c71c4', '#93a1a1', '#fdf6e3']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8_flat.vim	/^  let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5', '#002b36', '#cb4b16', '#586e75', '#657b83', '#839496', '#6c71c4', '#93a1a1', '#fdf6e3']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#fdf6e3', '#002b36', '#cb4b16', '#657b83', '#839496', '#93a1a1', '#6c71c4', '#eee8d5', '#fdf6e3']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8_high.vim	/^  let g:terminal_ansi_colors = ['#002b36', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5', '#002b36', '#cb4b16', '#073642', '#586e75', '#657b83', '#6c71c4', '#93a1a1', '#fdf6e3']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5', '#002b36', '#cb4b16', '#586e75', '#657b83', '#839496', '#6c71c4', '#93a1a1', '#fdf6e3']$/;"	v
g:terminal_ansi_colors	plugged/vim-solarized8/colors/solarized8_low.vim	/^  let g:terminal_ansi_colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#d33682', '#2aa198', '#eee8d5', '#002b36', '#cb4b16', '#586e75', '#657b83', '#839496', '#6c71c4', '#93a1a1', '#fdf6e3']$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_0 = '#073642'$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_0 = '#073642'$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_0 = '#073642'$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_0 = '#073642'$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_0 = '#073642'$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_0 = '#002b36'$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_0 = '#073642'$/;"	v
g:terminal_color_0	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_0 = '#073642'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_1	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_1 = '#dc322f'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_10 = '#586e75'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_10 = '#586e75'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_10 = '#586e75'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_10 = '#586e75'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_10 = '#657b83'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_10 = '#073642'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_10 = '#586e75'$/;"	v
g:terminal_color_10	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_10 = '#586e75'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_11 = '#657b83'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_11 = '#657b83'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_11 = '#657b83'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_11 = '#657b83'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_11 = '#839496'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_11 = '#586e75'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_11 = '#657b83'$/;"	v
g:terminal_color_11	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_11 = '#657b83'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_12 = '#839496'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_12 = '#839496'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_12 = '#839496'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_12 = '#839496'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_12 = '#93a1a1'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_12 = '#657b83'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_12 = '#839496'$/;"	v
g:terminal_color_12	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_12 = '#839496'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_13	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_13 = '#6c71c4'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_14 = '#93a1a1'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_14 = '#93a1a1'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_14 = '#93a1a1'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_14 = '#93a1a1'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_14 = '#eee8d5'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_14 = '#93a1a1'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_14 = '#93a1a1'$/;"	v
g:terminal_color_14	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_14 = '#93a1a1'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_15	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_15 = '#fdf6e3'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_2	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_2 = '#859900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_3	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_3 = '#b58900'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_4	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_4 = '#268bd2'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_5	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_5 = '#d33682'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_6	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_6 = '#2aa198'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_7 = '#eee8d5'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_7 = '#eee8d5'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_7 = '#eee8d5'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_7 = '#eee8d5'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_7 = '#fdf6e3'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_7 = '#eee8d5'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_7 = '#eee8d5'$/;"	v
g:terminal_color_7	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_7 = '#eee8d5'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_8	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_8 = '#002b36'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8.vim	/^      let g:terminal_color_9 = '#cb4b16'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8.vim	/^    let g:terminal_color_9 = '#cb4b16'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8_flat.vim	/^      let g:terminal_color_9 = '#cb4b16'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let g:terminal_color_9 = '#cb4b16'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8_high.vim	/^      let g:terminal_color_9 = '#cb4b16'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let g:terminal_color_9 = '#cb4b16'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8_low.vim	/^      let g:terminal_color_9 = '#cb4b16'$/;"	v
g:terminal_color_9	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let g:terminal_color_9 = '#cb4b16'$/;"	v
g:test_verbose	plugged/vim-go/scripts/runtest.vim	/^  let g:test_verbose = 0$/;"	v
g:vim_go_root	plugged/vim-go/scripts/runtest.vim	/^let g:vim_go_root = fnamemodify(getcwd(), ':p')$/;"	v
g:webdevicons_enable	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable = 1$/;"	v
g:webdevicons_enable_airline_statusline	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable_airline_statusline = 1$/;"	v
g:webdevicons_enable_airline_tabline	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable_airline_tabline = 1$/;"	v
g:webdevicons_enable_nerdtree	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^     let g:webdevicons_enable_nerdtree = 0$/;"	v
g:webdevicons_enable_nerdtree	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable_nerdtree = 1$/;"	v
g:webdevicons_gui_glyph_fix	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^    let g:webdevicons_gui_glyph_fix = 0$/;"	v
g:webdevicons_gui_glyph_fix	plugged/vim-devicons/nerdtree_plugin/webdevicons.vim	/^    let g:webdevicons_gui_glyph_fix = 1$/;"	v
g<LeftMouse>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse>:GoDef<cr>$/;"	m
gather_candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def gather_candidates(self, context: UserContext) -> Candidates:$/;"	m	class:Base
gather_candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^    def gather_candidates(self, context: UserContext) -> Candidates:$/;"	m	class:Source
gather_candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^    def gather_candidates(self, context: UserContext) -> Candidates:$/;"	m	class:Source
gather_candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^    def gather_candidates(self, context: UserContext) -> Candidates:$/;"	m	class:Source
gather_candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^    def gather_candidates(self, context: UserContext) -> Candidates:$/;"	m	class:Source
gather_candidates	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^    def gather_candidates(self, context: UserContext) -> Candidates:$/;"	m	class:Source
gather_candidates	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gcd	plugged/rainbow/autoload/rainbow_main.vim	/^fun s:gcd(a, b)$/;"	f
gd	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> gd :GoDef<cr>$/;"	m
gen_tests	plugged/vim-elixir/spec/spec_helper.rb	/^  def gen_tests(method, str)$/;"	f	class:Differ
generate_common_init_code	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def generate_common_init_code(query_text, variable_prefix):$/;"	f
generate_init_statements	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def generate_init_statements(query_text, variables_map, join_variables_map):$/;"	f
generate_main_loop_code	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function generate_main_loop_code(query_context) {$/;"	f
generate_main_loop_code	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def generate_main_loop_code():$/;"	f
generate_microlang_syntax	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:generate_microlang_syntax(nfields)$/;"	f
generate_random_decoded_binary_table	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def generate_random_decoded_binary_table(max_num_rows, max_num_cols, restricted_chars):$/;"	f
generate_random_unicode_table	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def generate_random_unicode_table(max_num_rows, max_num_cols, restricted_chars):$/;"	f
generate_wildignore_options	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
get	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^    def get(self, event: str) -> UserContext:$/;"	m	class:Context
get	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
getChildren	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
getChildrenByName	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
getClosedParentTline	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
getDataType	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getDataType() abort dict$/;"	f
getDataType	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getDataType() abort dict$/;"	f
getDistro	plugged/vim-devicons/plugin/webdevicons.vim	/^function s:getDistro()$/;"	f
getGitWorkdir	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:getGitWorkdir(ntRoot) abort$/;"	f
getIndicator	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:getIndicator(status) abort$/;"	f
getKind	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
getLogger	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^def getLogger(name: str) -> logging.Logger:$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getReceiver	plugged/vim-go/autoload/go/impl.vim	/^function! s:getReceiver()$/;"	f
getStatusKey	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! s:getStatusKey(x, y) abort$/;"	f
getTags	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
getTagsByName	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
get_all_matches	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function get_all_matches(regexp, text) {$/;"	f
get_all_records	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_all_records(self, num_rows=None):$/;"	m	class:CSVRecordIterator
get_all_records	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def get_all_records(self, num_rows=None):$/;"	m	class:SqliteRecordIterator
get_ambiguous_error_msg	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function get_ambiguous_error_msg(variable_name) {$/;"	f
get_attrs	plugged/nerdtree-dash/syntax/nerdtree.vim	/^function! s:get_attrs(group) abort$/;"	f
get_auto_comment_prefix	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_auto_comment_prefix()$/;"	f
get_auto_policy_for_delim	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_auto_policy_for_delim(delim)$/;"	f
get_base_indent	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
get_buf_option	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def get_buf_option(self, option: str) -> typing.Any:$/;"	m	class:Base
get_col_num_rfc_basic_even_case	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_col_num_rfc_basic_even_case(line, delim, expected_num_fields)$/;"	f
get_col_num_rfc_lines	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_col_num_rfc_lines(line, delim, expected_num_fields)$/;"	f
get_col_num_single_line	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_col_num_single_line(fields, delim, offset)$/;"	f
get_color	plugged/nerdtree-dash/syntax/nerdtree.vim	/^function! s:get_color(group, attr) abort$/;"	f
get_column_names	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def get_column_names(self):$/;"	m	class:SqliteRecordIterator
get_complete_context	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:get_complete_context() abort$/;"	f
get_complete_position	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def get_complete_position(self, context: UserContext) -> int:$/;"	m	class:Base
get_complete_position	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^    def get_complete_position(self, context: UserContext) -> int:$/;"	m	class:Source
get_complete_position	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^    def get_complete_position(self, context: UserContext) -> int:$/;"	m	class:Source
get_complete_position	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^    def get_complete_position(self, context: UserContext) -> int:$/;"	m	class:Source
get_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
get_custom	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def get_custom(custom: typing.Dict[str, typing.Any],$/;"	f
get_default	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function get_default(src, key, default_val) {$/;"	f
get_default_output_path	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function get_default_output_path(input_path, delim) {$/;"	f
get_default_output_path	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def get_default_output_path(input_path, delim):$/;"	f
get_default_policy	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function get_default_policy(delim) {$/;"	f
get_default_policy	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def get_default_policy(delim):$/;"	f
get_filetype_var	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def get_filetype_var(self, filetype: str,$/;"	m	class:Base
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:ArrayAggAggregator
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:AvgAggregator
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:ConstGroupVerifier
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:CountAggregator
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:MaxAggregator
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:MedianAggregator
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:MinAggregator
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:SumAggregator
get_final	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_final(self, key):$/;"	m	class:VarianceAggregator
get_git_status_output	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_status_output(workdir) abort$/;"	f
get_git_version	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_version() abort$/;"	f
get_index_record	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function get_index_record(index_path, key) {$/;"	f
get_index_record	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def get_index_record(index_path, key):$/;"	f
get_input_pattern	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def get_input_pattern(self, filetype: str) -> str:$/;"	m	class:Base
get_iterator_by_table_id	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_iterator_by_table_id(self, table_id):$/;"	m	class:FileSystemCSVRegistry
get_iterator_by_table_id	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_iterator_by_table_id(self, table_id):$/;"	m	class:RBQLTableRegistry
get_iterator_by_table_id	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_iterator_by_table_id(self, table_id):$/;"	m	class:SingleTableRegistry
get_iterator_by_table_id	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def get_iterator_by_table_id(self, table_id):$/;"	m	class:SqliteDbRegistry
get_join_records	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_join_records(self, key):$/;"	m	class:HashJoinMap
get_map_str	plugged/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
get_meta_language	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_meta_language()$/;"	f
get_multi_key	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_multi_key(self, nr, fields):$/;"	m	class:HashJoinMap
get_num_columns_if_delimited	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_num_columns_if_delimited(delim, policy)$/;"	f
get_output_format_params	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_output_format_params(input_delim, input_policy)$/;"	f
get_random_suffix	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^def get_random_suffix():$/;"	f
get_rb_script_path_for_this_table	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_rb_script_path_for_this_table()$/;"	f
get_record	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_record(self):$/;"	m	class:CSVRecordIterator
get_record	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_record(self):$/;"	m	class:RBQLInputIterator
get_record	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_record(self):$/;"	m	class:TableIterator
get_record	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def get_record(self):$/;"	m	class:SqliteRecordIterator
get_rhs	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_rhs(self, lhs_key):$/;"	m	class:InnerJoiner
get_rhs	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_rhs(self, lhs_key):$/;"	m	class:LeftJoiner
get_rhs	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_rhs(self, lhs_key):$/;"	m	class:StrictLeftJoiner
get_row_rfc	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_row_rfc(self):$/;"	m	class:CSVRecordIterator
get_row_simple	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_row_simple(self):$/;"	m	class:CSVRecordIterator
get_single_key	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_single_key(self, nr, fields):$/;"	m	class:HashJoinMap
get_syn_names	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def get_syn_names(vim: Nvim) -> typing.List[str]:$/;"	f
get_table_record	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:get_table_record(table_path)$/;"	f
get_var	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^    def get_var(self, var_name: str) -> typing.Any:$/;"	m	class:Base
get_var	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def get_var(self, var_name: str) -> typing.Any:$/;"	m	class:Base
get_variables_map	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_variables_map(self, query_text):$/;"	m	class:CSVRecordIterator
get_variables_map	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_variables_map(self, query_text):$/;"	m	class:RBQLInputIterator
get_variables_map	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_variables_map(self, query_text):$/;"	m	class:TableIterator
get_variables_map	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def get_variables_map(self, query_text):$/;"	m	class:SqliteRecordIterator
get_visual_content	plugged/vim-go/autoload/go/play.vim	/^function! s:get_visual_content() abort$/;"	f
get_visual_selection	plugged/vim-go/autoload/go/play.vim	/^function! s:get_visual_selection() abort$/;"	f
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_warnings(self):$/;"	m	class:CSVRecordIterator
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_warnings(self):$/;"	m	class:CSVWriter
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def get_warnings(self):$/;"	m	class:FileSystemCSVRegistry
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_warnings(self):$/;"	m	class:HashJoinMap
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_warnings(self):$/;"	m	class:RBQLInputIterator
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_warnings(self):$/;"	m	class:RBQLOutputWriter
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_warnings(self):$/;"	m	class:RBQLTableRegistry
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_warnings(self):$/;"	m	class:TableIterator
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def get_warnings(self):$/;"	m	class:TableWriter
get_warnings	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^    def get_warnings(self):$/;"	m	class:SqliteRecordIterator
getinfo	plugged/vim-go/autoload/go/complete_test.vim	/^func! s:getinfo()$/;"	f
getinfo	plugged/vim-go/autoload/go/lsp_test.vim	/^function! s:getinfo(str, name)$/;"	f
getline	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:getline()$/;"	f
getlines	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^from deoplete.util import getlines$/;"	i
getlines	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^from deoplete.util import parse_buffer_pattern, getlines$/;"	i
getlines	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^from deoplete.util import parse_buffer_pattern, getlines$/;"	i
getlines	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def getlines(vim: Nvim, start: int = 1,$/;"	f
gettime	plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
gitstatus#doctor#Say	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! gitstatus#doctor#Say() abort$/;"	f
gitstatus#getIndicator	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#getIndicator(status) abort$/;"	f
gitstatus#isWin	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#isWin() abort$/;"	f
gitstatus#job#Spawn	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! gitstatus#job#Spawn(name, cmd, opts) abort$/;"	f
gitstatus#listener#New	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! gitstatus#listener#New(opts) abort$/;"	f
gitstatus#log#NewLogger	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! gitstatus#log#NewLogger(level) abort$/;"	f
gitstatus#shouldConceal	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#shouldConceal() abort$/;"	f
gitstatus#util#BuildGitStatusCommand	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitStatusCommand(root, opts) abort$/;"	f
gitstatus#util#BuildGitWorkdirCommand	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitWorkdirCommand(root, opts) abort$/;"	f
gitstatus#util#FormatPath	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^        function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#FormatPath	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^    function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#ParseGitStatusLine	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLine(statusLine, opts) abort$/;"	f
gitstatus#util#ParseGitStatusLines	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLines(root, statusLines, opts) abort$/;"	f
gitstatus#util#UpdateParentDirsStatus	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#UpdateParentDirsStatus(cache, root, pathStr, statusKey, opts) abort$/;"	f
glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^import glob$/;"	i
glob	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import glob$/;"	i
glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
global_deoplete	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    global_deoplete = Deoplete(vim)$/;"	v
globruntime	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^from deoplete.util import error, globruntime$/;"	i
globruntime	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def globruntime(runtimepath: str, path: str) -> typing.List[str]:$/;"	f
go#alternate#Switch	plugged/vim-go/autoload/go/alternate.vim	/^function! go#alternate#Switch(bang, cmd) abort$/;"	f
go#asmfmt#Format	plugged/vim-go/autoload/go/asmfmt.vim	/^function! go#asmfmt#Format() abort$/;"	f
go#asmfmt#ToggleAsmFmtAutoSave	plugged/vim-go/autoload/go/asmfmt.vim	/^function! go#asmfmt#ToggleAsmFmtAutoSave() abort$/;"	f
go#auto#asmfmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#asmfmt_autosave()$/;"	f
go#auto#complete_done	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#complete_done()$/;"	f
go#auto#fmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#fmt_autosave()$/;"	f
go#auto#metalinter_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#metalinter_autosave()$/;"	f
go#auto#modfmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#modfmt_autosave()$/;"	f
go#auto#template_autocreate	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#template_autocreate()$/;"	f
go#auto#update_autocmd	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#update_autocmd()$/;"	f
go#calls#Callers	plugged/vim-go/autoload/go/calls.vim	/^function! go#calls#Callers() abort$/;"	f
go#cmd#Build	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Build(bang, ...) abort$/;"	f
go#cmd#BuildTags	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#BuildTags(bang, ...) abort$/;"	f
go#cmd#Generate	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Generate(bang, ...) abort$/;"	f
go#cmd#Install	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Install(bang, ...) abort$/;"	f
go#cmd#Run	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Run(bang, ...) abort$/;"	f
go#cmd#RunTerm	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#RunTerm(bang, mode, files) abort$/;"	f
go#cmd#autowrite	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#autowrite() abort$/;"	f
go#complete#Complete	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#Complete(findstart, base) abort$/;"	f
go#complete#GetInfo	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#GetInfo() abort$/;"	f
go#complete#ToggleAutoTypeInfo	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#ToggleAutoTypeInfo() abort$/;"	f
go#config#AddtagsSkipUnexported	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AddtagsSkipUnexported() abort$/;"	f
go#config#AddtagsTransform	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AddtagsTransform() abort$/;"	f
go#config#AlternateMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AlternateMode() abort$/;"	f
go#config#AsmfmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AsmfmtAutosave() abort$/;"	f
go#config#AutoSameids	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AutoSameids() abort$/;"	f
go#config#AutoTypeInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AutoTypeInfo() abort$/;"	f
go#config#BinPath	plugged/vim-go/autoload/go/config.vim	/^function! go#config#BinPath() abort$/;"	f
go#config#BuildTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#BuildTags() abort$/;"	f
go#config#CodeCompletionEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#CodeCompletionEnabled() abort$/;"	f
go#config#CodeCompletionIcase	plugged/vim-go/autoload/go/config.vim	/^function! go#config#CodeCompletionIcase() abort$/;"	f
go#config#Debug	plugged/vim-go/autoload/go/config.vim	/^function! go#config#Debug() abort$/;"	f
go#config#DebugAddress	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugAddress() abort$/;"	f
go#config#DebugBreakpointSignText	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugBreakpointSignText() abort$/;"	f
go#config#DebugCommands	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugCommands() abort$/;"	f
go#config#DebugLogOutput	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugLogOutput() abort$/;"	f
go#config#DebugMappings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugMappings() abort$/;"	f
go#config#DebugPreserveLayout	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugPreserveLayout() abort$/;"	f
go#config#DebugWindows	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugWindows() abort$/;"	f
go#config#DeclsIncludes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DeclsIncludes() abort$/;"	f
go#config#DeclsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DeclsMode() abort$/;"	f
go#config#DefMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DefMode() abort$/;"	f
go#config#DefReuseBuffer	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DefReuseBuffer() abort$/;"	f
go#config#DiagnosticsEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DiagnosticsEnabled() abort$/;"	f
go#config#DiagnosticsLevel	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DiagnosticsLevel() abort$/;"	f
go#config#DocMaxHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocMaxHeight() abort$/;"	f
go#config#DocPopupWindow	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocPopupWindow() abort$/;"	f
go#config#DocUrl	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocUrl() abort$/;"	f
go#config#EchoCommandInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#EchoCommandInfo() abort$/;"	f
go#config#EchoGoInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#EchoGoInfo() abort$/;"	f
go#config#ErrcheckBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ErrcheckBin() abort$/;"	f
go#config#FillStructMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FillStructMode() abort$/;"	f
go#config#FmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtAutosave() abort$/;"	f
go#config#FmtCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtCommand() abort$/;"	f
go#config#FmtExperimental	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtExperimental() abort$/;"	f
go#config#FmtFailSilently	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtFailSilently() abort$/;"	f
go#config#FmtOptions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtOptions() abort$/;"	f
go#config#FoldEnable	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FoldEnable(...) abort$/;"	f
go#config#GolintBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GolintBin() abort$/;"	f
go#config#GoplsAnalyses	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsAnalyses() abort$/;"	f
go#config#GoplsCompleteUnimported	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsCompleteUnimported() abort$/;"	f
go#config#GoplsDeepCompletion	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsDeepCompletion() abort$/;"	f
go#config#GoplsEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsEnabled() abort$/;"	f
go#config#GoplsGofumpt	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsGofumpt() abort$/;"	f
go#config#GoplsLocal	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsLocal() abort$/;"	f
go#config#GoplsMatcher	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsMatcher() abort$/;"	f
go#config#GoplsOptions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsOptions() abort$/;"	f
go#config#GoplsSettings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsSettings() abort$/;"	f
go#config#GoplsStaticCheck	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsStaticCheck() abort$/;"	f
go#config#GoplsTempModfile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsTempModfile() abort$/;"	f
go#config#GoplsUsePlaceholders	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsUsePlaceholders() abort$/;"	f
go#config#GorenameBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GorenameBin() abort$/;"	f
go#config#GorenamePrefill	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GorenamePrefill() abort$/;"	f
go#config#GuruScope	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GuruScope() abort$/;"	f
go#config#HighlightArrayWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightArrayWhitespaceError() abort$/;"	f
go#config#HighlightBuildConstraints	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightBuildConstraints() abort$/;"	f
go#config#HighlightChanWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightChanWhitespaceError() abort$/;"	f
go#config#HighlightDebug	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDebug() abort$/;"	f
go#config#HighlightDiagnosticErrors	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticErrors() abort$/;"	f
go#config#HighlightDiagnosticWarnings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticWarnings() abort$/;"	f
go#config#HighlightExtraTypes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightExtraTypes() abort$/;"	f
go#config#HighlightFields	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFields() abort$/;"	f
go#config#HighlightFormatStrings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFormatStrings() abort$/;"	f
go#config#HighlightFunctionCalls	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctionCalls() abort$/;"	f
go#config#HighlightFunctionParameters	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctionParameters() abort$/;"	f
go#config#HighlightFunctions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctions() abort$/;"	f
go#config#HighlightGenerateTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightGenerateTags() abort$/;"	f
go#config#HighlightOperators	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightOperators() abort$/;"	f
go#config#HighlightSpaceTabError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightSpaceTabError() abort$/;"	f
go#config#HighlightStringSpellcheck	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightStringSpellcheck() abort$/;"	f
go#config#HighlightTrailingWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightTrailingWhitespaceError() abort$/;"	f
go#config#HighlightTypes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightTypes() abort$/;"	f
go#config#HighlightVariableAssignments	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightVariableAssignments() abort$/;"	f
go#config#HighlightVariableDeclarations	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightVariableDeclarations() abort$/;"	f
go#config#ImplementsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImplementsMode() abort$/;"	f
go#config#ImportsAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImportsAutosave() abort$/;"	f
go#config#ImportsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImportsMode() abort$/;"	f
go#config#InfoMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#InfoMode() abort$/;"	f
go#config#ListAutoclose	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListAutoclose() abort$/;"	f
go#config#ListHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListHeight() abort$/;"	f
go#config#ListType	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListType() abort$/;"	f
go#config#ListTypeCommands	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListTypeCommands() abort$/;"	f
go#config#LspLog	plugged/vim-go/autoload/go/config.vim	/^function! go#config#LspLog() abort$/;"	f
go#config#MetalinterAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterAutosave() abort$/;"	f
go#config#MetalinterAutosaveEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterAutosaveEnabled() abort$/;"	f
go#config#MetalinterCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterCommand() abort$/;"	f
go#config#MetalinterDeadline	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterDeadline() abort$/;"	f
go#config#MetalinterEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterEnabled() abort$/;"	f
go#config#ModFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ModFmtAutosave() abort$/;"	f
go#config#PlayBrowserCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#PlayBrowserCommand() abort$/;"	f
go#config#PlayOpenBrowser	plugged/vim-go/autoload/go/config.vim	/^function! go#config#PlayOpenBrowser() abort$/;"	f
go#config#ReferrersMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ReferrersMode() abort$/;"	f
go#config#RenameCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#RenameCommand() abort$/;"	f
go#config#SearchBinPathFirst	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SearchBinPathFirst() abort$/;"	f
go#config#SetAsmfmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAsmfmtAutosave(value) abort$/;"	f
go#config#SetAutoSameids	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAutoSameids(value) abort$/;"	f
go#config#SetAutoTypeInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAutoTypeInfo(value) abort$/;"	f
go#config#SetBuildTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetBuildTags(value) abort$/;"	f
go#config#SetDebugDiag	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetDebugDiag(value) abort$/;"	f
go#config#SetFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetFmtAutosave(value) abort$/;"	f
go#config#SetGuruScope	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetGuruScope(scope) abort$/;"	f
go#config#SetMetalinterAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetMetalinterAutosave(value) abort$/;"	f
go#config#SetModFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetModFmtAutosave(value) abort$/;"	f
go#config#SetTemplateAutocreate	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTemplateAutocreate(value) abort$/;"	f
go#config#SetTermCloseOnExit	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTermCloseOnExit(value) abort$/;"	f
go#config#SetTermEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTermEnabled(value) abort$/;"	f
go#config#SnippetEngine	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SnippetEngine() abort$/;"	f
go#config#StatuslineDuration	plugged/vim-go/autoload/go/config.vim	/^function! go#config#StatuslineDuration() abort$/;"	f
go#config#TemplateAutocreate	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateAutocreate() abort$/;"	f
go#config#TemplateFile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateFile() abort$/;"	f
go#config#TemplateTestFile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateTestFile() abort$/;"	f
go#config#TemplateUsePkg	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateUsePkg() abort$/;"	f
go#config#TermCloseOnExit	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermCloseOnExit() abort$/;"	f
go#config#TermEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermEnabled() abort$/;"	f
go#config#TermHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermHeight() abort$/;"	f
go#config#TermMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermMode() abort$/;"	f
go#config#TermReuse	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermReuse() abort$/;"	f
go#config#TermWidth	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermWidth() abort$/;"	f
go#config#TestShowName	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TestShowName() abort$/;"	f
go#config#TestTimeout	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TestTimeout() abort$/;"	f
go#config#TextobjIncludeFunctionDoc	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TextobjIncludeFunctionDoc() abort$/;"	f
go#config#TextobjIncludeVariable	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TextobjIncludeVariable() abort$/;"	f
go#config#Updatetime	plugged/vim-go/autoload/go/config.vim	/^function! go#config#Updatetime() abort$/;"	f
go#config#VersionWarning	plugged/vim-go/autoload/go/config.vim	/^function! go#config#VersionWarning() abort$/;"	f
go#coverage#Browser	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Browser(bang, ...) abort$/;"	f
go#coverage#Buffer	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Buffer(bang, ...) abort$/;"	f
go#coverage#BufferToggle	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#BufferToggle(bang, ...) abort$/;"	f
go#coverage#Clear	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Clear() abort$/;"	f
go#coverage#genmatch	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#genmatch(cov) abort$/;"	f
go#coverage#overlay	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#overlay(file) abort$/;"	f
go#coverage#parsegocoverline	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#parsegocoverline(line) abort$/;"	f
go#debug#BalloonExpr	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#BalloonExpr() abort$/;"	f
go#debug#Breakpoint	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Breakpoint(...) abort$/;"	f
go#debug#Goroutine	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Goroutine() abort$/;"	f
go#debug#Print	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Print(arg) abort$/;"	f
go#debug#Restart	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Restart() abort$/;"	f
go#debug#Set	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Set(symbol, value) abort$/;"	f
go#debug#Stack	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Stack(name) abort$/;"	f
go#debug#Start	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Start(mode, ...) abort$/;"	f
go#debug#Stop	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Stop() abort$/;"	f
go#debug#TestFunc	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#TestFunc(...) abort$/;"	f
go#decls#Decls	plugged/vim-go/autoload/go/decls.vim	/^function! go#decls#Decls(mode, ...) abort$/;"	f
go#def#Jump	plugged/vim-go/autoload/go/def.vim	/^function! go#def#Jump(mode, type) abort$/;"	f
go#def#SelectStackEntry	plugged/vim-go/autoload/go/def.vim	/^function! go#def#SelectStackEntry() abort$/;"	f
go#def#Stack	plugged/vim-go/autoload/go/def.vim	/^function! go#def#Stack(...) abort$/;"	f
go#def#StackClear	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackClear(...) abort$/;"	f
go#def#StackPop	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackPop(...) abort$/;"	f
go#def#StackUI	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackUI() abort$/;"	f
go#def#jump_to_declaration	plugged/vim-go/autoload/go/def.vim	/^function! go#def#jump_to_declaration(out, mode, bin_name) abort$/;"	f
go#doc#Open	plugged/vim-go/autoload/go/doc.vim	/^function! go#doc#Open(newmode, mode, ...) abort$/;"	f
go#doc#OpenBrowser	plugged/vim-go/autoload/go/doc.vim	/^function! go#doc#OpenBrowser(...) abort$/;"	f
go#fillstruct#FillStruct	plugged/vim-go/autoload/go/fillstruct.vim	/^function! go#fillstruct#FillStruct() abort$/;"	f
go#fmt#CleanErrors	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#CleanErrors() abort$/;"	f
go#fmt#Format	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#Format(withGoimport) abort$/;"	f
go#fmt#ShowErrors	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#ShowErrors(errors) abort$/;"	f
go#fmt#ToggleFmtAutoSave	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#ToggleFmtAutoSave() abort$/;"	f
go#fmt#run	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#run(bin_name, source, target)$/;"	f
go#fmt#update_file	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#update_file(source, target)$/;"	f
go#guru#AutoToggleSameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#AutoToggleSameIds() abort$/;"	f
go#guru#Callees	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Callees(selected) abort$/;"	f
go#guru#Callstack	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Callstack(selected) abort$/;"	f
go#guru#ChannelPeers	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#ChannelPeers(selected) abort$/;"	f
go#guru#ClearSameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#ClearSameIds() abort$/;"	f
go#guru#Describe	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Describe(selected) abort$/;"	f
go#guru#DescribeInfo	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#DescribeInfo(showstatus) abort$/;"	f
go#guru#Freevars	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Freevars(selected) abort$/;"	f
go#guru#Implements	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Implements(selected) abort$/;"	f
go#guru#PointsTo	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#PointsTo(selected) abort$/;"	f
go#guru#Referrers	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Referrers(selected) abort$/;"	f
go#guru#SameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#SameIds(showstatus) abort$/;"	f
go#guru#Scope	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Scope(...) abort$/;"	f
go#guru#ToggleSameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#ToggleSameIds() abort$/;"	f
go#guru#Whicherrs	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Whicherrs(selected) abort$/;"	f
go#iferr#Generate	plugged/vim-go/autoload/go/iferr.vim	/^function! go#iferr#Generate()$/;"	f
go#impl#Complete	plugged/vim-go/autoload/go/impl.vim	/^function! go#impl#Complete(arglead, cmdline, cursorpos) abort$/;"	f
go#impl#Impl	plugged/vim-go/autoload/go/impl.vim	/^function! go#impl#Impl(...) abort$/;"	f
go#implements#Implements	plugged/vim-go/autoload/go/implements.vim	/^function! go#implements#Implements(selected) abort$/;"	f
go#import#SwitchImport	plugged/vim-go/autoload/go/import.vim	/^function! go#import#SwitchImport(enabled, localname, path, bang) abort$/;"	f
go#issue#New	plugged/vim-go/autoload/go/issue.vim	/^function! go#issue#New() abort$/;"	f
go#job#Options	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Options(args)$/;"	f
go#job#Spawn	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Spawn(cmd, args)$/;"	f
go#job#Start	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Start(cmd, options)$/;"	f
go#job#Stop	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Stop(job) abort$/;"	f
go#job#Wait	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Wait(job) abort$/;"	f
go#keyify#Keyify	plugged/vim-go/autoload/go/keyify.vim	/^function! go#keyify#Keyify()$/;"	f
go#lint#Diagnostics	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Diagnostics(bang, ...) abort$/;"	f
go#lint#Errcheck	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Errcheck(bang, ...) abort$/;"	f
go#lint#Golint	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Golint(bang, ...) abort$/;"	f
go#lint#Gometa	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Gometa(bang, autosave, ...) abort$/;"	f
go#lint#ToggleMetaLinterAutoSave	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#ToggleMetaLinterAutoSave() abort$/;"	f
go#lint#Vet	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Vet(bang, ...) abort$/;"	f
go#list#Clean	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Clean(listtype) abort$/;"	f
go#list#Close	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Close(listtype) abort$/;"	f
go#list#Get	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Get(listtype) abort$/;"	f
go#list#JumpToFirst	plugged/vim-go/autoload/go/list.vim	/^function! go#list#JumpToFirst(listtype) abort$/;"	f
go#list#Parse	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Parse(listtype, items, title, add) abort$/;"	f
go#list#ParseFormat	plugged/vim-go/autoload/go/list.vim	/^function! go#list#ParseFormat(listtype, errformat, items, title, add) abort$/;"	f
go#list#Populate	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Populate(listtype, items, title) abort$/;"	f
go#list#Type	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Type(for) abort$/;"	f
go#list#Window	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Window(listtype, ...) abort$/;"	f
go#lsp#AddWorkspaceDirectory	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#AddWorkspaceDirectory(...) abort$/;"	f
go#lsp#AnalyzeFile	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#AnalyzeFile(fname) abort$/;"	f
go#lsp#Callers	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Callers(fname, line, col, handler) abort$/;"	f
go#lsp#CleanWorkspaces	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#CleanWorkspaces() abort$/;"	f
go#lsp#ClearDiagnosticHighlights	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#ClearDiagnosticHighlights() abort$/;"	f
go#lsp#Completion	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Completion(fname, line, col, handler) abort$/;"	f
go#lsp#DebugBrowser	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DebugBrowser() abort$/;"	f
go#lsp#Definition	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Definition(fname, line, col, handler) abort$/;"	f
go#lsp#Diagnostics	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Diagnostics(...) abort$/;"	f
go#lsp#DidChange	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidChange(fname) abort$/;"	f
go#lsp#DidClose	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidClose(fname) abort$/;"	f
go#lsp#DidOpen	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidOpen(fname) abort$/;"	f
go#lsp#Doc	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Doc() abort$/;"	f
go#lsp#DocLink	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DocLink() abort$/;"	f
go#lsp#Exit	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Exit() abort$/;"	f
go#lsp#FillStruct	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#FillStruct() abort$/;"	f
go#lsp#Format	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Format() abort$/;"	f
go#lsp#GetInfo	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#GetInfo()$/;"	f
go#lsp#Hover	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Hover(fname, line, col, handler) abort$/;"	f
go#lsp#Implements	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Implements(fname, line, col, handler) abort$/;"	f
go#lsp#Imports	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Imports() abort$/;"	f
go#lsp#Info	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Info(showstatus)$/;"	f
go#lsp#Referrers	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Referrers(fname, line, col, handler) abort$/;"	f
go#lsp#Rename	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Rename(newName) abort$/;"	f
go#lsp#ResetWorkspaceDirectories	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#ResetWorkspaceDirectories() abort$/;"	f
go#lsp#Restart	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Restart() abort$/;"	f
go#lsp#SameIDs	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#SameIDs(showstatus, fname, line, col, handler) abort$/;"	f
go#lsp#TypeDef	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#TypeDef(fname, line, col, handler) abort$/;"	f
go#lsp#completionitemkind#IsFunction	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#IsFunction(kind) abort$/;"	f
go#lsp#completionitemkind#IsMethod	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#IsMethod(kind) abort$/;"	f
go#lsp#completionitemkind#Vim	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#Vim(kind) abort$/;"	f
go#lsp#lsp#Position	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#Position(...)$/;"	f
go#lsp#lsp#PositionOf	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#PositionOf(content, units, ...) abort$/;"	f
go#lsp#lsp#SeverityToErrorType	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#SeverityToErrorType(severity) abort$/;"	f
go#lsp#message#ApplyWorkspaceEditResponse	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ApplyWorkspaceEditResponse(ok) abort$/;"	f
go#lsp#message#ChangeWorkspaceFolders	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ChangeWorkspaceFolders(add, remove) abort$/;"	f
go#lsp#message#CodeActionFillStruct	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionFillStruct(file, line, col) abort$/;"	f
go#lsp#message#CodeActionImports	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionImports(file) abort$/;"	f
go#lsp#message#CodeActionRefactorRewrite	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionRefactorRewrite(file, startline, startcol, endline, endcol) abort$/;"	f
go#lsp#message#Completion	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Completion(file, line, col) abort$/;"	f
go#lsp#message#ConfigurationResult	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ConfigurationResult(items) abort$/;"	f
go#lsp#message#Definition	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Definition(file, line, col) abort$/;"	f
go#lsp#message#DidChange	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidChange(file, content, version) abort$/;"	f
go#lsp#message#DidClose	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidClose(file) abort$/;"	f
go#lsp#message#DidOpen	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidOpen(file, content, version) abort$/;"	f
go#lsp#message#ExecuteCommand	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ExecuteCommand(cmd, args) abort$/;"	f
go#lsp#message#Exit	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Exit() abort$/;"	f
go#lsp#message#Format	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Format(file) abort$/;"	f
go#lsp#message#Hover	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Hover(file, line, col) abort$/;"	f
go#lsp#message#Implementation	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Implementation(file, line, col) abort$/;"	f
go#lsp#message#IncomingCalls	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#IncomingCalls(item) abort$/;"	f
go#lsp#message#Initialize	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Initialize(wd) abort$/;"	f
go#lsp#message#Initialized	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Initialized() abort$/;"	f
go#lsp#message#PrepareCallHierarchy	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#PrepareCallHierarchy(file, line, col) abort$/;"	f
go#lsp#message#PrepareRename	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#PrepareRename(file, line, col) abort$/;"	f
go#lsp#message#References	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#References(file, line, col) abort$/;"	f
go#lsp#message#Rename	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Rename(file, line, col, newName) abort$/;"	f
go#lsp#message#Shutdown	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Shutdown() abort$/;"	f
go#lsp#message#TypeDefinition	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#TypeDefinition(file, line, col) abort$/;"	f
go#lsp#message#WorkspaceFoldersResult	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#WorkspaceFoldersResult(dirs) abort$/;"	f
go#mod#Format	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#Format() abort$/;"	f
go#mod#ToggleModFmtAutoSave	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#ToggleModFmtAutoSave() abort$/;"	f
go#mod#update_file	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#update_file(source, target)$/;"	f
go#package#Complete	plugged/vim-go/autoload/go/package.vim	/^function! go#package#Complete(ArgLead, CmdLine, CursorPos) abort$/;"	f
go#package#CompleteMembers	plugged/vim-go/autoload/go/package.vim	/^function! go#package#CompleteMembers(package, member) abort$/;"	f
go#package#FromPath	plugged/vim-go/autoload/go/package.vim	/^function! go#package#FromPath(arg) abort$/;"	f
go#package#ImportPath	plugged/vim-go/autoload/go/package.vim	/^function! go#package#ImportPath() abort$/;"	f
go#package#InGOPATH	plugged/vim-go/autoload/go/package.vim	/^function! go#package#InGOPATH() abort$/;"	f
go#path#BinPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#BinPath() abort$/;"	f
go#path#CheckBinPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#CheckBinPath(binpath) abort$/;"	f
go#path#Default	plugged/vim-go/autoload/go/path.vim	/^function! go#path#Default() abort$/;"	f
go#path#FromURI	plugged/vim-go/autoload/go/path.vim	/^function! go#path#FromURI(uri) abort$/;"	f
go#path#GoPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#GoPath(...) abort$/;"	f
go#path#ToURI	plugged/vim-go/autoload/go/path.vim	/^function! go#path#ToURI(path)$/;"	f
go#play#Share	plugged/vim-go/autoload/go/play.vim	/^function! go#play#Share(count, line1, line2) abort$/;"	f
go#promise#New	plugged/vim-go/autoload/go/promise.vim	/^function! go#promise#New(fn, timeout, default) abort$/;"	f
go#referrers#Referrers	plugged/vim-go/autoload/go/referrers.vim	/^function! go#referrers#Referrers(selected) abort$/;"	f
go#rename#Complete	plugged/vim-go/autoload/go/rename.vim	/^function! go#rename#Complete(lead, cmdline, cursor)$/;"	f
go#rename#Rename	plugged/vim-go/autoload/go/rename.vim	/^function! go#rename#Rename(bang, ...) abort$/;"	f
go#statusline#Clear	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Clear(timer_id) abort$/;"	f
go#statusline#Show	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Show() abort$/;"	f
go#statusline#Update	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Update(status_dir, status) abort$/;"	f
go#tags#Add	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#Add(start, end, count, ...) abort$/;"	f
go#tags#Remove	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#Remove(start, end, count, ...) abort$/;"	f
go#tags#run	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#run(start, end, offset, mode, fname, test_mode, ...) abort$/;"	f
go#template#ToggleAutoCreate	plugged/vim-go/autoload/go/template.vim	/^function! go#template#ToggleAutoCreate() abort$/;"	f
go#template#create	plugged/vim-go/autoload/go/template.vim	/^function! go#template#create() abort$/;"	f
go#term#ToggleCloseOnExit	plugged/vim-go/autoload/go/term.vim	/^function! go#term#ToggleCloseOnExit() abort$/;"	f
go#term#new	plugged/vim-go/autoload/go/term.vim	/^function! go#term#new(bang, cmd, errorformat) abort$/;"	f
go#term#newmode	plugged/vim-go/autoload/go/term.vim	/^function! go#term#newmode(bang, cmd, errorformat, mode) abort$/;"	f
go#test#Func	plugged/vim-go/autoload/go/test.vim	/^function! go#test#Func(bang, ...) abort$/;"	f
go#test#Test	plugged/vim-go/autoload/go/test.vim	/^function! go#test#Test(bang, compile, ...) abort$/;"	f
go#textobj#Comment	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#Comment(mode) abort$/;"	f
go#textobj#Function	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#Function(mode) abort$/;"	f
go#textobj#FunctionJump	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#FunctionJump(mode, direction) abort$/;"	f
go#textobj#FunctionLocation	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#FunctionLocation(direction, cnt) abort$/;"	f
go#tool#Deps	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Deps() abort$/;"	f
go#tool#DescribeBalloon	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#DescribeBalloon()$/;"	f
go#tool#Exists	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Exists(importpath) abort$/;"	f
go#tool#Files	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Files(...) abort$/;"	f
go#tool#Imports	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Imports() abort$/;"	f
go#tool#Info	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Info(showstatus) abort$/;"	f
go#tool#PackageName	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#PackageName() abort$/;"	f
go#tool#ValidFiles	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#ValidFiles(...)$/;"	f
go#ui#CloseWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#CloseWindow() abort$/;"	f
go#ui#GetReturnWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#GetReturnWindow() abort$/;"	f
go#ui#OpenDefinition	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#OpenDefinition(filter) abort$/;"	f
go#ui#OpenWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#OpenWindow(title, content, filetype) abort$/;"	f
go#uri#Decode	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#Decode(value) abort$/;"	f
go#uri#Encode	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#Encode(value) abort$/;"	f
go#uri#EncodePath	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#EncodePath(value) abort$/;"	f
go#util#Chdir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Chdir(dir) abort$/;"	f
go#util#ClearHighlights	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ClearHighlights(group) abort$/;"	f
go#util#EchoError	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoError(msg)$/;"	f
go#util#EchoInfo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoInfo(msg)$/;"	f
go#util#EchoProgress	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoProgress(msg)$/;"	f
go#util#EchoSuccess	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoSuccess(msg)$/;"	f
go#util#EchoWarning	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoWarning(msg)$/;"	f
go#util#Exec	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Exec(cmd, ...) abort$/;"	f
go#util#ExecInDir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ExecInDir(cmd, ...) abort$/;"	f
go#util#ExecInWorkDir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ExecInWorkDir(cmd, wd, ...) abort$/;"	f
go#util#GetLines	plugged/vim-go/autoload/go/util.vim	/^function! go#util#GetLines()$/;"	f
go#util#HasDebug	plugged/vim-go/autoload/go/util.vim	/^function! go#util#HasDebug(flag)$/;"	f
go#util#HighlightPositions	plugged/vim-go/autoload/go/util.vim	/^function! go#util#HighlightPositions(group, pos) abort$/;"	f
go#util#IsMac	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsMac() abort$/;"	f
go#util#IsUsingCygwinShell	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsUsingCygwinShell()$/;"	f
go#util#IsWin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsWin() abort$/;"	f
go#util#Join	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Join(...) abort$/;"	f
go#util#LineEnding	plugged/vim-go/autoload/go/util.vim	/^function! go#util#LineEnding() abort$/;"	f
go#util#ModuleRoot	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ModuleRoot(...) abort$/;"	f
go#util#Offset	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Offset(line, col) abort$/;"	f
go#util#OffsetCursor	plugged/vim-go/autoload/go/util.vim	/^function! go#util#OffsetCursor() abort$/;"	f
go#util#OpenBrowser	plugged/vim-go/autoload/go/util.vim	/^function! go#util#OpenBrowser(url) abort$/;"	f
go#util#ParseErrors	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ParseErrors(lines) abort$/;"	f
go#util#PathListSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#PathListSep() abort$/;"	f
go#util#PathSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#PathSep() abort$/;"	f
go#util#SetEnv	plugged/vim-go/autoload/go/util.vim	/^function! go#util#SetEnv(name, value) abort$/;"	f
go#util#ShellError	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ShellError() abort$/;"	f
go#util#Shellescape	plugged/vim-go/autoload/go/util.vim	/^fu! go#util#Shellescape(arg)$/;"	f
go#util#Shelljoin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Shelljoin(arglist, ...) abort$/;"	f
go#util#Shelllist	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Shelllist(arglist, ...) abort$/;"	f
go#util#ShowInfo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ShowInfo(info)$/;"	f
go#util#StripPathSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#StripPathSep(path) abort$/;"	f
go#util#StripTrailingSlash	plugged/vim-go/autoload/go/util.vim	/^function! go#util#StripTrailingSlash(paths) abort$/;"	f
go#util#System	plugged/vim-go/autoload/go/util.vim	/^function! go#util#System(str, ...) abort$/;"	f
go#util#TestName	plugged/vim-go/autoload/go/util.vim	/^function go#util#TestName() abort$/;"	f
go#util#Windo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Windo(command) abort$/;"	f
go#util#archive	plugged/vim-go/autoload/go/util.vim	/^function! go#util#archive()$/;"	f
go#util#camelcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#camelcase(word) abort$/;"	f
go#util#env	plugged/vim-go/autoload/go/util.vim	/^function! go#util#env(key) abort$/;"	f
go#util#goarch	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goarch() abort$/;"	f
go#util#gobin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gobin() abort$/;"	f
go#util#gomod	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gomod() abort$/;"	f
go#util#gomodcache	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gomodcache() abort$/;"	f
go#util#goos	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goos() abort$/;"	f
go#util#gopath	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gopath() abort$/;"	f
go#util#goroot	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goroot() abort$/;"	f
go#util#has_job	plugged/vim-go/autoload/go/util.vim	/^function! go#util#has_job(...) abort$/;"	f
go#util#hostosarch	plugged/vim-go/autoload/go/util.vim	/^function! go#util#hostosarch() abort$/;"	f
go#util#pascalcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#pascalcase(word) abort$/;"	f
go#util#snakecase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#snakecase(word) abort$/;"	f
go#util#snippetcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#snippetcase(word) abort$/;"	f
go#util#tempdir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#tempdir(prefix) abort$/;"	f
go_packages	plugged/vim-go/autoload/go/impl.vim	/^function! s:go_packages(dirs, arglead) abort$/;"	f
godocWord	plugged/vim-go/autoload/go/doc.vim	/^function! s:godocWord(args) abort$/;"	f
gofiletype_post	plugged/vim-go/plugin/go.vim	/^function! s:gofiletype_post()$/;"	f
gofiletype_pre	plugged/vim-go/plugin/go.vim	/^function! s:gofiletype_pre()$/;"	f
golangcilintcmd	plugged/vim-go/autoload/go/lint.vim	/^function! s:golangcilintcmd(bin_path, haslinter)$/;"	f
gometa	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa(metalinter) abort$/;"	f
gometa_importabs	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa_importabs(metalinter) abort$/;"	f
gometa_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa_multiple(metalinter) abort$/;"	f
gometaautosave	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometaautosave(metalinter, withList) abort$/;"	f
gometaautosave_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometaautosave_multiple(metalinter) abort$/;"	f
gomod	plugged/vim-go/ftdetect/gofiletype.vim	/^fun! s:gomod()$/;"	f
goroutineID	plugged/vim-go/autoload/go/debug.vim	/^function! s:goroutineID() abort$/;"	f
gotest#assert_buffer	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#assert_buffer(skipHeader, want) abort$/;"	f
gotest#assert_fixture	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#assert_fixture(path) abort$/;"	f
gotest#assert_quickfix	plugged/vim-go/autoload/gotest.vim	/^func! gotest#assert_quickfix(got, want) abort$/;"	f
gotest#load_fixture	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#load_fixture(path) abort$/;"	f
gotest#write_file	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#write_file(path, contents) abort$/;"	f
goto_file	plugged/vim-go/autoload/go/debug.vim	/^function! s:goto_file() abort$/;"	f
goto_markedwin	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
goto_tagbar	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
goto_win	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
gsub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
guess_table_params_from_content	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:guess_table_params_from_content()$/;"	f
guess_table_params_from_content_frequency_based	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:guess_table_params_from_content_frequency_based()$/;"	f
guru_cmd	plugged/vim-go/autoload/go/guru.vim	/^function! s:guru_cmd(args) range abort$/;"	f
gutentags#add_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave_pre	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#remove_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
handle	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def handle(self):$/;"	m	class:NvimHandler
handle	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def handle(self):$/;"	m	class:VimHandler
handleCodeAction	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleCodeAction(kind, cmd, msg) abort dict$/;"	f
handleCodeActionError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleCodeActionError(filename, msg) abort dict$/;"	f
handleFormat	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleFormat(msg) abort dict$/;"	f
handleFormatError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleFormatError(filename, msg) abort dict$/;"	f
handleImplements	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleImplements(next, msg) abort dict$/;"	f
handleImplementsError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleImplementsError(next, error) abort dict$/;"	f
handleLeftClick	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
handleLocations	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleLocations(next, msg) abort$/;"	f
handleMiddleMouse	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
handleNextInProgress	plugged/vim-go/autoload/go/debug.vim	/^function! s:handleNextInProgress(res)$/;"	f
handleRPCResult	plugged/vim-go/autoload/go/debug.vim	/^function! s:handleRPCResult(resp) abort$/;"	f
handleReferences	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleReferences(next, msg) abort dict$/;"	f
handleRename	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleRename(msg) abort dict$/;"	f
handleRenameError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleRenameError(msg) abort dict$/;"	f
handle_call	plugged/vim-elixir/spec/indent/def_spec.rb	/^    def handle_call({:release_lock, key}, _from, state) do$/;"	f
handle_call	plugged/vim-elixir/spec/indent/keyword_spec.rb	/^  def handle_call({:get_in_line_for_lock, key}, from, state) do$/;"	f
handle_call	plugged/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop, _from, [h|stack]) do$/;"	f
handle_call	plugged/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop,$/;"	f
handle_call	plugged/vim-elixir/spec/syntax/variable_spec.rb	/^    def handle_call(:pop)$/;"	f
handle_exit	plugged/vim-go/autoload/go/term.vim	/^func s:handle_exit(job_id, exit_status, state) abort$/;"	f
handle_info	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^  def handle_info(:tick, state = %{policy_iteration: []}) do$/;"	f	class:name.name.f.f.hello
handle_list_function_args	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_function_args(check_errors, res) abort$/;"	f
handle_list_local_vars	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_local_vars(check_errors, res) abort$/;"	f
handle_set	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_set(check_errors, res) abort$/;"	f
handle_stack_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_stack_response(command, check_errors, res) abort$/;"	f
handle_staleness_check_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_staleness_check_response(filename, check_errors, res) abort$/;"	f
handle_test_response	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:handle_test_response(buffer, id, path, expr, bang, message) abort$/;"	f
handle_with	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:handle_with(start_lnum, start_col, context)$/;"	f
handle_worker_error	plugged/rainbow_csv/rbql_core/vim_rbql.js	/^function handle_worker_error(exception) {$/;"	f
handle_worker_success	plugged/rainbow_csv/rbql_core/vim_rbql.js	/^function handle_worker_success(warnings, output_path) {$/;"	f
handler	plugged/vim-go/autoload/go/auto.vim	/^function! s:handler(timer_id)$/;"	f
handler	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^        def handler(obj):$/;"	f	function:walk.from_client
handler	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^    def handler(obj):$/;"	f	function:to_client
hardRefreshNerdTree	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:hardRefreshNerdTree()$/;"	f
hasPrefix	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:hasPrefix(text, prefix) abort$/;"	f
has_custom_colors	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:has_custom_colors()$/;"	f
has_python_27	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:has_python_27()$/;"	f
has_unix	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    has_unix = False$/;"	v
has_unix	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    has_unix = True$/;"	v	class:ThreadedTCPServer
hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
hashlib	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    import hashlib$/;"	i
health#deoplete#check	plugged/deoplete.nvim/autoload/health/deoplete.vim	/^function! health#deoplete#check() abort$/;"	f
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^      def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello
hello	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	plugged/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f
hello	plugged/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f	class:hello
hello	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def hello do$/;"	f	class:name.name.f.f
hello	plugged/vim-elixir/spec/indent/def_spec.rb	/^  def hello do$/;"	f	class:handle_call
hello	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def hello do$/;"	f	class:test.test.test.build_command.build_command.build_command
hello_world	plugged/vim-elixir/spec/syntax/list_spec.rb	/^    def hello_world do$/;"	f
hex2rgb	plugged/vim-solarized8/scripts/solarized8.sh	/^hex2rgb() {$/;"	f
hex_to_string	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:hex_to_string(src)$/;"	f
hi	plugged/eleline.vim/plugin/eleline.vim	/^function! s:hi(group, dark, light, ...) abort$/;"	f
hi	plugged/seoul256.vim/colors/seoul256.vim	/^function! s:hi(item, fg, bg)$/;"	f
hi	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hi do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hi	plugged/vim-go/syntax/go.vim	/^function! s:hi()$/;"	f
hi_statusline	plugged/eleline.vim/plugin/eleline.vim	/^function! s:hi_statusline() abort$/;"	f
highlight	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def highlight(self):$/;"	m	class:Source
highlightFromGroup	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:highlightFromGroup(group) abort$/;"	f
highlightMatches	plugged/vim-go/autoload/go/lsp.vim	/^function! s:highlightMatches(errorMatches, warningMatches) abort$/;"	f
history_path	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^history_path = os.path.join(os.path.expanduser("~"), ".rbql_py_query_history")$/;"	v
histswap	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:histswap(list) abort$/;"	f
hoverHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:hoverHandler(next, msg) abort dict$/;"	f
how_are_you	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def how_are_you do$/;"	f	class:name.name.f.f
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8.vim	/^    let hs_highlight_boolean=1$/;"	v
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8.vim	/^  let hs_highlight_boolean=1$/;"	v
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let hs_highlight_boolean=1$/;"	v
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8_flat.vim	/^  let hs_highlight_boolean=1$/;"	v
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let hs_highlight_boolean=1$/;"	v
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8_high.vim	/^  let hs_highlight_boolean=1$/;"	v
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let hs_highlight_boolean=1$/;"	v
hs_highlight_boolean	plugged/vim-solarized8/colors/solarized8_low.vim	/^  let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8.vim	/^    let hs_highlight_delimiters=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8.vim	/^  let hs_highlight_delimiters=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8_flat.vim	/^    let hs_highlight_delimiters=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8_flat.vim	/^  let hs_highlight_delimiters=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8_high.vim	/^    let hs_highlight_delimiters=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8_high.vim	/^  let hs_highlight_delimiters=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8_low.vim	/^    let hs_highlight_delimiters=1$/;"	v
hs_highlight_delimiters	plugged/vim-solarized8/colors/solarized8_low.vim	/^  let hs_highlight_delimiters=1$/;"	v
i	plugged/vim-elixir/spec/spec_helper.rb	/^  def i(str)$/;"	f	class:Differ
ic	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ic :<c-u>call go#textobj#Comment('i')<cr>$/;"	m
if	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> if :<c-u>call go#textobj#Function('i')<cr>$/;"	m
ignored_region	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:ignored_region()$/;"	f
impl_ns	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:impl_ns(...) abort$/;"	f
import_plugin	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def import_plugin(path: str, source: str,$/;"	f
importlib	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import importlib.util$/;"	i
importlib	plugged/nvim-yarp/pythonx/yarp.py	/^import importlib$/;"	i
importlib	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import importlib$/;"	i
includes_file	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:includes_file(file, path) abort$/;"	f
incomingCallsHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:incomingCallsHandler(next, msg) abort dict$/;"	f
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, _val):$/;"	m	class:CountAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, val):$/;"	m	class:ArrayAggAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, val):$/;"	m	class:AvgAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, val):$/;"	m	class:MaxAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, val):$/;"	m	class:MedianAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, val):$/;"	m	class:MinAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, val):$/;"	m	class:SumAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, val):$/;"	m	class:VarianceAggregator
increment	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def increment(self, key, value):$/;"	m	class:ConstGroupVerifier
indentLine	plugged/indentLine/after/plugin/indentLine.vim	/^augroup indentLine$/;"	a
index_decode_delim	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:index_decode_delim(encoded_delim)$/;"	f
index_encode_delim	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:index_encode_delim(delim)$/;"	f
infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
info	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def info(self, msg: str,$/;"	m	class:LoggingMixin
info	plugged/vim-go/autoload/go/guru.vim	/^function! s:info(exit_val, output, mode)$/;"	f
info	plugged/vim-go/autoload/go/lsp.vim	/^function! s:info(show, msg) abort dict$/;"	f
infoDefinitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:infoDefinitionHandler(next, showstatus, msg) abort dict$/;"	f
infoFromHoverContent	plugged/vim-go/autoload/go/lsp.vim	/^function! s:infoFromHoverContent(content) abort$/;"	f
init	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^init = False$/;"	v
init	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def init(_) do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
init	plugged/vim-elixir/spec/syntax/atom_spec.rb	/^          def init(args) do$/;"	f
initCustomOpenArgs	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
initFoldState	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
initVariable	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:initVariable(var, value) abort$/;"	f
init_aggregator	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function init_aggregator(generator_name, val, post_proc=null) {$/;"	f
init_aggregator	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def init_aggregator(generator_name, val, post_proc=None):$/;"	f
init_ansi_terminal_colors	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def init_ansi_terminal_colors():$/;"	f
init_channel	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^        def init_channel(self,$/;"	m	class:DeopleteHandlers
init_context	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def init_context(self) -> None:$/;"	m	class:Deoplete
init_groups_from_colors	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:init_groups_from_colors()$/;"	f
init_groups_from_links	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:init_groups_from_links()$/;"	f
init_internal_variables	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^function! s:init_internal_variables() abort$/;"	f
init_rb_color_groups	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:init_rb_color_groups()$/;"	f
init_var	plugged/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
initialize	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:initialize()$/;"	f
initialize	plugged/vim-elixir/spec/spec_helper.rb	/^  def initialize$/;"	f	class:Differ
initialize	plugged/vim-elixir/spec/spec_helper.rb	/^  def initialize(vim, type)$/;"	f	class:Buffer
input	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:input(default) abort$/;"	f
inputPrompt	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
inputclose	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:inputclose() abort$/;"	f
inputeval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:inputeval() abort$/;"	f
inputlist	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:inputlist(label, entries) abort$/;"	f
inside	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import datetime # For date operations inside user queries$/;"	i
inside	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import math # For math operations inside user queries$/;"	i
inside	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import os # For system operations inside user queries$/;"	i
install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
instance	plugged/vim-elixir/spec/spec_helper.rb	/^  def self.instance$/;"	F	class:Differ
interactive_mode	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^var interactive_mode = false;$/;"	v
interface_list	plugged/vim-go/autoload/go/impl.vim	/^function! s:interface_list(pkg) abort$/;"	f
interpret_named_csv_format	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function interpret_named_csv_format(format_name) {$/;"	f
interpret_named_csv_format	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def interpret_named_csv_format(format_name):$/;"	f
invalid_keyword_in_aggregate_query_error_msg	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^invalid_keyword_in_aggregate_query_error_msg = '"ORDER BY", "UPDATE" and "DISTINCT" keywords are not allowed in aggregate queries'$/;"	v
io	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^import io$/;"	i
io	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^import io$/;"	i
io	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import io$/;"	i
ip	plugged/vim-elixir/spec/spec_helper.rb	/^  def ip(str)$/;"	f	class:Differ
is	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^        import readline # Module readline is not available on Windows$/;"	i
isDarwin	plugged/vim-devicons/plugin/webdevicons.vim	/^function s:isDarwin()$/;"	f
isEOF	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:isEOF(data) abort$/;"	f
isFoldable	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFoldable	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFolded	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
isFolded	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
isKindheader	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
isKindheader	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
isNormalTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isNormalTag	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isPseudoTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isPseudoTag	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isReady	plugged/vim-go/autoload/go/debug.vim	/^function! s:isReady()$/;"	f
isSplitTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isSplitTag	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
is_ascii	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function is_ascii(str) {$/;"	f
is_ascii	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def is_ascii(s):$/;"	f
is_debug_enabled	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    is_debug_enabled = False$/;"	v	class:LoggingMixin
is_delimited_table	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function is_delimited_table(sampled_lines, delim, policy) {$/;"	f
is_delimited_table	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def is_delimited_table(sampled_lines, delim, policy):$/;"	f
is_exiting	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:is_exiting() abort$/;"	f
is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_method_special_case	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:is_method_special_case(position)$/;"	f
is_mkdCode	plugged/vim-markdown/after/ftplugin/markdown.vim	/^function! s:is_mkdCode(lnum)$/;"	f
is_paren	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:is_paren()$/;"	f
is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_reader_conditional_special_case	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:is_reader_conditional_special_case(position)$/;"	f
is_skip	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:is_skip(event) abort$/;"	f
is_skip_prev_text	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:is_skip_prev_text(event) abort$/;"	f
is_skip_text	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:is_skip_text(event) abort$/;"	f
is_string_or_comment	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
is_tmp_file	plugged/eleline.vim/plugin/eleline.vim	/^function! s:is_tmp_file() abort$/;"	f
is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
isdir	plugged/vim-devicons/rplugin/python3/denite/filter/devicons_denite_converter.py	/^from os.path import isdir$/;"	i
issuebody	plugged/vim-go/autoload/go/issue.vim	/^function! s:issuebody() abort$/;"	f
iteritems6	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def iteritems6(x):$/;"	f
job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
join_by_delim	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def join_by_delim(self, fields):$/;"	m	class:CSVWriter
json	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import json$/;"	i
json	plugged/vim-fireplace/pythonx/fireplace.py	/^import json$/;"	i
json	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import json$/;"	i
json	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import json$/;"	i
json_callback	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:json_callback(url, state, requests, sessions, job, msg) abort$/;"	f
json_send	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:json_send(job, msg) abort$/;"	f
json_start	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:json_start(command, out_cb, exit_cb) abort$/;"	f
jumpToChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
jumpToFirstChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
jumpToLastChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
jumpToNextHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToNextHunk(node)$/;"	f
jumpToNextSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
jumpToParent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
jumpToPrevHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToPrevHunk(node)$/;"	f
jumpToPrevSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
jumpToRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
jumpToSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
jump_to_declaration_cb	plugged/vim-go/autoload/go/def.vim	/^function! s:jump_to_declaration_cb(mode, bin_name, job, exit_status, data) abort dict$/;"	f
key	plugged/vim-markdown/ftplugin/markdown.vim	/^        let key = matchstr(s:filetype, "[^=]*")$/;"	v
keyword	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
kill_yarp	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:kill_yarp() abort$/;"	f
known_files.get	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
known_files.has	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
known_files.put	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
known_files.rm	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
l:bin_path	plugged/vim-go/autoload/go/lsp.vim	/^  let l:bin_path = go#path#CheckBinPath("gopls")$/;"	v
l:cmd	plugged/vim-go/autoload/go/lsp.vim	/^      let l:cmd = extend(l:cmd, ['-debug', 'localhost:0'])$/;"	v
l:cmd	plugged/vim-go/autoload/go/lsp.vim	/^  let l:cmd = [l:bin_path]$/;"	v
l:cmdopts	plugged/vim-go/autoload/go/lsp.vim	/^  let l:cmdopts = go#config#GoplsOptions()$/;"	v
l:completion	plugged/vim-go/autoload/go/complete.vim	/^    let l:completion = go#lsp#Completion(expand('%:p'), l:line, l:col, funcref('s:handler', [l:state]))$/;"	v
l:idx	plugged/vim-go/autoload/go/lsp.vim	/^      let l:idx = stridx(l:item, '-debug')$/;"	v
l:lsp	plugged/vim-go/autoload/go/lsp.vim	/^  let l:lsp.job = go#job#Start(l:cmd+l:cmdopts, l:opts)$/;"	v
l:needsDebug	plugged/vim-go/autoload/go/lsp.vim	/^        let l:needsDebug = 0$/;"	v
l:needsDebug	plugged/vim-go/autoload/go/lsp.vim	/^    let l:needsDebug = 1$/;"	v
l:opts	plugged/vim-go/autoload/go/lsp.vim	/^  let l:opts = {$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^    let l:start_options.in_io = "file"$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^    let l:start_options.in_name = l:tmpname$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^  let l:start_options.close_cb = funcref('s:close_cb', [l:start_options.close_cb], l:state)$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^  let l:start_options.exit_cb = funcref('s:exit_cb', [l:start_options.exit_cb], l:state)$/;"	v
l:tmpname	plugged/vim-go/autoload/go/def.vim	/^    let l:tmpname = tempname()$/;"	v
last_find	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^def last_find(s: str, needles: typing.List[str]) -> typing.Optional[str]:$/;"	f
last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lcm	plugged/rainbow/autoload/rainbow_main.vim	/^fun s:lcm(a, b)$/;"	f
left	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:left(s)$/;"	f
let.,	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^    let well_known_extensions = {',': '.csv', '\\t': '.tsv'};$/;"	p
let.RbqlIOHandlingError	plugged/rainbow_csv/rbql_core/vim_rbql.js	/^        'RbqlIOHandlingError': 'IO handling'$/;"	p
let.RbqlParsingError	plugged/rainbow_csv/rbql_core/vim_rbql.js	/^        'RbqlParsingError': 'query parsing',$/;"	p
let.RbqlRuntimeError	plugged/rainbow_csv/rbql_core/vim_rbql.js	/^        'RbqlRuntimeError': 'query execution',$/;"	p
let.t	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^    let well_known_extensions = {',': '.csv', '\\t': '.tsv'};$/;"	p
like	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function like(text, pattern) {$/;"	f
like	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def like(text, pattern):$/;"	f
like_to_regex	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function like_to_regex(pattern) {$/;"	f
like_to_regex	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def like_to_regex(pattern):$/;"	f
line_separators	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^line_separators = ['\\n', '\\r\\n', '\\r']$/;"	v
linechars	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
lineinfile	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lineinfile(fname, line) abort$/;"	f
lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
lint_job	plugged/vim-go/autoload/go/lint.vim	/^function! s:lint_job(metalinter, args, bang, autosave)$/;"	f
list_breakpoints	plugged/vim-go/autoload/go/debug.vim	/^function! s:list_breakpoints()$/;"	f
list_goroutines_handler	plugged/vim-go/autoload/go/debug.vim	/^function s:list_goroutines_handler(currentGoroutineID, check_errors, res) abort$/;"	f
listtype	plugged/vim-go/autoload/go/list.vim	/^function! s:listtype(listtype) abort$/;"	f
load_external_module	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def load_external_module(base: str, module: str) -> None:$/;"	f
load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
loaded_nerd_comments	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_vim_devicons	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_devicons() abort$/;"	f
loaded_vim_nerdtree_syntax_highlight	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_syntax_highlight() abort$/;"	f
loaded_vim_nerdtree_tabs	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_tabs() abort$/;"	f
locate_statements	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def locate_statements(rbql_expression):$/;"	f
lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
log_format	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^log_format = '%(asctime)s %(levelname)-8s [%(process)d] (%(name)s) %(message)s'$/;"	v
log_message_cooldown	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^log_message_cooldown = 0.5$/;"	v
logger	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^from deoplete import logger$/;"	i
logger	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^from deoplete import logger$/;"	i
logger	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from deoplete import logger$/;"	i
logger	plugged/vim-go/autoload/go/debug.vim	/^function! s:logger(prefix, ch, msg) abort$/;"	f
logger	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^logger = logging.getLogger(__name__)$/;"	v
logging	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^import logging$/;"	i
logging	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import logging$/;"	i
logmessages	plugged/vim-go/scripts/runtest.vim	/^function! s:logmessages() abort$/;"	f
logmethod	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^def logmethod(func: FUNC) -> typing.Callable[[FUNC], FUNC]:$/;"	f
logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lol	plugged/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^    def lol do$/;"	f
lol	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def lol do$/;"	f
lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
lspfactory.get	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lspfactory.get() dict abort$/;"	f
lspfactory.reset	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lspfactory.reset() dict abort$/;"	f
lv#Term	autoload/lv.vim	/^function! lv#Term()$/;"	f
m	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var m = Math.floor(cur_aggr.length \/ 2);$/;"	v
macroexpand	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:macroexpand(fn, form) abort$/;"	f
macroexpand1op	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:macroexpand1op(type) abort$/;"	f
macroexpandop	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:macroexpandop(type) abort$/;"	f
main	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^def main(serveraddr):$/;"	f
main	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def main(self, name: str, args: typing.List[typing.Any],$/;"	m	class:Child
main	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function main() {$/;"	f
main	plugged/rainbow_csv/rbql_core/rbql/__main__.py	/^from .rbql_main import main$/;"	i
main	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def main():$/;"	f
main	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def main():$/;"	f
main	plugged/rainbow_csv/rbql_core/vim_rbql.js	/^function main() {$/;"	f
main	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^def main():$/;"	f
main	plugged/vim-fireplace/pythonx/fireplace.py	/^def main(host = None, port = None, *args):$/;"	f
main.scheme.--input	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^        '--input': {'help': 'Read csv table from FILE instead of stdin. Required in interactive mode', 'metavar': 'FILE'},$/;"	p
main_loop	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^    def main_loop(self, stdout: typing.Any) -> None:$/;"	m	class:Child
main_syntax	plugged/vim-elixir/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
main_syntax	plugged/vim-elixir/syntax/elixir.vim	/^  let main_syntax = "elixir"$/;"	v
make_candidates	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^        def make_candidates(row):$/;"	f	function:Source.gather_candidates
make_column_variable	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def make_column_variable(column_name):$/;"	f
make_inconsistent_num_fields_warning	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function make_inconsistent_num_fields_warning(table_name, inconsistent_records_info) {$/;"	f
make_inconsistent_num_fields_warning	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def make_inconsistent_num_fields_warning(table_name, inconsistent_records_info):$/;"	f
make_inconsistent_num_fields_warning	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def make_inconsistent_num_fields_warning(table_name, inconsistent_records_info):$/;"	f
make_random_comment_lines	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def make_random_comment_lines(num_lines, comment_prefix, delim_to_test):$/;"	f
make_random_csv_fields_naive	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def make_random_csv_fields_naive(num_fields, max_field_len):$/;"	f
make_random_csv_records_naive	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def make_random_csv_records_naive():$/;"	f
make_random_decoded_binary_csv_entry	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def make_random_decoded_binary_csv_entry(min_len, max_len, restricted_chars):$/;"	f
make_random_unicode_entry	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def make_random_unicode_entry(min_len, max_len, restricted_chars):$/;"	f
make_rbql_demo	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:make_rbql_demo(num_fields, rbql_welcome_path)$/;"	f
make_select_line	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:make_select_line(num_fields)$/;"	f
manual_completion_begin	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^        def manual_completion_begin(self, context: Context) -> None:$/;"	m	class:DeopleteHandlers
manual_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
map	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:map(mode, lhs, rhs, ...) abort$/;"	f
map_variables_directly	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def map_variables_directly(query_text, column_names, dst_variables_map):$/;"	f
mapleader	plugged/vim-elixir/test.init.vim	/^let mapleader=","$/;"	v
mark_window	plugged/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
match_one	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:match_one(patterns, string)$/;"	f
match_pairs	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
matchaddpos	plugged/vim-go/autoload/go/util.vim	/^function! s:matchaddpos(group, pos) abort$/;"	f
matchbegin	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchbegin(text, close)$/;"	f
matched_indentkeys	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:matched_indentkeys(input) abort$/;"	f
matchend	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchend(text, open)$/;"	f
math	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import math # For math operations inside user queries$/;"	i
max	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def max(*args, **kwargs):$/;"	f
maybe_map_scope	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:maybe_map_scope(scopestr) abort$/;"	f
median	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^median = MEDIAN$/;"	v
merge_results	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def merge_results(self,$/;"	m	class:AsyncParent
merge_results	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def merge_results(self,$/;"	m	class:SyncParent
message	plugged/vim-go/autoload/go/debug.vim	/^function! s:message(buf, data) abort$/;"	f
metalinterautosavecomplete	plugged/vim-go/autoload/go/lint.vim	/^function! s:metalinterautosavecomplete(metalinter, filepath, job, exit_code, messages)$/;"	f
metalintercmd	plugged/vim-go/autoload/go/lint.vim	/^function! s:metalintercmd(metalinter, haslinter)$/;"	f
method	plugged/vim-elixir/spec/indent/tuples_spec.rb	/^  def method do$/;"	f	class:xpto
migrateVariable	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:migrateVariable(oldv, newv) abort$/;"	f
min	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def min(*args, **kwargs):$/;"	f
module	plugged/nvim-yarp/pythonx/yarp.py	/^module = sys.argv[3]$/;"	v
module	plugged/vim-go/autoload/go/package.vim	/^function! s:module() abort$/;"	f
module_obj	plugged/nvim-yarp/pythonx/yarp.py	/^module_obj = None$/;"	v
monocolumn_join	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def monocolumn_join(self, fields):$/;"	m	class:CSVWriter
msgpack	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^import msgpack$/;"	i
msgpack	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^import msgpack$/;"	i
msgpack	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^import msgpack$/;"	i
msgpack	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import msgpack$/;"	i
my_function	plugged/vim-elixir/spec/indent/with_spec.rb	/^  def my_function do$/;"	f	class:resend_confirmation.create_user
name	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name(param) do$/;"	f	class:name
name	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name(param) do$/;"	f	class:name.name
name	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name, do: IO.puts "bobmarley"$/;"	f
name	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name, do: IO.puts "bobmarley"$/;"	f	class:name
namedtuple	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^from collections import OrderedDict, defaultdict, namedtuple$/;"	i
names	autoload/plug.vim	/^function! s:names(...)$/;"	f
natural_random	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def natural_random(low, high):$/;"	f
needs	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^        pass # Reimplement if your class needs to do something on finish e.g. cleanup$/;"	c	function:RBQLOutputWriter.finish
needs	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^        pass # Reimplement if your class needs to do something on finish e.g. cleanup$/;"	c	function:RBQLTableRegistry.finish
neocb	plugged/vim-go/autoload/go/job.vim	/^function! s:neocb(mode, ch, buf, data, callback)$/;"	f
neooptions	plugged/vim-go/autoload/go/job.vim	/^function! s:neooptions(options)$/;"	f
neovim_rpc#_callback	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_callback()$/;"	f
neovim_rpc#_error	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_error(msg)$/;"	f
neovim_rpc#_nvim_err_write	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_nvim_err_write(msg)$/;"	f
neovim_rpc#_nvim_out_write	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_nvim_out_write(msg)$/;"	f
neovim_rpc#_on_close	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_close(job)$/;"	f
neovim_rpc#_on_exit	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_exit(job,status)$/;"	f
neovim_rpc#_on_stderr	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_stderr(job,data)$/;"	f
neovim_rpc#_on_stdout	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_stdout(job,data)$/;"	f
neovim_rpc#jobstart	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#jobstart(cmd,...)$/;"	f
neovim_rpc#jobstop	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#jobstop(jobid)$/;"	f
neovim_rpc#pyxcall	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#pyxcall(func,...)$/;"	f
neovim_rpc#rpcnotify	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#rpcnotify(channel,event,...)$/;"	f
neovim_rpc#rpcrequest	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#rpcrequest(channel, event, ...)$/;"	f
neovim_rpc#serveraddr	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#serveraddr()$/;"	f
neovim_rpc_methods	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import neovim_rpc_methods$/;"	i
neovim_rpc_protocol	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import neovim_rpc_protocol$/;"	i
neovim_rpc_server_api_info	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^import neovim_rpc_server_api_info$/;"	i
neovim_rpc_server_api_info	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import neovim_rpc_server_api_info$/;"	i
nerdtree#checkForBrowse	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#postSourceActions	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningWindows	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
nerdtreegitplugin	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^augroup nerdtreegitplugin$/;"	a
new	plugged/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.EexBuffer
new	plugged/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.ExBuffer
new	plugged/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.LeexBuffer
new	plugged/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.SurfaceBuffer
newHandlerState	plugged/vim-go/autoload/go/lsp.vim	/^function! s:newHandlerState(statustype) abort$/;"	f
newJob	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:newJob(name, opts) abort$/;"	f
new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
newline_rgx	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^newline_rgx = re.compile('(?:\\r\\n)|\\r|\\n')$/;"	v
newlsp	plugged/vim-go/autoload/go/lsp.vim	/^function! s:newlsp() abort$/;"	f
noop	plugged/vim-go/autoload/go/debug.vim	/^function s:noop(...) abort$/;"	f
noop	plugged/vim-go/autoload/go/lsp.vim	/^function! s:noop(...) abort$/;"	f
noop	plugged/vim-go/autoload/go/util.vim	/^function! s:noop(...) abort dict$/;"	f
noop	plugged/vim-go/plugin/go.vim	/^function! s:noop(...) abort$/;"	f
normalize_cli_key	plugged/rainbow_csv/rbql_core/rbql-js/cli_parser.js	/^function normalize_cli_key(cli_key) {$/;"	f
normalize_delim	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function normalize_delim(delim) {$/;"	f
normalize_delim	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def normalize_delim(delim):$/;"	f
normalize_durations	plugged/vim-go/autoload/go/test_test.vim	/^func! s:normalize_durations(str) abort$/;"	f
normalize_fields	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def normalize_fields(self, fields):$/;"	m	class:CSVWriter
normalize_newlines_in_fields	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def normalize_newlines_in_fields(table):$/;"	f
normalize_warnings	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def normalize_warnings(warnings):$/;"	f
not	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^        import readline # Module readline is not available on Windows$/;"	i
notify	plugged/vim-fireplace/pythonx/fireplace.py	/^    def notify(self, data, i = 0):$/;"	m	class:Connection
notify	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def notify(cls, channel, event, args):$/;"	m	class:NvimHandler
notify	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def notify(cls, cmd=None):$/;"	m	class:VimHandler
notify_exited	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def notify_exited(cls, channel):$/;"	m	class:VimHandler
ns	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:ns(...) abort$/;"	f
numericHighlightGroupInAssignment	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInAssignment(testname, value)$/;"	f
numericHighlightGroupInMultidimensionalSliceElement	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInMultidimensionalSliceElement(testname, value)$/;"	f
numericHighlightGroupInMultidimensionalSliceIndex	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInMultidimensionalSliceIndex(testname, first, second)$/;"	f
numericHighlightGroupInSliceElement	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceElement(testname, value)$/;"	f
numericHighlightGroupInSliceIndex	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceIndex(testname, value)$/;"	f
numericHighlightGroupInSliceSlicing	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceSlicing(testname, from, to)$/;"	f
numeric_conversion_error	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^numeric_conversion_error = 'Unable to convert value "{}" to int or float. MIN, MAX, SUM, AVG, MEDIAN and VARIANCE aggregate functions convert their string arguments to numeric values'$/;"	v
nvim	plugged/nvim-yarp/pythonx/yarp.py	/^nvim = None$/;"	v
nvim_buf_add_highlight	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_add_highlight(buf, src_id, *args):$/;"	f
nvim_buf_clear_highlight	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_clear_highlight(*args):$/;"	f
nvim_buf_get_lines	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_lines(buffer, start, end, *args):$/;"	f
nvim_buf_get_mark	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_mark(buffer, name):$/;"	f
nvim_buf_get_name	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_name(buffer):$/;"	f
nvim_buf_get_number	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_number(buf):$/;"	f
nvim_buf_get_option	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_option(buf, name):$/;"	f
nvim_buf_get_var	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_var(buffer, name):$/;"	f
nvim_buf_line_count	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_line_count(buffer):$/;"	f
nvim_buf_set_lines	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_set_lines(buffer, start, end, err, lines):$/;"	f
nvim_buf_set_option	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_set_option(buf, name, val):$/;"	f
nvim_buf_set_var	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_set_var(buffer, name, val):$/;"	f
nvim_call_function	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_call_function(method, args):$/;"	f
nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
nvim_command	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_command(cmd):$/;"	f
nvim_err_write	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_err_write(s):$/;"	f
nvim_eval	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_eval(expr):$/;"	f
nvim_get_client_info	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_client_info():$/;"	f
nvim_get_current_buf	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_current_buf():$/;"	f
nvim_get_current_line	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_current_line():$/;"	f
nvim_get_current_win	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_current_win():$/;"	f
nvim_get_option	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_option(name):$/;"	f
nvim_get_var	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_var(name):$/;"	f
nvim_get_vvar	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_vvar(name):$/;"	f
nvim_job_exit_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
nvim_job_out_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
nvim_list_bufs	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_list_bufs():$/;"	f
nvim_list_wins	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_list_wins():$/;"	f
nvim_out_write	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_out_write(s):$/;"	f
nvim_set_client_info	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_set_client_info(*args):$/;"	f
nvim_set_option	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_set_option(name, val):$/;"	f
nvim_set_var	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_set_var(name, val):$/;"	f
nvim_win_get_buf	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_buf(window):$/;"	f
nvim_win_get_cursor	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_cursor(window):$/;"	f
nvim_win_get_height	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_height(window):$/;"	f
nvim_win_get_number	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_number(window):$/;"	f
nvim_win_get_option	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_option(window, name):$/;"	f
nvim_win_get_position	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_position(window):$/;"	f
nvim_win_get_var	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_var(window, name):$/;"	f
nvim_win_get_width	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_width(window):$/;"	f
nvim_win_is_valid	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_is_valid(window):$/;"	f
nvim_win_set_height	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_height(window, height):$/;"	f
nvim_win_set_option	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_option(window, name, val):$/;"	f
nvim_win_set_var	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_var(window, name, val):$/;"	f
nvim_win_set_width	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_width(window, width):$/;"	f
obtain_lock	plugged/vim-elixir/spec/indent/receive_spec.rb	/^  def obtain_lock(pid, key, timeout \\\\ 60_000) do$/;"	f
oloredlogs	plugged/vim-markdown/Makefile	/^	build\/html2vimdoc\/bin\/pip install beautifulsoup coloredlogs==4.0 markdown$/;"	m
on	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^        import readline # Module readline is not available on Windows$/;"	i
onCursorHold	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onCursorHold(fname)$/;"	f
onFileUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onFileUpdate(fname)$/;"	f
onGitStatusFailedCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusFailedCB(job) abort$/;"	f
onGitStatusSuccessCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusSuccessCB(job) abort$/;"	f
onGitWorkdirFailedCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirFailedCB(job) abort$/;"	f
onGitWorkdirSuccessCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirSuccessCB(job) abort$/;"	f
onNERDTreeDirChanged	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeDirChanged(path) abort$/;"	f
onNERDTreeInit	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeInit(path) abort$/;"	f
on_complete_done	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:on_complete_done() abort$/;"	f
on_data	plugged/vim-go/autoload/go/debug.vim	/^function! s:on_data(ch, data, ...) dict abort$/;"	f
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^        def on_event(self, context: Context) -> None:$/;"	m	class:DeopleteHandlers
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^    def on_event(self, context: UserContext) -> None:$/;"	m	class:Base
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def on_event(self, context: UserContext) -> None:$/;"	m	class:Base
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^    def on_event(self, user_context: UserContext) -> None:$/;"	m	class:Deoplete
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^    def on_event(self, context: UserContext) -> None:$/;"	m	class:Filter
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def on_event(self, context: UserContext) -> None:$/;"	m	class:_Parent
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^    def on_event(self, context: UserContext) -> None:$/;"	m	class:Source
on_event	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^    def on_event(self, context: UserContext) -> None:$/;"	m	class:Source
on_exit	plugged/eleline.vim/plugin/eleline.vim	/^function! s:on_exit(job_id, data, _event) dict abort$/;"	f
on_exit	plugged/vim-go/autoload/go/job.vim	/^function! s:on_exit(jobid, exitval, event) dict$/;"	f
on_exit	plugged/vim-go/autoload/go/term.vim	/^function! s:on_exit(job_id, exit_status, event) dict abort$/;"	f
on_insert_leave	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:on_insert_leave() abort$/;"	f
on_notification	plugged/nvim-yarp/pythonx/yarp.py	/^def on_notification(method, args):$/;"	f
on_request	plugged/nvim-yarp/pythonx/yarp.py	/^def on_request(method, args):$/;"	f
on_setup	plugged/nvim-yarp/pythonx/yarp.py	/^def on_setup():$/;"	f
on_stderr	plugged/vim-go/autoload/go/job.vim	/^function! s:on_stderr(mode, ch, data, event) dict$/;"	f
on_stdout	plugged/vim-go/autoload/go/job.vim	/^function! s:on_stdout(mode, ch, data, event) dict$/;"	f
on_stdout	plugged/vim-go/autoload/go/term.vim	/^function! s:on_stdout(job_id, data, event) dict abort$/;"	f
oneoff.Client	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:oneoff.Client() dict abort$/;"	f
oneoff.Eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:oneoff.Eval(...) dict abort$/;"	f
oneoff.HasOp	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:oneoff.HasOp(op) abort$/;"	f
oneoff.Path	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:oneoff.Path() dict abort$/;"	f
oneoff.Session	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:oneoff.Session(...) abort$/;"	f
op_guard	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:op_guard(...) abort$/;"	f
op_missing_error	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:op_missing_error(op, ...) abort$/;"	f
openExplorer	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
openFold	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
openFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
openHSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
openHSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
openInNewTab	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
openInNewTabSilent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
openKindFold	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
openNodeRecursively	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
openParents	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
openVSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
openVSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
operations	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import datetime # For date operations inside user queries$/;"	i
operations	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import math # For math operations inside user queries$/;"	i
operations	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import os # For system operations inside user queries$/;"	i
opfunc	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:opfunc(type) abort$/;"	f
os	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^import os$/;"	i
os	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import os # For system operations inside user queries$/;"	i
os	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^import os$/;"	i
os	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^import os$/;"	i
os	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import os$/;"	i
os	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import os$/;"	i
os	plugged/vim-fireplace/pythonx/fireplace.py	/^import os$/;"	i
os	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import os$/;"	i
os	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import os$/;"	i
out_cb	plugged/eleline.vim/plugin/eleline.vim	/^function! s:out_cb(channel, message) abort$/;"	f
out_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:out_cb(ch, msg) abort$/;"	f
out_cb	plugged/vim-go/autoload/go/term.vim	/^func! s:out_cb(channel, msg) dict abort$/;"	f
out_format_names	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^out_format_names = ['csv', 'tsv', 'input']$/;"	v
output_response	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:output_response(response) abort$/;"	f
overlap_length	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^def overlap_length(left: str, next_input_words: typing.List[str]) -> int:$/;"	f
overlap_length	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^from deoplete.filter.converter_remove_overlap import overlap_length$/;"	i
package	plugged/vim-go/autoload/go/debug.vim	/^function! s:package(args)$/;"	f
parent	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^import deoplete.parent$/;"	i
parse	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def parse(self, val):$/;"	m	class:NumHandler
parse_array_variables	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function parse_array_variables(query_text, prefix, dst_variables_map) {$/;"	f
parse_array_variables	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def parse_array_variables(query_text, prefix, dst_variables_map):$/;"	f
parse_attribute_variables	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def parse_attribute_variables(query_text, prefix, column_names, column_names_source, dst_variables_map):$/;"	f
parse_basic_variables	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function parse_basic_variables(query_text, prefix, dst_variables_map) {$/;"	f
parse_basic_variables	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def parse_basic_variables(query_text, prefix, dst_variables_map):$/;"	f
parse_buffer_pattern	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^from deoplete.util import parse_buffer_pattern, getlines$/;"	i
parse_buffer_pattern	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^from deoplete.util import parse_buffer_pattern, getlines$/;"	i
parse_buffer_pattern	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def parse_buffer_pattern(b: Buffer, pattern: str) -> typing.List[str]:$/;"	f
parse_cmd_args	plugged/rainbow_csv/rbql_core/rbql-js/cli_parser.js	/^function parse_cmd_args(cmd_args, scheme, description=null, epilog=null) {$/;"	f
parse_dictionary_variables	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def parse_dictionary_variables(query_text, prefix, column_names, dst_variables_map):$/;"	f
parse_errors	plugged/vim-go/autoload/go/mod.vim	/^function! s:parse_errors(filename, content) abort$/;"	f
parse_errors	plugged/vim-go/autoload/go/rename.vim	/^function s:parse_errors(exit_val, bang, out)$/;"	f
parse_file_pattern	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def parse_file_pattern(f: typing.Iterable[str],$/;"	f
parse_guru_output	plugged/vim-go/autoload/go/guru.vim	/^function! s:parse_guru_output(exit_val, output, title) abort$/;"	f
parse_join_expression	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def parse_join_expression(src):$/;"	f
parse_number	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function parse_number(val) {$/;"	f
parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
parse_output	plugged/vim-go/autoload/go/calls.vim	/^function! s:parse_output(mode, output) abort$/;"	f
parse_output	plugged/vim-go/autoload/go/implements.vim	/^function! s:parse_output(exit_val, output, title) abort$/;"	f
parse_output	plugged/vim-go/autoload/go/referrers.vim	/^function! s:parse_output(exit_val, output, title) abort$/;"	f
partial	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^from functools import partial$/;"	i
path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
path2str	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:path2str(path) abort$/;"	f
path_extract	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:path_extract(path, ...) abort$/;"	f
paths	plugged/vim-go/autoload/go/package.vim	/^function! s:paths() abort$/;"	f
piggieback	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:piggieback(count, arg, remove) abort$/;"	f
piggieback.Piggieback	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:piggieback.Piggieback(arg, ...) abort$/;"	f
piggieback.Session	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:piggieback.Session() abort$/;"	f
pipe_data_received	plugged/deoplete.nvim/rplugin/python3/deoplete/process.py	/^    def pipe_data_received(self, fd: int, data: typing.Any) -> None:$/;"	m	class:Process
pkg_resources	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^            import pkg_resources$/;"	i
pkg_resources	plugged/vim-devicons/pythonx/vim_devicons/__init__.py	/^import pkg_resources$/;"	i
pkg_resources	plugged/vim-devicons/pythonx/vim_devicons/powerline/__init__.py	/^import pkg_resources$/;"	i
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
policy	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^    var policy = args['policy'] ? args['policy'] : get_default_policy(delim);$/;"	v
policy_names	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^policy_names = ['quoted', 'simple', 'whitespace', 'quoted_rfc', 'monocolumn']$/;"	v
polymorphic_input	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^polymorphic_input = input if PY3 else raw_input$/;"	v
polymorphic_unichr	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^polymorphic_unichr = chr if PY3 else unichr$/;"	v
polymorphic_xrange	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^polymorphic_xrange = range if PY3 else xrange$/;"	v
polymorphic_xrange	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^polymorphic_xrange = range if PY3 else xrange$/;"	v
position	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:position(line, col) abort$/;"	f
pr	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:pr(obj) abort$/;"	f
prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
prepareCallHierarchyHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:prepareCallHierarchyHandler(next, msg) abort dict$/;"	f
preserveerrors	plugged/vim-go/autoload/go/lint.vim	/^function! s:preserveerrors(autosave, listtype) abort$/;"	f
prettify	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettify(obj) abort$/;"	f
prettifyDict	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyDict(obj, prefix, level, indent) abort$/;"	f
prettifyList	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyList(obj, prefix, level, indent) abort$/;"	f
prev_ends_with	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:prev_ends_with(context, expr)$/;"	f
prev_starts_with	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:prev_starts_with(context, expr)$/;"	f
previewBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
previewNodeCurrent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
previewNodeHSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
previewNodeHSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
previewNodeVSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
previewNodeVSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
print	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def print(self, expr: typing.Any) -> None:$/;"	m	class:Base
print_colorized	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function print_colorized(records, delim, show_column_names, skip_header) {$/;"	f
print_colorized	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def print_colorized(records, delim, encoding, show_column_names, skip_header):$/;"	f
print_error	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^    def print_error(self, expr: typing.Any) -> None:$/;"	m	class:Base
print_error	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^    def print_error(self, expr: typing.Any) -> None:$/;"	m	class:Base
print_function	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^from __future__ import print_function$/;"	i
print_function	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^from __future__ import print_function$/;"	i
print_function	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^from __future__ import print_function$/;"	i
print_function	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^from __future__ import print_function$/;"	i
print_function	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^from __future__ import print_function$/;"	i
print_function	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^from __future__ import print_function$/;"	i
print_function	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^from __future__ import (unicode_literals, division, absolute_import, print_function)$/;"	i
print_last	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:print_last() abort$/;"	f
printop	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:printop(type) abort$/;"	f
process_exited	plugged/deoplete.nvim/rplugin/python3/deoplete/process.py	/^    def process_exited(self) -> None:$/;"	m	class:Process
process_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
process_pending_requests	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def process_pending_requests():$/;"	f
process_test_case	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def process_test_case(self, tmp_tests_dir, test_case):$/;"	m	class:TestRBQLWithCSV
progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
project	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def project do$/;"	f	class:example
project	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def project do$/;"	f	class:example.project.config.test.test.test
project	plugged/vim-elixir/spec/syntax/atom_spec.rb	/^    def project do$/;"	f
projectdir	plugged/vim-go/autoload/gotest.vim	/^func! s:projectdir(path) abort$/;"	f
promptToDelBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
py	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! s:py(cmd)$/;"	f
py3exe	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:py3exe() dict$/;"	f
py_source_escape	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^function! s:py_source_escape(src)$/;"	f
pyexe	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:pyexe() dict$/;"	f
python_string_escape_column_name	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def python_string_escape_column_name(column_name, quote_char):$/;"	f
python_version	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^python_version = float('{}.{}'.format(sys.version_info[0], sys.version_info[1]))$/;"	v
qf	plugged/eleline.vim/plugin/eleline.vim	/^function! s:qf() abort$/;"	f
qfhistory	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:qfhistory() abort$/;"	f
qfhistory_item	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:qfhistory_item(entry) abort$/;"	f
qfmassage	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:qfmassage(line, path) abort$/;"	f
qsym	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:qsym(symbol) abort$/;"	f
queries	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import datetime # For date operations inside user queries$/;"	i
queries	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import math # For math operations inside user queries$/;"	i
queries	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import os # For system operations inside user queries$/;"	i
query	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^    var query = args['query'];$/;"	v
query	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_engine import query$/;"	i
query	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry=None, user_init_code=''):$/;"	f
query_context	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^var query_context = null; \/\/ Needs to be global for MIN(), MAX(), etc functions$/;"	v
query_context	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^query_context = None # Needs to be global for MIN(), MAX(), etc functions$/;"	v
query_csv	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_csv import query_csv$/;"	i
query_csv	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def query_csv(query_text, input_path, input_delim, input_policy, output_path, output_delim, output_policy, csv_encoding, output_warnings, skip_headers=False, comment_prefix=None, user_init_code='', colorize_output=False):$/;"	f
query_probably_has_dictionary_variable	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def query_probably_has_dictionary_variable(query_text, column_name):$/;"	f
query_sqlite_to_csv	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^def query_sqlite_to_csv(query_text, db_connection, input_table_name, output_path, output_delim, output_policy, output_csv_encoding, output_warnings, user_init_code='', colorize_output=False):$/;"	f
query_table	plugged/rainbow_csv/rbql_core/rbql/__init__.py	/^from .rbql_engine import query_table$/;"	i
query_table	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def query_table(query_text, input_table, output_table, output_warnings, join_table=None, input_column_names=None, join_column_names=None, normalize_column_names=True, user_init_code=''):$/;"	f
quickfix	plugged/vim-fireplace/pythonx/fireplace.py	/^def quickfix(t, e, tb):$/;"	f
quote_field	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def quote_field(src, delim):$/;"	f
quote_fields	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def quote_fields(self, fields):$/;"	m	class:CSVWriter
quote_fields_rfc	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def quote_fields_rfc(self, fields):$/;"	m	class:CSVWriter
rainbow#hi	plugged/rainbow/autoload/rainbow.vim	/^fun rainbow#hi(config)$/;"	f
rainbow#hi_clear	plugged/rainbow/autoload/rainbow.vim	/^fun rainbow#hi_clear(config)$/;"	f
rainbow#syn	plugged/rainbow/autoload/rainbow.vim	/^fun rainbow#syn(config)$/;"	f
rainbow#syn_clear	plugged/rainbow/autoload/rainbow.vim	/^fun rainbow#syn_clear(config)$/;"	f
rainbow_csv#buffer_disable_rainbow_features	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#buffer_disable_rainbow_features()$/;"	f
rainbow_csv#buffer_enable_rainbow_features	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#buffer_enable_rainbow_features()$/;"	f
rainbow_csv#clear_current_buf_content	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#clear_current_buf_content()$/;"	f
rainbow_csv#copy_file_content_to_buf	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#copy_file_content_to_buf(src_file_path, dst_buf_no)$/;"	f
rainbow_csv#csv_align	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#csv_align()$/;"	f
rainbow_csv#csv_lint	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#csv_lint()$/;"	f
rainbow_csv#csv_shrink	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#csv_shrink()$/;"	f
rainbow_csv#dbg_set_system_python_interpreter	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#dbg_set_system_python_interpreter(interpreter)$/;"	f
rainbow_csv#dialect_to_ft	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#dialect_to_ft(delim, policy, comment_prefix)$/;"	f
rainbow_csv#do_set_rainbow_filetype	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#do_set_rainbow_filetype(rainbow_ft)$/;"	f
rainbow_csv#ensure_syntax_exists	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#ensure_syntax_exists(rainbow_ft, delim, policy, comment_prefix)$/;"	f
rainbow_csv#find_python_interpreter	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#find_python_interpreter()$/;"	f
rainbow_csv#finish_query_editing	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#finish_query_editing()$/;"	f
rainbow_csv#ft_to_dialect	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#ft_to_dialect(ft_val)$/;"	f
rainbow_csv#generate_escaped_rainbow_syntax	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#generate_escaped_rainbow_syntax(delim)$/;"	f
rainbow_csv#generate_escaped_rfc_rainbow_syntax	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#generate_escaped_rfc_rainbow_syntax(delim)$/;"	f
rainbow_csv#generate_named_dialects	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#generate_named_dialects() " This is an externally-invoked function which is used to pre-generate well-known syntax files$/;"	f
rainbow_csv#generate_rainbow_syntax	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#generate_rainbow_syntax(delim)$/;"	f
rainbow_csv#generate_tab_statusline	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#generate_tab_statusline(tabstop_val, delim_len, template_fields)$/;"	f
rainbow_csv#generate_whitespace_syntax	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#generate_whitespace_syntax()$/;"	f
rainbow_csv#get_csv_header	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#get_csv_header(delim, policy, comment_prefix)$/;"	f
rainbow_csv#get_current_dialect	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#get_current_dialect()$/;"	f
rainbow_csv#get_visual_selection	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^function! rainbow_csv#get_visual_selection()$/;"	f
rainbow_csv#handle_buffer_enter	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#handle_buffer_enter()$/;"	f
rainbow_csv#handle_new_file	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#handle_new_file()$/;"	f
rainbow_csv#handle_syntax_change	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#handle_syntax_change()$/;"	f
rainbow_csv#is_rainbow_table	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#is_rainbow_table()$/;"	f
rainbow_csv#is_rainbow_table_or_was_just_disabled	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#is_rainbow_table_or_was_just_disabled()$/;"	f
rainbow_csv#manual_disable	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#manual_disable()$/;"	f
rainbow_csv#manual_disable_comment_prefix	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#manual_disable_comment_prefix()$/;"	f
rainbow_csv#manual_set	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#manual_set(arg_policy, is_multidelim)$/;"	f
rainbow_csv#manual_set_comment_prefix	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#manual_set_comment_prefix(is_multi_comment_prefix)$/;"	f
rainbow_csv#parse_report	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#parse_report(report_content)$/;"	f
rainbow_csv#preserving_quoted_split	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#preserving_quoted_split(line, delim)$/;"	f
rainbow_csv#preserving_smart_split	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#preserving_smart_split(line, delim, policy)$/;"	f
rainbow_csv#provide_column_info_on_hover	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#provide_column_info_on_hover()$/;"	f
rainbow_csv#quoted_split	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#quoted_split(line, delim)$/;"	f
rainbow_csv#restore_statusline	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#restore_statusline()$/;"	f
rainbow_csv#rstrip	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#rstrip(line)$/;"	f
rainbow_csv#run_select_cmd_query	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#run_select_cmd_query(query_string)$/;"	f
rainbow_csv#run_update_cmd_query	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#run_update_cmd_query(query_string)$/;"	f
rainbow_csv#select_from_file	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#select_from_file()$/;"	f
rainbow_csv#set_rainbow_filetype	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#set_rainbow_filetype(delim, policy, comment_prefix)$/;"	f
rainbow_csv#set_statusline_columns	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#set_statusline_columns()$/;"	f
rainbow_csv#set_table_name_for_buffer	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#set_table_name_for_buffer(table_name)$/;"	f
rainbow_csv#smart_split	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#smart_split(line, delim, policy)$/;"	f
rainbow_csv#strip_spaces	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^function! rainbow_csv#strip_spaces(input_string)$/;"	f
rainbow_csv#unescape_quoted_fields	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#unescape_quoted_fields(src)$/;"	f
rainbow_csv#whitespace_split	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! rainbow_csv#whitespace_split(line, preserve_whitespaces)$/;"	f
rainbow_main#clear	plugged/rainbow/autoload/rainbow_main.vim	/^fun rainbow_main#clear()$/;"	f
rainbow_main#gen_config	plugged/rainbow/autoload/rainbow_main.vim	/^fun rainbow_main#gen_config(ft)$/;"	f
rainbow_main#gen_configs	plugged/rainbow/autoload/rainbow_main.vim	/^fun rainbow_main#gen_configs(ft)$/;"	f
rainbow_main#load	plugged/rainbow/autoload/rainbow_main.vim	/^fun rainbow_main#load()$/;"	f
rainbow_main#toggle	plugged/rainbow/autoload/rainbow_main.vim	/^fun rainbow_main#toggle()$/;"	f
random	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import random$/;"	i
random	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import random$/;"	i
random_merge_lines	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def random_merge_lines(llines, rlines):$/;"	f
random_smart_join	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def random_smart_join(fields, delim, policy):$/;"	f
random_whitespace_join	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def random_whitespace_join(fields):$/;"	f
randomly_join_quoted	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def randomly_join_quoted(fields, delim):$/;"	f
randomly_quote_field	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def randomly_quote_field(src, delim):$/;"	f
randomly_replace_columns_dictionary_style	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def randomly_replace_columns_dictionary_style(query):$/;"	f
rbql	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import rbql$/;"	i
rbql	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import rbql$/;"	i
rbql_csv	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^from . import rbql_csv$/;"	i
rbql_csv	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^from . import rbql_csv$/;"	i
rbql_csv	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^from rbql import rbql_csv$/;"	i
rbql_csv	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^from rbql import rbql_csv$/;"	i
rbql_engine	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^from . import rbql_engine$/;"	i
rbql_engine	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^from . import rbql_engine$/;"	i
rbql_engine	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^from . import rbql_engine$/;"	i
rbql_engine	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^from rbql import rbql_engine$/;"	i
rbql_sqlite	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^from . import rbql_sqlite$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_paren.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_case.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_paren.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_full_fuzzy.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_fuzzy.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/source/around.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^import re$/;"	i
re	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import re$/;"	i
re	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^import re$/;"	i
re	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^import re$/;"	i
re	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import re$/;"	i
re	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^import re$/;"	i
re	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import re$/;"	i
re	plugged/vim-fireplace/pythonx/fireplace.py	/^import re$/;"	i
read	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:read(str, pos) abort$/;"	f
read	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def read(self, cnt):$/;"	m	class:SocketToStream
read_table_names	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def read_table_names(db_connection):$/;"	f
read_token	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:read_token(str, pos) abort$/;"	f
read_user_init_code	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function read_user_init_code(rbql_init_source_path) {$/;"	f
read_user_init_code	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def read_user_init_code(rbql_init_source_path):$/;"	f
read_virtual_header	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:read_virtual_header(delim, policy)$/;"	f
readline	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^        import readline # Module readline is not available on Windows$/;"	i
reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
recall	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:recall() abort$/;"	f
receive	plugged/vim-fireplace/pythonx/fireplace.py	/^    def receive(self, char=None):$/;"	m	class:Connection
reflect_kind	plugged/vim-go/autoload/go/debug.vim	/^function! s:reflect_kind(k)$/;"	f
refreshCurrent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
refreshGitStatus	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:refreshGitStatus(name, workdir) abort$/;"	f
refreshRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
regexp_escape	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function regexp_escape(text) {$/;"	f
register	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:register(session, ...) abort$/;"	f
register	plugged/vim-go/plugin/go.vim	/^function! s:register()$/;"	f
regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reindent	plugged/vim-elixir/spec/spec_helper.rb	/^  def reindent(content)$/;"	f	class:Buffer
reload_changed	plugged/vim-go/autoload/go/rename.vim	/^function! s:reload_changed() abort$/;"	f
reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
removeChild	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
removeTag	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
remove_redundant_input_table_name	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def remove_redundant_input_table_name(query_text):$/;"	f
remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
remove_utf8_bom	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function remove_utf8_bom(line, assumed_source_encoding) {$/;"	f
remove_utf8_bom	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def remove_utf8_bom(line, assumed_source_encoding):$/;"	f
rename	plugged/vim-go/autoload/go/lsp.vim	/^function! s:rename(fname, line, col, newName, msg) abort dict$/;"	f
renameBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
rename_job	plugged/vim-go/autoload/go/rename.vim	/^function s:rename_job(args)$/;"	f
reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
repl.Client	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.Client() dict abort$/;"	f
repl.Eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.Eval(...) dict abort$/;"	f
repl.HasOp	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.HasOp(op) abort$/;"	f
repl.Path	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.Path() dict abort$/;"	f
repl.Session	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.Session() dict abort$/;"	f
repl.done	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.done(id) dict abort$/;"	f
repl.message	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.message(payload, ...) dict abort$/;"	f
repl.preload	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl.preload(lib) dict abort$/;"	f
repl_ns	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:repl_ns(...) abort$/;"	f
replaceBuffer	plugged/vim-cljfmt/plugin/cljfmt.vim	/^function! s:replaceBuffer(content) abort$/;"	f
replace_all	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function replace_all(src, search, replacement) {$/;"	f
replace_filename	plugged/vim-go/autoload/go/fmt.vim	/^function! s:replace_filename(filename, content) abort$/;"	f
replace_star_count	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def replace_star_count(aggregate_expression):$/;"	f
replace_star_vars	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def replace_star_vars(rbql_expression):$/;"	f
repo_bare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
repo_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
repo_git_chomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
repo_list	plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^function! s:repo_list() abort$/;"	f
repo_prepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_prepare(...) dict abort$/;"	f
repo_rev_parse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
repo_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_user	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
report_error_json	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function report_error_json(error_type, error_msg) {$/;"	f
report_error_to_vim	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    def report_error_to_vim(self, query_status, details):$/;"	m	class:CLIVimMediator
report_error_to_vim	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    def report_error_to_vim(self, query_status, details):$/;"	m	class:VimInterface
request	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def request(cls, vimsock, channel, reqid, event, args, rspid):$/;"	m	class:NvimHandler
requestComplete	plugged/vim-go/autoload/go/lsp.vim	/^function! s:requestComplete(ok) abort dict$/;"	f
request_queue	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^request_queue = Queue()$/;"	v
require	plugged/vim-clojure-highlight/autoload/vim_clojure_highlight.vim	/^function! s:require()$/;"	f
requires_segment_info	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^from powerline.theme import requires_segment_info$/;"	i
resend_confirmation	plugged/vim-elixir/spec/indent/with_spec.rb	/^  def resend_confirmation(username) when is_binary(username) do$/;"	f
reset	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
resolve_join_variables	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def resolve_join_variables(input_variables_map, join_variables_map, variable_pairs, string_literals):$/;"	f
resolve_parenthesis_from_config	plugged/rainbow/autoload/rainbow.vim	/^fun s:resolve_parenthesis_from_config(config)$/;"	f
resolve_parenthesis_with	plugged/rainbow/autoload/rainbow.vim	/^fun s:resolve_parenthesis_with(init_state, p)$/;"	f
responses	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^responses = {}$/;"	v
restoreMappings	plugged/vim-go/autoload/go/debug.vim	/^function! s:restoreMappings() abort$/;"	f
restore_mapping	plugged/vim-go/autoload/go/debug.vim	/^function! s:restore_mapping(maparg)$/;"	f
restoremappingfor	plugged/vim-go/autoload/go/debug.vim	/^function! s:restoremappingfor(bufname) abort$/;"	f
retry	autoload/plug.vim	/^function! s:retry()$/;"	f
reuseWin	plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
revert	autoload/plug.vim	/^function! s:revert()$/;"	f
rfc_quote_field	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def rfc_quote_field(src, delim):$/;"	f
right	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:right(s)$/;"	f
rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
root	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^root = logging.getLogger('deoplete')$/;"	v
root_dirs	plugged/vim-go/autoload/go/impl.vim	/^function! s:root_dirs() abort$/;"	f
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.call = function('yarp#core#request')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.id = s:id$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.job_detach = get(rp, 'job_detach', 0)$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.job_is_dead = 0$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.notify = function('yarp#core#notify')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.on_load = get(rp, 'on_load', function('yarp#core#_nop'))$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.request = function('yarp#core#request')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.try_notify = function('yarp#core#try_notify')$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.user_data = get(rp, 'user_data', {})$/;"	v
rp	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let rp.wait_channel = function('yarp#core#wait_channel')$/;"	v
rp.warn	plugged/nvim-yarp/autoload/yarp/core.vim	/^    func rp.warn(msg) dict$/;"	f
rpc_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:rpc_response(check_errors, res) abort$/;"	f
rpcnotify	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def rpcnotify(channel, method, args):$/;"	f
rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
ruby_operators	plugged/seoul256.vim/colors/seoul256.vim	/^let ruby_operators = 1$/;"	v
run	plugged/vim-elixir/spec/indent/comment_spec.rb	/^    def run do$/;"	f
run	plugged/vim-elixir/spec/indent/comment_spec.rb	/^    def run(task) when task in [:t1, :t2] do$/;"	f
run_cmd_query	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:run_cmd_query(query)$/;"	f
run_execute	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^def run_execute(src_table_path, rb_script_path, encoding, input_delim, input_policy, input_comment_prefix, out_delim, out_policy):$/;"	f
run_execute_cli	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^def run_execute_cli(src_table_path, rb_script_path, encoding, input_delim, input_policy, input_comment_prefix, out_delim, out_policy):$/;"	f
run_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:run_guru(args) abort$/;"	f
run_interactive_loop	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def run_interactive_loop(mode, args):$/;"	f
run_system	plugged/tagbar/autoload/tagbar.vim	/^function! s:run_system(cmd, version) abort$/;"	f
run_with_python_csv	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def run_with_python_csv(args, is_interactive):$/;"	f
run_with_python_sqlite	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def run_with_python_sqlite(args, is_interactive):$/;"	f
runerrorformat	plugged/vim-go/autoload/go/cmd.vim	/^function! s:runerrorformat()$/;"	f
s:Bookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Class	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Class = 7$/;"	v
s:Color	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Color = 16$/;"	v
s:Constant	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Constant = 21$/;"	v
s:Constructor	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Constructor = 4$/;"	v
s:Creator	plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Enum	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Enum = 13$/;"	v
s:EnumMember	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:EnumMember = 20$/;"	v
s:Event	plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Event = 23$/;"	v
s:Field	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Field = 5$/;"	v
s:File	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:File = 17$/;"	v
s:FlagSet	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:Folder	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Folder = 19$/;"	v
s:Function	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Function = 3$/;"	v
s:Go	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = ""$/;"	v
s:Go	plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = "\\<C-G>U"$/;"	v
s:Interface	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Interface = 8$/;"	v
s:Job	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:Job = {$/;"	v
s:KeyMap	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:Keyword	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Keyword = 14$/;"	v
s:Left	plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Left = s:Go."\\<LEFT>"$/;"	v
s:Listener	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let s:Listener = {$/;"	v
s:Logger	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:Logger = {}$/;"	v
s:MenuController	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:Method	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Method = 2$/;"	v
s:Module	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Module = 9$/;"	v
s:NERDFileNameEscape	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:Notifier	plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Opener	plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Operator	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Operator = 24$/;"	v
s:Path	plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Property	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Property = 10$/;"	v
s:Reference	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Reference = 18$/;"	v
s:Right	plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Right = s:Go."\\<RIGHT>"$/;"	v
s:Snippet	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Snippet = 15$/;"	v
s:State	plugged/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:Strlen	plugged/tabular/autoload/tabular.vim	/^  let s:Strlen = function("strdisplaywidth")$/;"	v
s:Struct	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Struct = 22$/;"	v
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TabularCommands	plugged/tabular/plugin/Tabular.vim	/^let s:TabularCommands = {}$/;"	v
s:Text	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Text = 1$/;"	v
s:TreeDirNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeFileNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TypeParameter	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:TypeParameter = 25$/;"	v
s:UI	plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:Unit	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Unit = 11$/;"	v
s:Value	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Value = 12$/;"	v
s:Variable	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Variable = 6$/;"	v
s:added_db_files	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') ? '-addr=other' : ''$/;"	v
s:addr_tabs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:assert	plugged/deoplete.nvim/test/autoload/deoplete/custom.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/deoplete.nvim/test/autoload/deoplete/util.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/nerdtree-git-plugin/tests/test_all.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/vim-devicons/test/default_setting.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/vim-devicons/test/fileformat.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/vim-devicons/test/filetype.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:autocommands_done	plugged/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:autodetection_delims	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:autodetection_delims = exists('g:rcsv_delimiters') ? g:rcsv_delimiters : ["\\t", ",", ";", "|"]$/;"	v
s:background	plugged/seoul256.vim/colors/seoul256.vim	/^let s:background  = &background$/;"	v
s:backup	plugged/seoul256.vim/colors/seoul256-light.vim	/^      let s:backup = g:seoul256_background$/;"	v
s:bad_git_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:bad_git_dir = '\/$\\|^fugitive:'$/;"	v
s:bang_edits	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:bang_edits = {'split': 'Git', 'vsplit': 'vert Git', 'tabedit': 'tab Git', 'pedit': 'Git!'}$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:better_whitespace_initialized	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^let s:better_whitespace_initialized = 0$/;"	v
s:bg	plugged/eleline.vim/plugin/eleline.vim	/^    let s:bg = 235$/;"	v
s:bg	plugged/eleline.vim/plugin/eleline.vim	/^    let s:bg = s:normal_bg$/;"	v
s:bg	plugged/eleline.vim/plugin/eleline.vim	/^  let s:bg = 235$/;"	v
s:bg	plugged/eleline.vim/plugin/eleline.vim	/^  let s:bg = g:eleline_background$/;"	v
s:blobdirs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:browsefilter	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:buf_nr	plugged/vim-go/autoload/go/doc.vim	/^let s:buf_nr = -1$/;"	v
s:buf_nr	plugged/vim-go/autoload/go/ui.vim	/^let s:buf_nr = -1$/;"	v
s:buffer_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_seqno	plugged/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:bufnameprefix	plugged/vim-go/autoload/go/term.vim	/^let s:bufnameprefix = 'goterm:\/\/'$/;"	v
s:checked_ctags	plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:clj	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:clj = {$/;"	v
s:clj	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:clj = {}$/;"	v
s:clj_delegate	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:clj_delegate = extend(copy(s:clj), s:delegate)$/;"	v
s:cljs	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:cljs = {$/;"	v
s:cljs_delegate	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:cljs_delegate = extend(copy(s:cljs), s:delegate)$/;"	v
s:clojure_syntax_keywords	plugged/vim-clojure-static/syntax/clojure.vim	/^let s:clojure_syntax_keywords = {$/;"	v
s:cmd	plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^let s:cmd = join(['mix', 'run', '--no-start', '--no-compile', shellescape(s:path.'\/get_repos.exs')])$/;"	v
s:colors	plugged/eleline.vim/plugin/eleline.vim	/^let s:colors = {$/;"	v
s:colors_name	plugged/seoul256.vim/colors/seoul256.vim	/^let s:colors_name = get(g:, 'colors_name', '')$/;"	v
s:column	plugged/vim-devicons/autoload/vimfiler/columns/devicons.vim	/^let s:column = {$/;"	v
s:common	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:common = {'Query': function('s:EvalQuery')}$/;"	v
s:commondirs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compare_typeinfo	plugged/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:completions	plugged/vim-go/autoload/go/complete.vim	/^    let s:completions = l:state.matches$/;"	v
s:conceal	plugged/vim-markdown/syntax/markdown.vim	/^  let s:conceal = ' conceal'$/;"	v
s:conceal	plugged/vim-markdown/syntax/markdown.vim	/^let s:conceal = ''$/;"	v
s:concealcode	plugged/vim-markdown/syntax/markdown.vim	/^  let s:concealcode = ' concealends'$/;"	v
s:concealcode	plugged/vim-markdown/syntax/markdown.vim	/^let s:concealcode = ''$/;"	v
s:concealends	plugged/vim-markdown/syntax/markdown.vim	/^  let s:concealends = ' concealends'$/;"	v
s:concealends	plugged/vim-markdown/syntax/markdown.vim	/^let s:concealends = ''$/;"	v
s:config	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:cpo_sav	plugged/vim-clojure-static/syntax/clojure.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-clojure-static/ftplugin/clojure.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-elixir/compiler/exunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-elixir/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-elixir/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-elixir/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/fzf/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/alternate.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/asmfmt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/auto.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/calls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/calls_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/cmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/cmd_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/complete_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/config.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/config_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/coverage.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/debug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/debug_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/def.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/def_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/doc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fillstruct.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fillstruct_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fmt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fmt_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/guru.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/guru_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/highlight_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/iferr.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/impl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/impl_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/implements.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/import.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/import_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/indent_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/issue.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/job.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/job_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/keyify.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lint_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/list.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/lsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/message.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/mod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/package.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/package_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/path.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/play.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/promise.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/promise_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/referrers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/rename.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/statusline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tags.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tags_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/template.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/template_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/term.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/term_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/test_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/textobj.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tool.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tool_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/ui.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/uri.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/uri_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/util.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/gotest.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/compiler/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftdetect/gofiletype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/asm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go/snippets.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go/tagbar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/gomod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/indent/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/indent/gohtmltmpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/plugin/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/scripts/runbench.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/scripts/runtest.vim	/^let s:cpo_save = &cpo$/;"	v
s:ctags_is_uctags	plugged/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:current_file	plugged/vim-go/autoload/go/template.vim	/^let s:current_file = expand("<sfile>")$/;"	v
s:current_fileencodings	plugged/vim-go/plugin/go.vim	/^let s:current_fileencodings = ''$/;"	v
s:current_fileformats	plugged/vim-go/plugin/go.vim	/^let s:current_fileformats = ''$/;"	v
s:custom_bg	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:custom_bg = get(g:, 'seoul256_light_background', get(g:, 'seoul256_background', 253))$/;"	v
s:dark_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:dark_bg  = 237$/;"	v
s:dark_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:dark_bg  = get(s:, 'seoul256_background', 237)$/;"	v
s:dark_bg_2	plugged/seoul256.vim/colors/seoul256.vim	/^let s:dark_bg_2 = s:dark_bg > 233 ? s:dark_bg - 2 : 16$/;"	v
s:dark_fg	plugged/seoul256.vim/colors/seoul256.vim	/^let s:dark_fg = 252$/;"	v
s:debug	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:debug   = 0 | :lockvar s:debug$/;"	v
s:debug_enabled	plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:default_list_type_commands	plugged/vim-go/autoload/go/list.vim	/^let s:default_list_type_commands = {$/;"	v
s:default_metalinter	plugged/vim-go/autoload/go/config.vim	/^let s:default_metalinter = 'staticcheck'$/;"	v
s:default_vals	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:default_vals = {$/;"	v
s:delayed_update_files	plugged/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:delegate	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:delegate = {$/;"	v
s:delimiterMap	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:did_check_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff_cmd	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^let s:diff_cmd=g:diff_binary.' -a --unchanged-group-format="" --old-group-format="" --new-group-format="%dF,%dL " --changed-group-format="%dF,%dL " '$/;"	v
s:dir	plugged/vim-clojure-static/ftplugin/clojure.vim	/^		let s:dir = fnameescape(s:dir)$/;"	v
s:dir	plugged/vim-clojure-static/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\ ', '\\\\ ', 'g')$/;"	v
s:dir	plugged/vim-clojure-static/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\', '\\\\\\\\', 'g')$/;"	v
s:dir	plugged/vim-go/scripts/runtest.vim	/^let s:dir = expand('%:p:h')$/;"	v
s:dirArrows	plugged/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpandable, '~]\\-')$/;"	v
s:dir_for_worktree	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:disable_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:done	plugged/vim-go/scripts/runtest.vim	/^  let s:done += 1$/;"	v
s:done	plugged/vim-go/scripts/runtest.vim	/^let s:done = 0$/;"	v
s:edit_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:efm	plugged/vim-go/autoload/go/test.vim	/^let s:efm = ""$/;"	v
s:elapsed_time	plugged/vim-go/scripts/runtest.vim	/^  let s:elapsed_time = substitute(reltimestr(reltime(s:started)), '^\\s*\\(.\\{-}\\)\\s*$', '\\1', '')$/;"	v
s:engine	plugged/vim-go/ftplugin/go/snippets.vim	/^let s:engine = go#config#SnippetEngine()$/;"	v
s:env_cache	plugged/vim-go/autoload/go/util.vim	/^let s:env_cache = {}$/;"	v
s:eol_whitespace_pattern	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^    let s:eol_whitespace_pattern .= '\\|[' . s:whitespace_chars . ']\\+\\ze[\\u0009]'$/;"	v
s:eol_whitespace_pattern	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^    let s:eol_whitespace_pattern = '[^\\u0009' . s:whitespace_chars . ']\\@1<=' . s:eol_whitespace_pattern$/;"	v
s:eol_whitespace_pattern	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^let s:eol_whitespace_pattern = '[\\u0009' . s:whitespace_chars . ']\\+$'$/;"	v
s:errmsg	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^let s:errmsg='please set g:current_line_whitespace_disabled_{soft,hard} and reload better whitespace'$/;"	v
s:error	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:error   = 3 | :lockvar s:error$/;"	v
s:exec_paths	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executables	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:expand	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:expand_bufnr	plugged/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:fail	plugged/vim-go/scripts/runtest.vim	/^    let s:fail += 1$/;"	v
s:fail	plugged/vim-go/scripts/runtest.vim	/^let s:fail = 0$/;"	v
s:file_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:filetype_dict	plugged/vim-markdown/ftplugin/markdown.vim	/^        let s:filetype_dict[key] = val$/;"	v
s:filetype_dict	plugged/vim-markdown/ftplugin/markdown.vim	/^    let s:filetype_dict = {$/;"	v
s:filetype_dict	plugged/vim-markdown/ftplugin/markdown.vim	/^    let s:filetype_dict = {}$/;"	v
s:first_rtp	autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:flag	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:fn_icon	plugged/eleline.vim/plugin/eleline.vim	/^let s:fn_icon = s:font ? get(g:, 'eleline_function_icon', " \\uf794 ") : ''$/;"	v
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:font	plugged/eleline.vim/plugin/eleline.vim	/^let s:font = get(g:, 'eleline_powerline_fonts', get(g:, 'airline_powerline_fonts', 0))$/;"	v
s:formatelempat	plugged/tabular/autoload/tabular.vim	/^let s:formatelempat = '\\%([lrc]\\d\\+\\)'$/;"	v
s:frame_index	plugged/eleline.vim/autoload/eleline.vim	/^let s:frame_index = 0$/;"	v
s:frames	plugged/eleline.vim/autoload/eleline.vim	/^let s:frames = ['◐', '◑', '◒', '◓']$/;"	v
s:git_branch_cmd	plugged/eleline.vim/plugin/eleline.vim	/^let s:git_branch_cmd = add(s:is_win ? ['cmd', '\/c'] : ['bash', '-c'], 'git branch')$/;"	v
s:git_branch_star_substituted	plugged/eleline.vim/plugin/eleline.vim	/^let s:git_branch_star_substituted = s:font ? "  \\ue0a0" : '  Git:'$/;"	v
s:git_branch_symbol	plugged/eleline.vim/plugin/eleline.vim	/^let s:git_branch_symbol = s:font ? " \\ue0a0 " : ' Git:'$/;"	v
s:git_versions	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:globsubs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:go_decls_var	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:go_decls_var = {$/;"	v
s:go_major_version	plugged/vim-go/autoload/go/mod.vim	/^let s:go_major_version = ""$/;"	v
s:go_stack	plugged/vim-go/autoload/go/def.vim	/^let s:go_stack = []$/;"	v
s:go_stack_level	plugged/vim-go/autoload/go/def.vim	/^let s:go_stack_level = 0$/;"	v
s:go_test_show_name	plugged/vim-go/autoload/go/test.vim	/^let s:go_test_show_name = 0$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^    let s:goarch = '*'$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^    let s:goarch = g:golang_goarch$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^let s:goarch = $GOARCH$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = '*'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = 'darwin'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = 'windows'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = g:golang_goos$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^let s:goos = $GOOS$/;"	v
s:gopath	plugged/vim-go/scripts/runtest.vim	/^let s:gopath = $GOPATH$/;"	v
s:got_fmt_error	plugged/vim-go/autoload/go/asmfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:gui	plugged/eleline.vim/plugin/eleline.vim	/^let s:gui = has('gui_running')$/;"	v
s:gui	plugged/seoul256.vim/colors/seoul256.vim	/^let s:gui = has('gui_running')$/;"	v
s:gui_or_cterm	plugged/nerdtree-dash/syntax/nerdtree.vim	/^let s:gui_or_cterm = s:use_gui ? 'gui' : 'cterm'$/;"	v
s:hash_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:headersRegexp	plugged/vim-markdown/ftplugin/markdown.vim	/^let s:headersRegexp = '\\v^(#|.+\\n(\\=+|-+)$)'$/;"	v
s:history	plugged/vim-fireplace/autoload/fireplace.vim	/^  let s:history = []$/;"	v
s:hl_group	plugged/nerdtree-dash/syntax/nerdtree.vim	/^let s:hl_group = {$/;"	v
s:ics	plugged/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:id	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:id = 1$/;"	v
s:id	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^  let s:id = 0$/;"	v
s:id	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:import_paths	plugged/vim-go/autoload/go/package.vim	/^let s:import_paths = {}$/;"	v
s:in_gopath	plugged/vim-go/autoload/go/package.vim	/^let s:in_gopath = {}$/;"	v
s:indexes	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:indicatorMap	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^    let s:indicatorMap = {$/;"	v
s:info	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:info    = 1 | :lockvar s:info$/;"	v
s:init_done	plugged/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:initial_go_path	plugged/vim-go/autoload/go/path.vim	/^let s:initial_go_path = ""$/;"	v
s:is_handler_enabled	plugged/deoplete.nvim/autoload/deoplete/init.vim	/^  let s:is_handler_enabled = 0$/;"	v
s:is_maximized	plugged/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	plugged/eleline.vim/plugin/eleline.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:is_win = gitstatus#isWin()$/;"	v
s:iskeyword	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:iskeyword = '[[:alnum:]_=?!#$%&*+|.\/<>:''-]'$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8.vim	/^let s:italics = (&t_ZH != '' && &t_ZH != '[7m') || has('gui_running') || has('nvim')$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8.vim	/^let s:italics = s:italics && get(g:, 'solarized_italics', 1)$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8_flat.vim	/^let s:italics = (&t_ZH != '' && &t_ZH != '[7m') || has('gui_running') || has('nvim')$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8_flat.vim	/^let s:italics = s:italics && get(g:, 'solarized_italics', 1)$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8_high.vim	/^let s:italics = (&t_ZH != '' && &t_ZH != '[7m') || has('gui_running') || has('nvim')$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8_high.vim	/^let s:italics = s:italics && get(g:, 'solarized_italics', 1)$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8_low.vim	/^let s:italics = (&t_ZH != '' && &t_ZH != '[7m') || has('gui_running') || has('nvim')$/;"	v
s:italics	plugged/vim-solarized8/colors/solarized8_low.vim	/^let s:italics = s:italics && get(g:, 'solarized_italics', 1)$/;"	v
s:item_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:jar_contents	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:jar_contents = {}$/;"	v
s:jobs	plugged/eleline.vim/plugin/eleline.vim	/^let s:jobs = {}$/;"	v
s:jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = 'jobstart'$/;"	v
s:jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = get(g:, 'yarp_jobstart', 'neovim_rpc#jobstart')$/;"	v
s:js_env_initialized	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:js_env_initialized = 0$/;"	v
s:keyMaps	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:known_files	plugged/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_alt_bufnr	plugged/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_highlight_tline	plugged/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_rtp	autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:last_status	plugged/vim-go/autoload/go/statusline.vim	/^let s:last_status = ""$/;"	v
s:last_time	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:lcn	plugged/eleline.vim/autoload/eleline.vim	/^let s:lcn = s:frames[0]$/;"	v
s:leaving	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:leaving = 0$/;"	v
s:leaving	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let s:leaving = 0$/;"	v
s:lenSpaceStr	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:levelRegexpDict	plugged/vim-markdown/ftplugin/markdown.vim	/^let s:levelRegexpDict = {$/;"	v
s:light	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:light     = s:custom_bg >= 252 && s:custom_bg <= 256$/;"	v
s:light_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:light_bg = 253$/;"	v
s:light_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:light_bg = get(s:, 'seoul256_background', 253)$/;"	v
s:light_bg_1	plugged/seoul256.vim/colors/seoul256.vim	/^let s:light_bg_1 = min([s:light_bg + 1, 256])$/;"	v
s:light_bg_2	plugged/seoul256.vim/colors/seoul256.vim	/^let s:light_bg_2 = min([s:light_bg + 2, 256])$/;"	v
s:light_fg	plugged/seoul256.vim/colors/seoul256.vim	/^let s:light_fg = 239$/;"	v
s:light_var_found	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:light_var_found = exists('g:seoul256_light_background')$/;"	v
s:lines	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:lines = join(getline(1, 5) + [getline('$')], "\\n")$/;"	v
s:lines	plugged/vim-elixir/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:listener	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:listener = gitstatus#listener#New(g:)$/;"	v
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:loaded = 1$/;"	v
s:log	plugged/vim-go/autoload/go/lsp.vim	/^let s:log = []$/;"	v
s:log_diff_context	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, v:key), "module": strpart(v:val, 0, len(a:state.base_module)) . from}'$/;"	v
s:logger	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:logger = gitstatus#log#NewLogger(g:NERDTreeGitStatusLogLevel)$/;"	v
s:logs	plugged/vim-go/scripts/runtest.vim	/^let s:logs = []$/;"	v
s:lspfactory	plugged/vim-go/autoload/go/lsp.vim	/^let s:lspfactory = {}$/;"	v
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:magic_chars	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:magic_chars = '^*$.~\/[]\\'$/;"	v
s:mapargs	plugged/vim-go/autoload/go/debug.vim	/^  let s:mapargs = {}$/;"	v
s:master	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:master    = expand('<sfile>:p:h').'\/seoul256.vim'$/;"	v
s:match_words	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:match_words = ""$/;"	v
s:max_columns	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:max_columns = exists('g:rcsv_max_columns') ? g:rcsv_max_columns : 30$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_heads	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:named_syntax_map	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:named_syntax_map = {'csv': [',', 'quoted', ''], 'csv_semicolon': [';', 'quoted', ''], 'tsv': ["\\t", 'simple', ''], 'csv_pipe': ['|', 'simple', ''], 'csv_whitespace': [" ", 'whitespace', ''], 'rfc_csv': [',', 'quoted_rfc', ''], 'rfc_semicolon': [';', 'quoted_rfc', '']}$/;"	v
s:nearby_disabled	plugged/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:need_migrate_vals	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:need_migrate_vals = {$/;"	v
s:new_window	plugged/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:no_repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:no_repl = 'Fireplace: no live REPL connection'$/;"	v
s:normal_bg	plugged/eleline.vim/plugin/eleline.vim	/^  let s:normal_bg = s:extract('Normal', 'bg', 'cterm')$/;"	v
s:normal_bg	plugged/nerdtree-dash/syntax/nerdtree.vim	/^  let s:normal_bg = 'NONE'$/;"	v
s:normal_bg	plugged/nerdtree-dash/syntax/nerdtree.vim	/^let s:normal_bg = s:get_color('Normal', 'bg')$/;"	v
s:nowait	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait'))$/;"	v
s:old_cpo	plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:oneline	plugged/vim-markdown/syntax/markdown.vim	/^    let s:oneline = ' oneline'$/;"	v
s:oneline	plugged/vim-markdown/syntax/markdown.vim	/^    let s:oneline = ''$/;"	v
s:oneoff	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:oneoff = extend(copy(s:clj), s:common)$/;"	v
s:oneoff	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:oneoff.Message = s:oneoff.Session$/;"	v
s:oneoff	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:oneoff.eval = s:oneoff.Eval$/;"	v
s:oneoff	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:oneoff.message = s:oneoff.Session$/;"	v
s:oneoff	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:oneoff.path = s:oneoff.Path$/;"	v
s:oneoff	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:oneoff.user_ns = s:repl.UserNs$/;"	v
s:packages	plugged/vim-go/plugin/go.vim	/^let s:packages = {$/;"	v
s:path	plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^let s:path = expand('<sfile>:h')$/;"	v
s:path_subcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:path_subcommands = {}$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:paused	plugged/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:piggieback	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:piggieback = extend(copy(s:repl), s:cljs)$/;"	v
s:piggieback	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:piggieback.user_ns = s:piggieback.UserNs$/;"	v
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plugin_home	plugged/vim-devicons/plugin/webdevicons.vim	/^let s:plugin_home = expand('<sfile>:p:h:h')$/;"	v
s:prepare_env	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:pwin_by_tagbar	plugged/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:pyeval	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let s:pyeval = function('py3eval')$/;"	v
s:pyeval	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let s:pyeval = function('pyeval')$/;"	v
s:pyeval	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let s:pyeval = function('pyxeval')$/;"	v
s:python_dir	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^let s:python_dir = fnamemodify(expand("<sfile>"), ':p:h:h:h') . '\/pythonx'$/;"	v
s:python_env_initialized	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:python_env_initialized = 0$/;"	v
s:qffiles	plugged/vim-fireplace/autoload/fireplace.vim	/^  let s:qffiles = {}$/;"	v
s:radix_chars	plugged/vim-clojure-static/syntax/clojure.vim	/^let s:radix_chars = "0123456789abcdefghijklmnopqrstuvwxyz"$/;"	v
s:rainbow_conf	plugged/rainbow/autoload/rainbow_main.vim	/^let s:rainbow_conf = {$/;"	v
s:rainbow_table_index	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:rainbow_table_index = exists('g:rainbow_table_index') ? g:rainbow_table_index : $HOME . '\/.rbql_table_index'$/;"	v
s:rb_storage_dir	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:rb_storage_dir = exists('g:rb_storage_dir') ? g:rb_storage_dir : $HOME . '\/.rainbow_csv_storage'$/;"	v
s:rebase_abbrevs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:redirects	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:redirects = {}$/;"	v
s:ref_header	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:reg	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:reg[rp.id] = rp$/;"	v
s:reg	plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:reg = {}$/;"	v
s:repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:repl = extend(extend({"requires": {}}, s:clj), s:common)$/;"	v
s:repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:repl.Done = s:repl.done$/;"	v
s:repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:repl.Message = s:repl.message$/;"	v
s:repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:repl.Preload = s:repl.preload$/;"	v
s:repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:repl.eval = s:repl.Eval$/;"	v
s:repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:repl.path = s:repl.Path$/;"	v
s:repl	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:repl.user_ns = s:repl.UserNs$/;"	v
s:repl_paths	plugged/vim-fireplace/autoload/fireplace.vim	/^  let s:repl_paths = {}$/;"	v
s:repl_portfiles	plugged/vim-fireplace/autoload/fireplace.vim	/^  let s:repl_portfiles = {}$/;"	v
s:repls	plugged/vim-fireplace/autoload/fireplace.vim	/^  let s:repls = []$/;"	v
s:repo_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:report	plugged/vim-go/scripts/runbench.vim	/^let s:report = execute('syntime report')$/;"	v
s:repos	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:resume_queue	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:rgb_map	plugged/seoul256.vim/colors/seoul256.vim	/^        let s:rgb_map =$/;"	v
s:rootNERDTreePath	plugged/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:rpcnotify	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = 'rpcnotify'$/;"	v
s:rpcnotify	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = get(g:, 'yarp_rpcnotify', 'neovim_rpc#rpcnotify')$/;"	v
s:rpcrequest	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = 'rpcrequest'$/;"	v
s:rpcrequest	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = get(g:, 'yarp_rpcrequest', 'neovim_rpc#rpcrequest')$/;"	v
s:rspid	plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let s:rspid = 1$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:save_cpo	plugged/eleline.vim/plugin/eleline.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/tabular/after/plugin/TabularMaps.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-clojure-static/indent/clojure.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-devicons/autoload/vimfiler/columns/devicons.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-devicons/plugin/webdevicons.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-go/autoload/unite/sources/decls.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/vim-go/compiler/go.vim	/^let s:save_cpo = &cpo$/;"	v
s:savecpo	plugged/tabular/autoload/tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:savecpo	plugged/tabular/plugin/Tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:script_folder_path	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:script_folder_path = expand('<sfile>:p:h:h')$/;"	v
s:section_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:seoul256_background	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:seoul256_background = g:seoul256_background$/;"	v
s:serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = function('s:_serveraddr')$/;"	v
s:serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = get(g:, 'yarp_serveraddr', 'neovim_rpc#serveraddr')$/;"	v
s:session	plugged/vim-fireplace/autoload/fireplace/session.vim	/^let s:session = {$/;"	v
s:short_help	plugged/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:short_types	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:short_types = {$/;"	v
s:singular_types	plugged/tagbar/autoload/tagbar.vim	/^let s:singular_types = {$/;"	v
s:source	plugged/vim-go/autoload/unite/sources/decls.vim	/^let s:source = {$/;"	v
s:spaceStr	plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:spawns	plugged/vim-fireplace/autoload/fireplace.vim	/^  let s:spawns = {}$/;"	v
s:start_args	plugged/vim-go/autoload/go/debug.vim	/^  let s:start_args = []$/;"	v
s:started	plugged/vim-go/scripts/runtest.vim	/^  let s:started = reltime()$/;"	v
s:state	plugged/vim-go/autoload/go/debug.vim	/^  let s:state = {$/;"	v
s:statuses	plugged/vim-go/autoload/go/statusline.vim	/^let s:statuses = {}$/;"	v
s:statusline_in_use	plugged/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:strip_whitespace_pattern	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^let s:strip_whitespace_pattern = s:eol_whitespace_pattern$/;"	v
s:style	plugged/seoul256.vim/colors/seoul256.vim	/^    let s:style = &background$/;"	v
s:style	plugged/seoul256.vim/colors/seoul256.vim	/^    let s:style = 'dark'$/;"	v
s:style	plugged/seoul256.vim/colors/seoul256.vim	/^    let s:style = 'light'$/;"	v
s:style_idx	plugged/seoul256.vim/colors/seoul256.vim	/^let s:style_idx = s:style == 'light'$/;"	v
s:subcommands_before_2_5	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:subcommands_before_2_5 = [$/;"	v
s:suite	plugged/deoplete.nvim/test/autoload/deoplete/custom.vim	/^let s:suite = themis#suite('custom')$/;"	v
s:suite	plugged/deoplete.nvim/test/autoload/deoplete/util.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:suite	plugged/nerdtree-git-plugin/tests/test_all.vim	/^let s:suite = themis#suite('Test for nerdtree-git-plugin')$/;"	v
s:suite	plugged/vim-devicons/test/default_setting.vim	/^let s:suite = themis#suite('Webdevicons-default-value')$/;"	v
s:suite	plugged/vim-devicons/test/fileformat.vim	/^let s:suite = themis#suite('WebDevIconsGetFileFormatSymbol')$/;"	v
s:suite	plugged/vim-devicons/test/filetype.vim	/^let s:suite = themis#suite('WebDevIconsGetFileTypeSymbol')$/;"	v
s:system_python_interpreter	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:system_python_interpreter = ''$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8.vim	/^let s:t_Co = get(g:, 'solarized_use16', 0) ? 16 : s:t_Co$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8_flat.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8_flat.vim	/^let s:t_Co = get(g:, 'solarized_use16', 0) ? 16 : s:t_Co$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8_high.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8_high.vim	/^let s:t_Co = get(g:, 'solarized_use16', 0) ? 16 : s:t_Co$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8_low.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	plugged/vim-solarized8/colors/solarized8_low.vim	/^let s:t_Co = get(g:, 'solarized_use16', 0) ? 16 : s:t_Co$/;"	v
s:table_names_settings	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^let s:table_names_settings = exists('g:table_names_settings') ? g:table_names_settings : $HOME . '\/.rbql_table_names'$/;"	v
s:tag_file	plugged/vim-fireplace/autoload/fireplace.vim	/^  let s:tag_file = tempname() . '.fireplace.tags'$/;"	v
s:temp_files	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_scripts	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:templatepath	plugged/vim-go/autoload/go/issue.vim	/^let s:templatepath = go#util#Join(expand('<sfile>:p:h:h:h'), '.github', 'ISSUE_TEMPLATE.md')$/;"	v
s:termtrans	plugged/vim-solarized8/colors/solarized8.vim	/^let s:termtrans = get(g:, 'solarized_termtrans', 0) && !has('gui_running')$/;"	v
s:termtrans	plugged/vim-solarized8/colors/solarized8_flat.vim	/^let s:termtrans = get(g:, 'solarized_termtrans', 0) && !has('gui_running')$/;"	v
s:termtrans	plugged/vim-solarized8/colors/solarized8_high.vim	/^let s:termtrans = get(g:, 'solarized_termtrans', 0) && !has('gui_running')$/;"	v
s:termtrans	plugged/vim-solarized8/colors/solarized8_low.vim	/^let s:termtrans = get(g:, 'solarized_termtrans', 0) && !has('gui_running')$/;"	v
s:testfile	plugged/vim-go/scripts/runtest.vim	/^let s:testfile = expand('%:t')$/;"	v
s:tests	plugged/vim-go/scripts/runtest.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k\\+()\\)', '\\1', 'g'))$/;"	v
s:timer_id	plugged/vim-go/autoload/go/auto.vim	/^let s:timer_id = 0$/;"	v
s:timer_id	plugged/vim-go/autoload/go/statusline.vim	/^let s:timer_id = 0$/;"	v
s:toggle	plugged/vim-go/autoload/go/coverage.vim	/^let s:toggle = 0$/;"	v
s:token	plugged/vim-fireplace/autoload/fireplace.vim	/^let s:token = '^\\%(#"\\%(\\\\\\@<!\\%(\\\\\\\\\\)*\\\\"\\|[^"]\\)*"\\|"\\%(\\\\.\\|[^"]\\)*"\\|[[:space:],]\\+\\|\\%(;\\|#!\\)[^'."\\n".']*\\|\\~@\\|#[[:punct:]]\\|''\\@!'.s:iskeyword.'\\+\\|\\\\\\%(space\\|tab\\|newline\\|return\\|.\\)\\|.\\)'$/;"	v
s:total_elapsed_time	plugged/vim-go/scripts/runtest.vim	/^let s:total_elapsed_time = substitute(reltimestr(reltime(s:total_started)), '^\\s*\\(.\\{-}\\)\\s*$', '\\1', '')$/;"	v
s:total_started	plugged/vim-go/scripts/runtest.vim	/^let s:total_started = reltime()$/;"	v
s:transport	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^let s:transport = {$/;"	v
s:tree_up_dir_line	plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:trees	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters = {}$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.BOOL]    = { bol -> bol ? 'v:true' : 'v:false' }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.DICT]    = { dct -> s:prettifyDict(dct, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FLOAT]   = { flt -> string(flt) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FUNCREF] = { fn  -> string(fn) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.LIST]    = { lst -> s:prettifyList(lst, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NULL]    = { nul -> string(nul) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NUMBER]  = { nbr -> string(nbr) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.STRING]  = { str -> printf("'%s'", str) }$/;"	v
s:type_init_done	plugged/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:types	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:types = {$/;"	v
s:undo_ftplugin	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:undo_ftplugin = ""$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unmerged_status	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let s:unmerged_status = {$/;"	v
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:urls	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^  let s:urls = {}$/;"	v
s:use_gui	plugged/nerdtree-dash/syntax/nerdtree.vim	/^let s:use_gui = has('gui_running') || (has('termguicolors') && &termguicolors)$/;"	v
s:var	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(<\\%(cword\\|cWORD\\|cexpr\\|cfile\\|sfile\\|slnum\\|afile\\|abuf\\|amatch' . (has('clientserver') ? '\\|client' : '') . '\\)>\\|%\\|#<\\=\\d\\+\\|##\\=\\)'$/;"	v
s:var_found	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:var_found = exists('g:seoul256_background')$/;"	v
s:version	plugged/vim-devicons/plugin/webdevicons.vim	/^let s:version = '0.11.0'$/;"	v
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim8	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_id	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^  let s:vim_id = 'fireplace-' . hostname() . '-' . localtime()$/;"	v
s:vim_markdown_folding_level	plugged/vim-markdown/after/ftplugin/markdown.vim	/^let s:vim_markdown_folding_level = get(g:, "vim_markdown_folding_level", 1)$/;"	v
s:vim_quitting	plugged/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:visibility_symbols	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^    let s:visibility_symbols = g:tagbar_visibility_symbols$/;"	v
s:visibility_symbols	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:warning	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:warning = 2 | :lockvar s:warning$/;"	v
s:warnings	plugged/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:whitespace_chars	plugged/vim-better-whitespace/plugin/better-whitespace.vim	/^let s:whitespace_chars='\\u0020\\u00a0\\u1680\\u180e\\u2000-\\u200b\\u202f\\u205f\\u3000\\ufeff'$/;"	v
s:wildignores_options_path	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:window_expanded	plugged/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	plugged/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:winrestcmd	plugged/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:words	plugged/vim-clojure-static/autoload/clojurecomplete.vim	/^let s:words = ["*","*'","*1","*2","*3","*agent*","*allow-unresolved-vars*","*assert*","*clojure-version*","*command-line-args*","*compile-files*","*compile-path*","*compiler-options*","*data-readers*","*default-data-reader-fn*","*e","*err*","*file*","*flush-on-newline*","*fn-loader*","*in*","*math-context*","*ns*","*out*","*print-dup*","*print-length*","*print-level*","*print-meta*","*print-readably*","*read-eval*","*source-path*","*suppress-read*","*unchecked-math*","*use-context-classloader*","*verbose-defrecords*","*warn-on-reflection*","+","+'","-","-'","->","->>","->ArrayChunk","->Eduction","->Vec","->VecNode","->VecSeq","-cache-protocol-fn","-reset-methods",".","..","\/","<","<=","=","==",">",">=","EMPTY-NODE","Throwable->map","accessor","aclone","add-classpath","add-watch","agent","agent-error","agent-errors","aget","alength","alias","all-ns","alter","alter-meta!","alter-var-root","amap","ancestors","and","apply","areduce","array-map","as->","aset","aset-boolean","aset-byte","aset-char","aset-double","aset-float","aset-int","aset-long","aset-short","assert","assoc!","assoc","assoc-in","associative?","atom","await","await-for","await1","bases","bean","bigdec","bigint","biginteger","binding","bit-and","bit-and-not","bit-clear","bit-flip","bit-not","bit-or","bit-set","bit-shift-left","bit-shift-right","bit-test","bit-xor","boolean","boolean-array","booleans","bound-fn","bound-fn*","bound?","butlast","byte","byte-array","bytes","case","cast","cat","catch","char","char-array","char-escape-string","char-name-string","char?","chars","chunk","chunk-append","chunk-buffer","chunk-cons","chunk-first","chunk-next","chunk-rest","chunked-seq?","class","class?","clear-agent-errors","clojure-version","coll?","comment","commute","comp","comparator","compare","compare-and-set!","compile","complement","completing","concat","cond","cond->","cond->>","condp","conj!","conj","cons","constantly","construct-proxy","contains?","count","counted?","create-ns","create-struct","cycle","dec","dec'","decimal?","declare","dedupe","def","default-data-readers","definline","definterface","defmacro","defmethod","defmulti","defn","defn-","defonce","defprotocol","defrecord","defstruct","deftype","delay","delay?","deliver","denominator","deref","derive","descendants","destructure","disj!","disj","dissoc!","dissoc","distinct","distinct?","do","doall","dorun","doseq","dosync","dotimes","doto","double","double-array","doubles","drop","drop-last","drop-while","eduction","empty","empty?","ensure","ensure-reduced","enumeration-seq","error-handler","error-mode","eval","even?","every-pred","every?","ex-data","ex-info","extend","extend-protocol","extend-type","extenders","extends?","false?","ffirst","file-seq","filter","filterv","finally","find","find-keyword","find-ns","find-protocol-impl","find-protocol-method","find-var","first","flatten","float","float-array","float?","floats","flush","fn","fn","fn?","fnext","fnil","for","force","format","frequencies","future","future-call","future-cancel","future-cancelled?","future-done?","future?","gen-class","gen-interface","gensym","get","get-in","get-method","get-proxy-class","get-thread-bindings","get-validator","group-by","hash","hash-combine","hash-map","hash-ordered-coll","hash-set","hash-unordered-coll","identical?","identity","if","if-let","if-not","if-some","ifn?","import","in-ns","inc","inc'","init-proxy","instance?","int","int-array","integer?","interleave","intern","interpose","into","into-array","ints","io!","isa?","iterate","iterator-seq","juxt","keep","keep-indexed","key","keys","keyword","keyword?","last","lazy-cat","lazy-seq","let","let","letfn","line-seq","list","list*","list?","load","load-file","load-reader","load-string","loaded-libs","locking","long","long-array","longs","loop","loop","macroexpand","macroexpand-1","make-array","make-hierarchy","map","map-entry?","map-indexed","map?","mapcat","mapv","max","max-key","memfn","memoize","merge","merge-with","meta","method-sig","methods","min","min-key","mix-collection-hash","mod","monitor-enter","monitor-exit","munge","name","namespace","namespace-munge","neg?","new","newline","next","nfirst","nil?","nnext","not","not-any?","not-empty","not-every?","not=","ns","ns-aliases","ns-imports","ns-interns","ns-map","ns-name","ns-publics","ns-refers","ns-resolve","ns-unalias","ns-unmap","nth","nthnext","nthrest","num","number?","numerator","object-array","odd?","or","parents","partial","partition","partition-all","partition-by","pcalls","peek","persistent!","pmap","pop!","pop","pop-thread-bindings","pos?","pr","pr-str","prefer-method","prefers","primitives-classnames","print","print-ctor","print-dup","print-method","print-simple","print-str","printf","println","println-str","prn","prn-str","promise","proxy","proxy-call-with-super","proxy-mappings","proxy-name","proxy-super","push-thread-bindings","pvalues","quot","quote","rand","rand-int","rand-nth","random-sample","range","ratio?","rational?","rationalize","re-find","re-groups","re-matcher","re-matches","re-pattern","re-seq","read","read-line","read-string","reader-conditional","reader-conditional?","realized?","record?","recur","reduce","reduce-kv","reduced","reduced?","reductions","ref","ref-history-count","ref-max-history","ref-min-history","ref-set","refer","refer-clojure","reify","release-pending-sends","rem","remove","remove-all-methods","remove-method","remove-ns","remove-watch","repeat","repeatedly","replace","replicate","require","reset!","reset-meta!","resolve","rest","restart-agent","resultset-seq","reverse","reversible?","rseq","rsubseq","run!","satisfies?","second","select-keys","send","send-off","send-via","seq","seq?","seque","sequence","sequential?","set!","set","set-agent-send-executor!","set-agent-send-off-executor!","set-error-handler!","set-error-mode!","set-validator!","set?","short","short-array","shorts","shuffle","shutdown-agents","slurp","some","some->","some->>","some-fn","some?","sort","sort-by","sorted-map","sorted-map-by","sorted-set","sorted-set-by","sorted?","special-symbol?","spit","split-at","split-with","str","string?","struct","struct-map","subs","subseq","subvec","supers","swap!","symbol","symbol?","sync","tagged-literal","tagged-literal?","take","take-last","take-nth","take-while","test","the-ns","thread-bound?","throw","time","to-array","to-array-2d","trampoline","transduce","transient","tree-seq","true?","try","type","unchecked-add","unchecked-add-int","unchecked-byte","unchecked-char","unchecked-dec","unchecked-dec-int","unchecked-divide-int","unchecked-double","unchecked-float","unchecked-inc","unchecked-inc-int","unchecked-int","unchecked-long","unchecked-multiply","unchecked-multiply-int","unchecked-negate","unchecked-negate-int","unchecked-remainder-int","unchecked-short","unchecked-subtract","unchecked-subtract-int","underive","unquote","unquote-splicing","unreduced","unsigned-bit-shift-right","update","update-in","update-proxy","use","val","vals","var","var-get","var-set","var?","vary-meta","vec","vector","vector-of","vector?","volatile!","volatile?","vreset!","vswap!","when","when-first","when-let","when-not","when-some","while","with-bindings","with-bindings*","with-in-str","with-loading-context","with-local-vars","with-meta","with-open","with-out-str","with-precision","with-redefs","with-redefs-fn","xml-seq","zero?","zipmap"]$/;"	v
s:worktree_for_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
safe_get	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function safe_get(record, idx) {$/;"	f
safe_get	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def safe_get(record, idx):$/;"	f
safe_join_get	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function safe_join_get(record, idx) {$/;"	f
safe_join_get	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def safe_join_get(record, idx):$/;"	f
safe_set	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function safe_set(record, idx, value) {$/;"	f
safe_set	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def safe_set(record, idx, value):$/;"	f
sameIDsHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:sameIDsHandler(next, msg) abort dict$/;"	f
same_ids_highlight	plugged/vim-go/autoload/go/guru.vim	/^function! s:same_ids_highlight(exit_val, output, mode) abort$/;"	f
sample_function	plugged/rainbow/tests/test.rb	/^def sample_function(a, b)$/;"	f
sample_lines	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def sample_lines(src_path, encoding, delim, policy, comment_prefix=None):$/;"	f
sample_method	plugged/rainbow/tests/test.rb	/^    def sample_method(a, b)$/;"	f	class:SampleClass
sample_records	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def sample_records(input_path, delim, policy, encoding, comment_prefix=None):$/;"	f
sample_records_sqlite	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def sample_records_sqlite(db_connection, table_name):$/;"	f
save_maparg_for	plugged/vim-go/autoload/go/debug.vim	/^function! s:save_maparg_for(bufname, lhs) abort$/;"	f
save_report	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    def save_report(self, dst):$/;"	m	class:CLIVimMediator
script_dir	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^script_dir = os.path.dirname(os.path.abspath(__file__))$/;"	v
section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
select_aggregated	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function select_aggregated(key, transparent_values) {$/;"	f
select_aggregated	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def select_aggregated(key, transparent_values):$/;"	f
select_except	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function select_except(src, except_fields) {$/;"	f
select_except	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def select_except(src, except_fields):$/;"	f
select_simple	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function select_simple(sort_key, NR, out_fields) {$/;"	f
select_simple	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def select_simple(sort_key, out_fields):$/;"	f
select_table_name_by_user_choice	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def select_table_name_by_user_choice(db_connection):$/;"	f
select_unnested	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function select_unnested(sort_key, NR, folded_fields) {$/;"	f
select_unnested	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def select_unnested(sort_key, folded_fields):$/;"	f
send	plugged/vim-fireplace/pythonx/fireplace.py	/^    def send(self, payload):$/;"	m	class:Connection
separate_actions	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def separate_actions(rbql_expression):$/;"	f
separate_string_literals	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def separate_string_literals(rbql_expression):$/;"	f
serveraddr	plugged/nvim-yarp/pythonx/yarp.py	/^serveraddr = sys.argv[1]$/;"	v
session_callback	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:session_callback(msg) dict abort$/;"	f
session_clone	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:session_clone(...) dict abort$/;"	f
session_close	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:session_close() dict abort$/;"	f
session_exists	plugged/vim-clojure-highlight/autoload/vim_clojure_highlight.vim	/^function! s:session_exists()$/;"	f
session_has_op	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:session_has_op(op) dict abort$/;"	f
session_message	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:session_message(msg, ...) dict abort$/;"	f
session_path	plugged/vim-fireplace/autoload/fireplace/session.vim	/^function! s:session_path() dict abort$/;"	f
set	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:set(var, default) abort$/;"	f
setCursorHold	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:setCursorHold()$/;"	f
setDiagnostics	plugged/vim-go/autoload/go/lsp.vim	/^function! s:setDiagnostics(...) abort$/;"	f
setDictionaries	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:setDictionaries()$/;"	f
setFolded	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
setHightlighting	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:setHightlighting() abort$/;"	f
setSyntax	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:setSyntax()$/;"	f
set_custom	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! s:set_custom(dest, name_or_dict, value) abort$/;"	f
set_custom	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def set_custom(self, custom: typing.Any) -> None:$/;"	m	class:_Parent
set_debug_mode	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def set_debug_mode():$/;"	f
set_debug_mode	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def set_debug_mode():$/;"	f
set_pattern	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def set_pattern(variable: typing.Dict[str, str],$/;"	f
set_source_attributes	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^    def set_source_attributes(self, context: UserContext) -> None:$/;"	m	class:_Parent
set_up_connect	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_connect() abort$/;"	f
set_up_doc	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_doc() abort$/;"	f
set_up_eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_eval() abort$/;"	f
set_up_go_to_file	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_go_to_file() abort$/;"	f
set_up_historical	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_historical() abort$/;"	f
set_up_require	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_require() abort$/;"	f
set_up_source	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_source() abort$/;"	f
set_up_spec	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_spec() abort$/;"	f
set_up_tests	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:set_up_tests() abort$/;"	f
set_value	plugged/deoplete.nvim/autoload/deoplete/custom.vim	/^function! s:set_value(dest, name, value) abort$/;"	f
set_vim_variable	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    def set_vim_variable(self, var_name, value):$/;"	m	class:CLIVimMediator
set_vim_variable	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^    def set_vim_variable(self, var_name, value):$/;"	m	class:VimInterface
setretval	plugged/vim-go/autoload/go/promise.vim	/^function! s:setretval(val, timer) dict$/;"	f
setup	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^def setup(vim: Nvim, level: str, output_file: str = '') -> None:$/;"	f
setupNERDTreeKeyMappings	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeKeyMappings()$/;"	f
setupNERDTreeListeners	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeListeners(listener) abort$/;"	f
setup_keymaps	plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
setup_logging	plugged/nvim-yarp/pythonx/yarp.py	/^    from neovim import attach, setup_logging$/;"	i
setup_logging	plugged/nvim-yarp/pythonx/yarp.py	/^    from pynvim import attach, setup_logging$/;"	i
setup_options	plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
setupproject	plugged/vim-go/autoload/gotest.vim	/^func! s:setupproject(dir, path) abort$/;"	f
shallow_parse_input_query	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def shallow_parse_input_query(query_text, input_iterator, join_tables_registry, query_context):$/;"	f
shellesc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
showMenu	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
show_error	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def show_error(error_type, error_msg, is_interactive):$/;"	f
show_error_plain_text	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function show_error_plain_text(error_type, error_msg) {$/;"	f
show_errors	plugged/vim-go/autoload/go/mod.vim	/^function! s:show_errors(errors) abort$/;"	f
show_exception	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function show_exception(e) {$/;"	f
show_goroutines	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_goroutines(currentGoroutineID, res) abort$/;"	f
show_help	plugged/rainbow_csv/rbql_core/rbql-js/cli_parser.js	/^function show_help(scheme, description, epilog) {$/;"	f
show_stacktrace	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_stacktrace(check_errors, res) abort$/;"	f
show_variables	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_variables() abort$/;"	f
show_warning	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^function show_warning(msg) {$/;"	f
show_warning	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def show_warning(msg, is_interactive):$/;"	f
shutdown	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def shutdown(cls):$/;"	m	class:NvimHandler
shutil	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import shutil$/;"	i
sign_getplaced	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_getplaced() abort$/;"	f
sign_in	plugged/vim-elixir/spec/syntax/variable_spec.rb	/^    def sign_in(conn, %{$/;"	f
sign_place	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_place(id, expr, lnum) abort$/;"	f
sign_unplace	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_unplace(id, file) abort$/;"	f
simple_join	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def simple_join(fields, delim):$/;"	f
sink	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:sink(str) abort$/;"	f
skip_header	plugged/rainbow_csv/rbql_core/rbql-js/cli_rbql.js	/^    var skip_header = args['skip-header'];$/;"	v
slash	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:slash() abort$/;"	f
smart_split	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def smart_split(src, dlm, policy, preserve_quotes_and_whitespaces):$/;"	f
smth	plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def smth do$/;"	f
snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
socket	plugged/vim-fireplace/pythonx/fireplace.py	/^    def socket(self):$/;"	m	class:Connection
socket	plugged/vim-fireplace/pythonx/fireplace.py	/^import socket$/;"	i
socket	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import socket$/;"	i
socketserver	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    import SocketServer as socketserver$/;"	i
socketserver	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    import socketserver$/;"	i
softRefreshNerdTree	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:softRefreshNerdTree()$/;"	f
some_fun	plugged/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f
some_func	plugged/vim-elixir/spec/folding/basic_spec.rb	/^    def some_func do # fold$/;"	f
some_func	plugged/vim-elixir/spec/folding/basic_spec.rb	/^    def some_func do$/;"	f
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func
some_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
some_other_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func
some_other_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func
some_other_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func
some_other_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func
some_other_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func
some_other_func	plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func
sortByLength	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:sortByLength(i1, i2)$/;"	f
sortTags	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
source	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:source(mode,...) abort$/;"	f
source.gather_candidates	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! s:source.gather_candidates(args, context) abort$/;"	f
source.hooks.on_syntax	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! s:source.hooks.on_syntax(args, context) abort$/;"	f
spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
spawn_complete	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:spawn_complete(id, name, callback) abort$/;"	f
spawn_eval	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:spawn_eval(id, classpath, expr, ns, callback) abort$/;"	f
spawn_interrupt	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:spawn_interrupt(id) abort$/;"	f
spawn_wait	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:spawn_wait(id, ...) abort$/;"	f
split_lines	plugged/rainbow_csv/rbql_core/rbql-js/csv_utils.js	/^function split_lines(text) {$/;"	f
split_quoted_str	plugged/rainbow_csv/rbql_core/rbql-js/csv_utils.js	/^function split_quoted_str(src, dlm, preserve_quotes_and_whitespaces=false) {$/;"	f
split_quoted_str	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def split_quoted_str(src, dlm, preserve_quotes_and_whitespaces=False):$/;"	f
split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
split_whitespace_separated_str	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def split_whitespace_separated_str(src, preserve_whitespaces=False):$/;"	f
sqlite3	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^    import sqlite3$/;"	i
sqlite3	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^        import sqlite3$/;"	i
sqlite_main	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def sqlite_main():$/;"	f
stable_compare	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function stable_compare(a, b) {$/;"	f
stack_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:stack_cb(res) abort$/;"	f
stacktrace_list	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:stacktrace_list(all) abort$/;"	f
start	plugged/vim-go/autoload/go/job.vim	/^function! s:start(args) dict$/;"	f
start	plugged/vim-go/autoload/go/lsp.vim	/^function! s:start() abort dict$/;"	f
start	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def start():$/;"	f
start_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:start_cb() abort$/;"	f
start_preview_mode_csv	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def start_preview_mode_csv(args):$/;"	f
start_preview_mode_sqlite	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^def start_preview_mode_sqlite(args):$/;"	f
starts_with	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:starts_with(context, expr)$/;"	f
state	plugged/vim-go/autoload/go/job.vim	/^    let state.custom_complete = a:args.complete$/;"	v
state.show_errors	plugged/vim-go/autoload/go/job.vim	/^  function state.show_errors(job, exit_status, data)$/;"	f
state.show_status	plugged/vim-go/autoload/go/job.vim	/^  function state.show_status(job, exit_status) dict$/;"	f
status	autoload/plug.vim	/^function! s:status()$/;"	f
status_escape_string	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:status_escape_string(src)$/;"	f
status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
still_have_issues	plugged/deoplete.nvim/autoload/health/deoplete.vim	/^function! s:still_have_issues() abort$/;"	f
stop	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:stop(job) abort$/;"	f
stop	plugged/vim-go/autoload/go/debug.vim	/^function! s:stop() abort$/;"	f
stop	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def stop():$/;"	f
str	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
str	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:str(string) abort$/;"	f
str_strip	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function str_strip(src) {$/;"	f
strfmt	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
strfmt	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
string_to_hex	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:string_to_hex(src)$/;"	f
string_to_randomly_encoded_stream	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def string_to_randomly_encoded_stream(src_str):$/;"	f
strip	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:strip(input)$/;"	f
strip_comments	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^function strip_comments(cline) {$/;"	f
strip_comments	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def strip_comments(cline):$/;"	f
strip_doc_blocks	plugged/vim-elixir/bin/test_indent	/^def strip_doc_blocks(body)$/;"	f
strip_namespace_and_macro_chars	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:strip_namespace_and_macro_chars(word)$/;"	f
strlen	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! s:strlen(str) abort$/;"	f
strwidth	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def strwidth(string: str) -> int:$/;"	f
sub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
subprocess	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^import subprocess$/;"	i
subprocess	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import subprocess$/;"	i
subprocess	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import subprocess$/;"	i
subprocess	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import subprocess$/;"	i
substitute_suffix	plugged/deoplete.nvim/autoload/deoplete/handler.vim	/^function! s:substitute_suffix(user_data) abort$/;"	f
suite.BuildGitStatusCommand	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitStatusCommand() abort$/;"	f
suite.BuildGitWorkdirCommand	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitWorkdirCommand() abort$/;"	f
suite.CSSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.CSSymbol()$/;"	f
suite.CSharpSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.CSharpSymbol()$/;"	f
suite.CSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.CSymbol()$/;"	f
suite.ConfigOptions	plugged/vim-devicons/test/default_setting.vim	/^function! s:suite.ConfigOptions()$/;"	f
suite.CppSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.CppSymbol()$/;"	f
suite.CustomIndicator	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.CustomIndicator() abort$/;"	f
suite.DBSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.DBSymbol()$/;"	f
suite.DefaultIcon	plugged/vim-devicons/test/fileformat.vim	/^function! s:suite.DefaultIcon()$/;"	f
suite.DockerSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.DockerSymbol()$/;"	f
suite.DropboxSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.DropboxSymbol()$/;"	f
suite.ElixirSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.ElixirSymbol()$/;"	f
suite.ElmSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.ElmSymbol()$/;"	f
suite.ErlangSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.ErlangSymbol()$/;"	f
suite.ExtensionConfig	plugged/vim-devicons/test/default_setting.vim	/^function! s:suite.ExtensionConfig()$/;"	f
suite.FSharpSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.FSharpSymbol()$/;"	f
suite.FileNodesDefaultSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.FileNodesDefaultSymbol()$/;"	f
suite.GearSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.GearSymbol()$/;"	f
suite.GoSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.GoSymbol()$/;"	f
suite.HaskellSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.HaskellSymbol()$/;"	f
suite.Initializing	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Initializing() abort$/;"	f
suite.JavaScriptSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.JavaScriptSymbol()$/;"	f
suite.JavaSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.JavaSymbol()$/;"	f
suite.JsonSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.JsonSymbol()$/;"	f
suite.LicenseSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.LicenseSymbol()$/;"	f
suite.Logger	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Logger() abort$/;"	f
suite.LuaSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.LuaSymbol()$/;"	f
suite.MacIcon	plugged/vim-devicons/test/fileformat.vim	/^function! s:suite.MacIcon()$/;"	f
suite.MarkdownSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.MarkdownSymbol()$/;"	f
suite.NodeModuleSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.NodeModuleSymbol()$/;"	f
suite.PhpSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.PhpSymbol()$/;"	f
suite.PythonSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.PythonSymbol()$/;"	f
suite.RSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.RSymbol()$/;"	f
suite.ReactSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.ReactSymbol()$/;"	f
suite.RssSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.RssSymbol()$/;"	f
suite.RubySymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.RubySymbol()$/;"	f
suite.RustSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.RustSymbol()$/;"	f
suite.ScalaSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.ScalaSymbol()$/;"	f
suite.ShellSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.ShellSymbol()$/;"	f
suite.SwiftSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.SwiftSymbol()$/;"	f
suite.TexSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.TexSymbol()$/;"	f
suite.TypeScript	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.TypeScript()$/;"	f
suite.UpdateParentDirsStatus	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.UpdateParentDirsStatus() abort$/;"	f
suite.VimSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.VimSymbol()$/;"	f
suite.VueSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suite.VueSymbol()$/;"	f
suite.WindowsIcon	plugged/vim-devicons/test/fileformat.vim	/^function! s:suite.WindowsIcon()$/;"	f
suite.custom_filter	plugged/deoplete.nvim/test/autoload/deoplete/custom.vim	/^function! s:suite.custom_filter() abort$/;"	f
suite.custom_option	plugged/deoplete.nvim/test/autoload/deoplete/custom.vim	/^function! s:suite.custom_option() abort$/;"	f
suite.custom_source	plugged/deoplete.nvim/test/autoload/deoplete/custom.vim	/^function! s:suite.custom_source() abort$/;"	f
suite.vimoption2python	plugged/deoplete.nvim/test/autoload/deoplete/util.vim	/^function! s:suite.vimoption2python() abort$/;"	f
suitePerlSymbol	plugged/vim-devicons/test/filetype.vim	/^function! s:suitePerlSymbol()$/;"	f
sum	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def sum(*args):$/;"	f
sw	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
synGroupID	plugged/rainbow/autoload/rainbow.vim	/^fun s:synGroupID(prefix, group, lv)$/;"	f
synID	plugged/rainbow/autoload/rainbow.vim	/^fun s:synID(prefix, group, lv, id)$/;"	f
syn_id_name	plugged/vim-clojure-static/indent/clojure.vim	/^	function! s:syn_id_name()$/;"	f
sync_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:sync_guru(args) abort$/;"	f
syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
syntax	plugged/vim-elixir/spec/spec_helper.rb	/^  def syntax(content, pattern)$/;"	f	class:Buffer
syntax_keyword	plugged/vim-clojure-static/syntax/clojure.vim	/^function! s:syntax_keyword(dict)$/;"	f
syntax_match_references	plugged/vim-clojure-highlight/plugin/vim_clojure_highlight.vim	/^function! s:syntax_match_references()$/;"	f
syntax_name	plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:syntax_name(line, col)$/;"	f
sys	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^import sys$/;"	i
sys	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^import sys$/;"	i
sys	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^import sys$/;"	i
sys	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^import sys$/;"	i
sys	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^import sys$/;"	i
sys	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import sys$/;"	i
sys	plugged/deoplete.nvim/test/conftest.py	/^import sys$/;"	i
sys	plugged/nvim-yarp/pythonx/yarp.py	/^import sys$/;"	i
sys	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^import sys$/;"	i
sys	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import sys$/;"	i
sys	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^import sys$/;"	i
sys	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^import sys$/;"	i
sys	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import sys$/;"	i
sys	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import sys$/;"	i
sys	plugged/vim-fireplace/pythonx/fireplace.py	/^import sys$/;"	i
sys	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^import sys$/;"	i
sys	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import sys$/;"	i
system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import os # For system operations inside user queries$/;"	i
system	plugged/vim-go/autoload/go/util.vim	/^function! s:system(cmd, ...) abort$/;"	f
system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
table_has_records_with_comment_prefix	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def table_has_records_with_comment_prefix(table, comment_prefix):$/;"	f
table_names_settings_path	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^table_names_settings_path = os.path.join(user_home_dir, '.rbql_table_names')$/;"	v
table_to_csv_string_random	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def table_to_csv_string_random(table, delim, policy, comment_prefix=None):$/;"	f
tabular#DoGTabularize	plugged/tabular/autoload/tabular.vim	/^function! tabular#DoGTabularize()$/;"	f
tabular#ElementFormatPattern	plugged/tabular/autoload/tabular.vim	/^function! tabular#ElementFormatPattern()$/;"	f
tabular#PipeRange	plugged/tabular/autoload/tabular.vim	/^function! tabular#PipeRange(includepat, ...) range$/;"	f
tabular#PipeRangeWithOptions	plugged/tabular/autoload/tabular.vim	/^function! tabular#PipeRangeWithOptions(includepat, filterlist, options) range$/;"	f
tabular#SplitDelimUnitTest	plugged/tabular/autoload/tabular.vim	/^function! tabular#SplitDelimUnitTest()$/;"	f
tabular#TabularizeStrings	plugged/tabular/autoload/tabular.vim	/^function! tabular#TabularizeStrings(strings, delim, ...)$/;"	f
tagbar#CloseWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#ForceUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ForceUpdate() abort$/;"	f
tagbar#GetTagNearLine	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#GetTagNearLine(lnum, ...) abort$/;"	f
tagbar#IsOpen	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#IsOpen() abort$/;"	f
tagbar#OpenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StopAutoUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#ToggleWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#Update	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#Update() abort$/;"	f
tagbar#autoopen	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#currenttagtype	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttagtype(fmt, default) abort$/;"	f
tagbar#debug#enabled	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#jump	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#jump() abort$/;"	f
tagbar#printfileinfo	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#printfileinfo() abort$/;"	f
tagbar#prototypes#basetag#new	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	plugged/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	plugged/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
temp_response	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:temp_response(response, ext) abort$/;"	f
tempfile	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import tempfile$/;"	i
tempfile	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import tempfile$/;"	i
test	plugged/rainbow/tests/test.pl	/^sub test {$/;"	s
test	plugged/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^  def test do$/;"	f
test	plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def test do$/;"	f	class:name.name.f.f
test	plugged/vim-elixir/spec/indent/if_spec.rb	/^  def test do$/;"	f
test	plugged/vim-elixir/spec/indent/lists_spec.rb	/^    def test do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
test	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config
test	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config.test
test	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config.test.test
test	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config.test.test.test.project
test	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f
test	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f	class:test
test	plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f	class:test.test
test	plugged/vim-go/autoload/go/test_test.vim	/^func! s:test(file, expected, ...) abort$/;"	f
test_another_feature	plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test_another_feature do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double
test_attribute_variables_parsing	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_attribute_variables_parsing(self):$/;"	m	class:TestHeaderParsing
test_binary_search	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_util.py	/^def test_binary_search():$/;"	f
test_bom_warning	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_bom_warning(self):$/;"	m	class:TestRecordIterator
test_charwidth	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^def test_charwidth():$/;"	f
test_coverage	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^function! s:test_coverage()$/;"	f
test_custom	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_util.py	/^def test_custom():$/;"	f
test_dictionary_variables_parsing	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_dictionary_variables_parsing(self):$/;"	m	class:TestHeaderParsing
test_filter	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_converter_reorder_attr.py	/^def test_filter():$/;"	f
test_fuzzy_escapse	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^def test_fuzzy_escapse():$/;"	f
test_globruntime	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_util.py	/^def test_globruntime():$/;"	f
test_iterator	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_iterator(self):$/;"	m	class:TestRecordIterator
test_iterator_rfc	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_iterator_rfc(self):$/;"	m	class:TestRecordIterator
test_iterator_rfc_comments	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_iterator_rfc_comments(self):$/;"	m	class:TestRecordIterator
test_iterator_unicode	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_iterator_unicode(self):$/;"	m	class:TestRecordIterator
test_job	plugged/vim-go/autoload/go/test.vim	/^function! s:test_job(cmd, args) abort$/;"	f
test_json_scenarios	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_json_scenarios(self):$/;"	m	class:TestRBQLWithCSV
test_matcher_full_fuzzy	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_matcher_full_fuzzy.py	/^def test_matcher_full_fuzzy():$/;"	f
test_matcher_fuzzy	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_matcher_fuzzy.py	/^def test_matcher_fuzzy():$/;"	f
test_monocolumn_separated_parsing	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_monocolumn_separated_parsing(self):$/;"	m	class:TestRecordIterator
test_monocolumn_write_failure	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_monocolumn_write_failure(self):$/;"	m	class:TestRecordIterator
test_multicharacter_separator_parsing	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_multicharacter_separator_parsing(self):$/;"	m	class:TestRecordIterator
test_multiline_fields	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_multiline_fields(self):$/;"	m	class:TestRecordIterator
test_output_warnings	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_output_warnings(self):$/;"	m	class:TestRecordIterator
test_overlap_length	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^def test_overlap_length():$/;"	f
test_pos	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_util.py	/^def test_pos():$/;"	f
test_random	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_random(self):$/;"	m	class:TestSplitMethods
test_random_headers	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_random_headers(self):$/;"	m	class:TestRBQLSimple
test_reorder	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_converter_reorder_attr.py	/^def test_reorder():$/;"	f
test_simple_case	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_simple_case(self):$/;"	m	class:TestRBQLSimple
test_skipping	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^def test_skipping():$/;"	f
test_split	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_split(self):$/;"	m	class:TestSplitMethods
test_split_chunk_sizes	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_split_chunk_sizes(self):$/;"	m	class:TestLineSplit
test_split_lines_custom	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_split_lines_custom(self):$/;"	m	class:TestLineSplit
test_split_whitespaces	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_split_whitespaces(self):$/;"	m	class:TestSplitMethods
test_strwidth	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^def test_strwidth():$/;"	f
test_truncate	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^def test_truncate():$/;"	f
test_uniq_list_dict	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_util.py	/^def test_uniq_list_dict():$/;"	f
test_unquote	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_unquote(self):$/;"	m	class:TestSplitMethods
test_utf_decoding_errors	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_utf_decoding_errors(self):$/;"	m	class:TestRecordIterator
test_whitespace_separated_parsing	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^    def test_whitespace_separated_parsing(self):$/;"	m	class:TestRecordIterator
textDocumentPositionParams	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:textDocumentPositionParams(fname, line, col) abort$/;"	f
textEditLess	plugged/vim-go/autoload/go/lsp.vim	/^function! s:textEditLess(left, right) abort$/;"	f
threading	plugged/vim-fireplace/pythonx/fireplace.py	/^import threading$/;"	i
threading	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import threading$/;"	i
throw	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
tick	autoload/plug.vim	/^function! s:tick()$/;"	f
time	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^import time$/;"	i
time	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^import time$/;"	i
time	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^import time$/;"	i
time	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import time$/;"	i
time	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import time$/;"	i
time	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import time$/;"	i
timer_restart	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_restart()$/;"	f
timer_start	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_start()$/;"	f
timer_stop	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_stop()$/;"	f
to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_client	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^def to_client(msg):$/;"	f
to_ns	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:to_ns(path) abort$/;"	f
to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
toggleFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
toggleIgnoreFilter	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
toggleShowBookmarks	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
toggleShowFiles	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
toggleShowHidden	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
toggleZoom	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
toggle_clojure_highlight_references	plugged/vim-clojure-highlight/plugin/vim_clojure_highlight.vim	/^function! s:toggle_clojure_highlight_references()$/;"	f
traceback	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^                import traceback$/;"	i
traceback	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import traceback$/;"	i
traceback	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^        import traceback$/;"	i
traceback	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^import traceback$/;"	i
traceback	plugged/vim-fireplace/pythonx/fireplace.py	/^import traceback$/;"	i
translate_except_expression	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def translate_except_expression(except_expression, input_variables_map, string_literals):$/;"	f
translate_select_expression	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def translate_select_expression(select_expression):$/;"	f
translate_update_expression	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^def translate_update_expression(update_expression, input_variables_map, string_literals):$/;"	f
transport_alive	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:transport_alive() dict abort$/;"	f
transport_clone	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:transport_clone(...) dict abort$/;"	f
transport_close	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:transport_close() dict abort$/;"	f
transport_has_op	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:transport_has_op(op) dict abort$/;"	f
transport_message	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:transport_message(request, ...) dict abort$/;"	f
trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
trim	plugged/rainbow/autoload/rainbow.vim	/^fun s:trim(s)$/;"	f
truncate	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def truncate(string: str, max_width: int) -> str:$/;"	f
truncate_skipping	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_abbr.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
truncate_skipping	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_info.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
truncate_skipping	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_kind.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
truncate_skipping	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_truncate_menu.py	/^from deoplete.util import truncate_skipping, UserContext, Candidates$/;"	i
truncate_skipping	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def truncate_skipping(string: str, max_width: int,$/;"	f
try_read_index	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:try_read_index(src_path)$/;"	f
try_read_index	plugged/rainbow_csv/rbql_core/rbql-js/rbql_csv.js	/^function try_read_index(index_path) {$/;"	f
try_read_index	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^def try_read_index(index_path):$/;"	f
try_read_lines	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:try_read_lines(src_path)$/;"	f
tunnel	plugged/vim-fireplace/pythonx/fireplace.py	/^    def tunnel(self):$/;"	m	class:Connection
tunnel_socket_to_stdout	plugged/vim-fireplace/pythonx/fireplace.py	/^    def tunnel_socket_to_stdout(self):$/;"	m	class:Connection
type	plugged/vim-elixir/spec/spec_helper.rb	/^  def type(content)$/;"	f	class:Buffer
typeDefinitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:typeDefinitionHandler(next, msg) abort dict$/;"	f
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/base/filter.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/base/source.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/child.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/context.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/deoplete.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_auto_delimiter.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_remove_overlap.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/converter_reorder_attr.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/matcher_cpsm.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/filter/sorter_rank.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/parent.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/process.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/source/buffer.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/source/file.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/source/member.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/source/omni.py	/^import typing$/;"	i
typing	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import typing$/;"	i
typoo	plugged/rainbow/tests/test.c	/^typoo$/;"	f
ulen	plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ulen(s)$/;"	f
unicode_literals	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	plugged/rainbow_csv/rbql_core/rbql/rbql_main.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	plugged/rainbow_csv/rbql_core/rbql/rbql_sqlite.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^from __future__ import (unicode_literals, division, absolute_import, print_function)$/;"	i
unicodedata	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import unicodedata$/;"	i
uniq	plugged/vim-go/autoload/go/impl.vim	/^  function! s:uniq(list)$/;"	f
uniq_list_dict	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^def uniq_list_dict(li: typing.List[typing.Any]) -> typing.List[typing.Any]:$/;"	f
unite#sources#decls#define	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! unite#sources#decls#define()$/;"	f
unittest	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^import unittest$/;"	i
unnest	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^unnest = UNNEST$/;"	v
unquote_field	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def unquote_field(field):$/;"	f
unquote_fields	plugged/rainbow_csv/rbql_core/rbql/csv_utils.py	/^def unquote_fields(fields):$/;"	f
unregister	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:unregister(transport) abort$/;"	f
unregister_dead	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:unregister_dead() abort$/;"	f
unset	plugged/vim-go/autoload/go/util.vim	/^function! s:unset(name) abort$/;"	f
upDirCurrentRootClosed	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
upDirCurrentRootOpen	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_breakpoint	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_breakpoint(res) abort$/;"	f
update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_goroutines	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_goroutines() abort$/;"	f
update_goroutines_state_handler	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_goroutines_state_handler(check_errors, res) abort$/;"	f
update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
update_records	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:update_records(records, key, new_record)$/;"	f
update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_stacktrace	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_stacktrace() abort$/;"	f
update_table_record	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:update_table_record(table_path, delim, policy, comment_prefix)$/;"	f
update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
update_variables	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_variables() abort$/;"	f
update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
use_system_python	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:use_system_python()$/;"	f
user	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import datetime # For date operations inside user queries$/;"	i
user	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import math # For math operations inside user queries$/;"	i
user	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^import os # For system operations inside user queries$/;"	i
user_home_dir	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^user_home_dir = os.path.expanduser('~')$/;"	v
user_ns	plugged/vim-fireplace/autoload/fireplace.vim	/^function! s:user_ns(...) abort$/;"	f
util	plugged/deoplete.nvim/rplugin/python3/deoplete/util.py	/^import importlib.util$/;"	i
util	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_filter.py	/^import deoplete.util as util$/;"	i
util	plugged/deoplete.nvim/test/rplugin/python3/deoplete/test_util.py	/^import deoplete.util as util$/;"	i
util	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import denite.util$/;"	i
val	plugged/vim-markdown/ftplugin/markdown.vim	/^        let val = matchstr(s:filetype, "[^=]*$")$/;"	v
variance	plugged/rainbow_csv/rbql_core/rbql-js/rbql.js	/^        var variance = cur_sum_sq \/ cur_cnt - avg_val * avg_val;$/;"	v
variance	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^variance = VARIANCE$/;"	v
vendordirs	plugged/vim-go/autoload/go/package.vim	/^function! s:vendordirs() abort$/;"	f
version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
vim	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    import pynvim as vim$/;"	i
vim	plugged/deoplete.nvim/rplugin/python3/deoplete/__init__.py	/^    import vim$/;"	i
vim	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^        import vim$/;"	i
vim	plugged/vim-cljfmt/plugin/cljfmt.vim	/^augroup vim-cljfmt$/;"	a
vim	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^	import vim$/;"	i
vim	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^	vim = {}$/;"	v
vim	plugged/vim-go/ftplugin/asm.vim	/^augroup vim-go-asm-buffer$/;"	a
vim	plugged/vim-go/ftplugin/go.vim	/^augroup vim-go-buffer$/;"	a
vim	plugged/vim-go/ftplugin/gomod.vim	/^augroup vim-go-gomod-buffer$/;"	a
vim	plugged/vim-go/plugin/go.vim	/^augroup vim-go$/;"	a
vim	plugged/vim-go/syntax/go.vim	/^augroup vim-go-hi$/;"	a
vim	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^import vim$/;"	i
vim	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^import vim$/;"	i
vim	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^import vim$/;"	i
vim_clojure_highlight	plugged/vim-clojure-highlight/plugin/vim_clojure_highlight.vim	/^augroup vim_clojure_highlight$/;"	a
vim_clojure_highlight#syntax_match_references	plugged/vim-clojure-highlight/autoload/vim_clojure_highlight.vim	/^function! vim_clojure_highlight#syntax_match_references(...)$/;"	f
vim_error	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^vim_error = vim.Function('neovim_rpc#_error')$/;"	v
vim_get_func	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^from powerline.bindings.vim import (vim_get_func, buffer_name)$/;"	i
vim_interface	plugged/rainbow_csv/rbql_core/vim_rbql.py	/^vim_interface = None$/;"	v
vim_py	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^vim_py = vim.eval('g:neovim_rpc#py')$/;"	v
vimdir	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:vimdir()$/;"	f
vimfiler#columns#devicons#define	plugged/vim-devicons/autoload/vimfiler/columns/devicons.vim	/^function! vimfiler#columns#devicons#define() abort$/;"	f
vimoption2python	plugged/deoplete.nvim/autoload/deoplete/util.vim	/^function! s:vimoption2python(option) abort$/;"	f
vinf	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^vinf = rbql_engine.VariableInfo$/;"	v
walk	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^def walk(fn, obj):$/;"	f
warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
warn	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    warn = warning$/;"	v	class:LoggingMixin
warn_stale	plugged/vim-go/autoload/go/debug.vim	/^function! s:warn_stale(filename) abort$/;"	f
warn_when_stale	plugged/vim-go/autoload/go/debug.vim	/^function! s:warn_when_stale(filename) abort$/;"	f
warning	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def warning(self, msg: str,$/;"	m	class:LoggingMixin
warning	plugged/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
webdevicons	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^def webdevicons(pl, segment_info):$/;"	f
webdevicons#hardRefresh	plugged/vim-devicons/plugin/webdevicons.vim	/^function! webdevicons#hardRefresh()$/;"	f
webdevicons#pluginHome	plugged/vim-devicons/plugin/webdevicons.vim	/^function! webdevicons#pluginHome()$/;"	f
webdevicons#refresh	plugged/vim-devicons/plugin/webdevicons.vim	/^function! webdevicons#refresh()$/;"	f
webdevicons#softRefresh	plugged/vim-devicons/plugin/webdevicons.vim	/^function! webdevicons#softRefresh()$/;"	f
webdevicons#version	plugged/vim-devicons/plugin/webdevicons.vim	/^function! webdevicons#version()$/;"	f
webdevicons_file_format	plugged/vim-devicons/pythonx/vim_devicons/powerline/segments.py	/^def webdevicons_file_format(pl, segment_info):$/;"	f
winjobarg	plugged/vim-go/autoload/go/job.vim	/^function! s:winjobarg(idx, val) abort$/;"	f
winshell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
with_file	plugged/vim-elixir/spec/spec_helper.rb	/^  def with_file(content = nil)$/;"	f	class:Buffer
work	plugged/vim-go/autoload/go/promise_test.vim	/^func! s:work(val, timer)$/;"	f
workspaceFolder	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:workspaceFolder(key, val) abort$/;"	f
world	plugged/vim-elixir/spec/indent/def_spec.rb	/^  def world do$/;"	f	class:handle_call.hello
wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
wrap_nvim_callback	plugged/vim-fireplace/autoload/fireplace/transport.vim	/^function! s:wrap_nvim_callback(cb, buffer, job, msgs, _) abort$/;"	f
wrapper	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^    def wrapper(self,  # type: ignore$/;"	f	function:logmethod
wrapper	plugged/vim-go/autoload/go/promise.vim	/^function! s:wrapper(fn, default, ...) dict$/;"	f
wraps	plugged/deoplete.nvim/rplugin/python3/deoplete/logger.py	/^from functools import wraps$/;"	i
write	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^    def write(self, line):$/;"	m	class:RedirectStream
write	plugged/rainbow_csv/rbql_core/rbql/rbql_csv.py	/^    def write(self, fields):$/;"	m	class:CSVWriter
write	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def write(self, fields):$/;"	m	class:RBQLOutputWriter
write	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def write(self, fields):$/;"	m	class:TableWriter
write	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def write(self, record):$/;"	m	class:TopWriter
write	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def write(self, record):$/;"	m	class:UniqCountWriter
write	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def write(self, record):$/;"	m	class:UniqWriter
write	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^    def write(self, sort_key_value, record):$/;"	m	class:SortedWriter
write	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def write(self, w):$/;"	m	class:SocketToStream
write_and_parse_back	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def write_and_parse_back(table, encoding, delim, policy):$/;"	f
write_index	plugged/rainbow_csv/autoload/rainbow_csv.vim	/^func! s:write_index(records, dst_path)$/;"	f
write_out	plugged/vim-go/autoload/go/tags.vim	/^func s:write_out(out) abort$/;"	f
write_triggered_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
writelines	plugged/deoplete.nvim/autoload/deoplete/_main.py	/^    def writelines(self, lines):$/;"	m	class:RedirectStream
wrong_aggregation_usage_error	plugged/rainbow_csv/rbql_core/rbql/rbql_engine.py	/^wrong_aggregation_usage_error = 'Usage of RBQL aggregation functions inside Python expressions is not allowed, see the docs'$/;"	v
xpto	plugged/vim-elixir/spec/indent/tuples_spec.rb	/^  def xpto do$/;"	f
xrange6	plugged/rainbow_csv/rbql_core/test/test_csv_utils.py	/^def xrange6(x):$/;"	f
yarp	plugged/nvim-yarp/autoload/yarp/core.vim	/^augroup yarp$/;"	a
yarp#core#_nop	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#_nop(...) dict$/;"	f
yarp#core#channel_started	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#channel_started(id, channel)$/;"	f
yarp#core#error	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#error(mod, msg)$/;"	f
yarp#core#jobstart	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#jobstart() dict$/;"	f
yarp#core#new	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#new(rp)$/;"	f
yarp#core#notify	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#notify(method, ...) dict$/;"	f
yarp#core#on_exit	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_exit(chan_id, data, event) dict$/;"	f
yarp#core#on_stderr	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_stderr(chan_id, data, event) dict$/;"	f
yarp#core#request	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#request(method, ...) dict$/;"	f
yarp#core#serveraddr	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#serveraddr()$/;"	f
yarp#core#try_notify	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#try_notify(method, ...) dict$/;"	f
yarp#core#wait_channel	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#wait_channel() dict$/;"	f
yarp#core#warn	plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#warn(mod, msg)$/;"	f
yarp#py	plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py(module)$/;"	f
yarp#py3	plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py3(module)$/;"	f
yarp#pyx#init	plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! yarp#pyx#init() dict$/;"	f
yarpid	plugged/nvim-yarp/pythonx/yarp.py	/^yarpid = int(sys.argv[2])$/;"	v
